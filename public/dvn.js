/*! For license information please see dvn.js.LICENSE.txt */
(()=>{var t={4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var o=a.apply(null,n);o&&e.push(o)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var l in n)r.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()},5961:(e,t,n)=>{"use strict";var r=f(n(2289)),a=f(n(2276)),i=f(n(5443)),o=f(n(7044)),l=f(n(9972)),s=f(n(5065)),u=f(n(8532)),c=n(2362),d=f(n(6025));function f(e){return e&&e.__esModule?e:{default:e}}var h=function(){},p=function(e,t,n){var r=new h;if(void 0===e)throw Error("No element to render on was provided.");return r._renderProperties=(0,l.default)(e),r._encodings=[],r._options=d.default,r._errorHandler=new u.default(r),void 0!==t&&((n=n||{}).format||(n.format=y()),r.options(n)[n.format](t,n).render()),r};for(var g in p.getModule=function(e){return r.default[e]},r.default)r.default.hasOwnProperty(g)&&m(r.default,g);function m(e,t){h.prototype[t]=h.prototype[t.toUpperCase()]=h.prototype[t.toLowerCase()]=function(n,r){var i=this;return i._errorHandler.wrapBarcodeCall((function(){r.text=void 0===r.text?void 0:""+r.text;var o=(0,a.default)(i._options,r);o=(0,s.default)(o);var l=e[t],u=v(n,l,o);return i._encodings.push(u),i}))}}function v(e,t,n){var r=new t(e=""+e,n);if(!r.valid())throw new c.InvalidInputException(r.constructor.name,e);var o=r.encode();o=(0,i.default)(o);for(var l=0;l<o.length;l++)o[l].options=(0,a.default)(n,o[l].options);return o}function y(){return r.default.CODE128?"CODE128":Object.keys(r.default)[0]}function b(e,t,n){t=(0,i.default)(t);for(var r=0;r<t.length;r++)t[r].options=(0,a.default)(n,t[r].options),(0,o.default)(t[r].options);(0,o.default)(n),new(0,e.renderer)(e.element,t,n).render(),e.afterRender&&e.afterRender()}h.prototype.options=function(e){return this._options=(0,a.default)(this._options,e),this},h.prototype.blank=function(e){var t=new Array(e+1).join("0");return this._encodings.push({data:t}),this},h.prototype.init=function(){var e;if(this._renderProperties)for(var t in Array.isArray(this._renderProperties)||(this._renderProperties=[this._renderProperties]),this._renderProperties){e=this._renderProperties[t];var n=(0,a.default)(this._options,e.options);"auto"==n.format&&(n.format=y()),this._errorHandler.wrapBarcodeCall((function(){var t=v(n.value,r.default[n.format.toUpperCase()],n);b(e,t,n)}))}},h.prototype.render=function(){if(!this._renderProperties)throw new c.NoElementException;if(Array.isArray(this._renderProperties))for(var e=0;e<this._renderProperties.length;e++)b(this._renderProperties[e],this._encodings,this._options);else b(this._renderProperties,this._encodings,this._options);return this},h.prototype._defaults=d.default,"undefined"!=typeof window&&(window.JsBarcode=p),"undefined"!=typeof jQuery&&(jQuery.fn.JsBarcode=function(e,t){var n=[];return jQuery(this).each((function(){n.push(this)})),p(n,e,t)}),e.exports=p},8012:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.text=n.text||t,this.options=n}},2089:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(8012))&&r.__esModule?r:{default:r},o=n(4602),l=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e.substring(1),n));return r.bytes=e.split("").map((function(e){return e.charCodeAt(0)})),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return/^[\x00-\x7F\xC8-\xD3]+$/.test(this.data)}},{key:"encode",value:function(){var e=this.bytes,n=e.shift()-105,r=o.SET_BY_CODE[n];if(void 0===r)throw new RangeError("The encoding does not start with a start character.");!0===this.shouldEncodeAsEan128()&&e.unshift(o.FNC1);var a=t.next(e,1,r);return{text:this.text===this.data?this.text.replace(/[^\x20-\x7E]/g,""):this.text,data:t.getBar(n)+a.result+t.getBar((a.checksum+n)%o.MODULO)+t.getBar(o.STOP)}}},{key:"shouldEncodeAsEan128",value:function(){var e=this.options.ean128||!1;return"string"==typeof e&&(e="true"===e.toLowerCase()),e}}],[{key:"getBar",value:function(e){return o.BARS[e]?o.BARS[e].toString():""}},{key:"correctIndex",value:function(e,t){if(t===o.SET_A){var n=e.shift();return n<32?n+64:n-32}return t===o.SET_B?e.shift()-32:10*(e.shift()-48)+e.shift()-48}},{key:"next",value:function(e,n,r){if(!e.length)return{result:"",checksum:0};var a=void 0,i=void 0;if(e[0]>=200){i=e.shift()-105;var l=o.SWAP[i];void 0!==l?a=t.next(e,n+1,l):(r!==o.SET_A&&r!==o.SET_B||i!==o.SHIFT||(e[0]=r===o.SET_A?e[0]>95?e[0]-96:e[0]:e[0]<32?e[0]+96:e[0]),a=t.next(e,n+1,r))}else i=t.correctIndex(e,r),a=t.next(e,n+1,r);var s=i*n;return{result:t.getBar(i)+a.result,checksum:s+a.checksum}}}]),t}(i.default);t.default=l},8238:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(2089))&&r.__esModule?r:{default:r},o=n(4602),l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,o.A_START_CHAR+e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return new RegExp("^"+o.A_CHARS+"+$").test(this.data)}}]),t}(i.default);t.default=l},1180:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(2089))&&r.__esModule?r:{default:r},o=n(4602),l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,o.B_START_CHAR+e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return new RegExp("^"+o.B_CHARS+"+$").test(this.data)}}]),t}(i.default);t.default=l},944:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(2089))&&r.__esModule?r:{default:r},o=n(4602),l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,o.C_START_CHAR+e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return new RegExp("^"+o.C_CHARS+"+$").test(this.data)}}]),t}(i.default);t.default=l},8845:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(2089)),a=i(n(7293));function i(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(e,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),/^[\x00-\x7F\xC8-\xD3]+$/.test(e))var r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,(0,a.default)(e),n));else r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return o(r)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(r.default);t.default=l},7293:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4602),a=function(e){return e.match(new RegExp("^"+r.A_CHARS+"*"))[0].length},i=function(e){return e.match(new RegExp("^"+r.B_CHARS+"*"))[0].length},o=function(e){return e.match(new RegExp("^"+r.C_CHARS+"*"))[0]};function l(e,t){var n=t?r.A_CHARS:r.B_CHARS,a=e.match(new RegExp("^("+n+"+?)(([0-9]{2}){2,})([^0-9]|$)"));if(a)return a[1]+String.fromCharCode(204)+s(e.substring(a[1].length));var i=e.match(new RegExp("^"+n+"+"))[0];return i.length===e.length?e:i+String.fromCharCode(t?205:206)+l(e.substring(i.length),!t)}function s(e){var t=o(e),n=t.length;if(n===e.length)return e;e=e.substring(n);var r=a(e)>=i(e);return t+String.fromCharCode(r?206:205)+l(e,r)}t.default=function(e){var t=void 0;if(o(e).length>=2)t=r.C_START_CHAR+s(e);else{var n=a(e)>i(e);t=(n?r.A_START_CHAR:r.B_START_CHAR)+l(e,n)}return t.replace(/[\xCD\xCE]([^])[\xCD\xCE]/,(function(e,t){return String.fromCharCode(203)+t}))}},4602:(e,t)=>{"use strict";var n;function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var a=t.SET_A=0,i=t.SET_B=1,o=t.SET_C=2,l=(t.SHIFT=98,t.START_A=103),s=t.START_B=104,u=t.START_C=105;t.MODULO=103,t.STOP=106,t.FNC1=207,t.SET_BY_CODE=(r(n={},l,a),r(n,s,i),r(n,u,o),n),t.SWAP={101:a,100:i,99:o},t.A_START_CHAR=String.fromCharCode(208),t.B_START_CHAR=String.fromCharCode(209),t.C_START_CHAR=String.fromCharCode(210),t.A_CHARS="[\0-_È-Ï]",t.B_CHARS="[ -È-Ï]",t.C_CHARS="(Ï*[0-9]{2}Ï*)",t.BARS=[11011001100,11001101100,11001100110,10010011e3,10010001100,10001001100,10011001e3,10011000100,10001100100,11001001e3,11001000100,11000100100,10110011100,10011011100,10011001110,10111001100,10011101100,10011100110,11001110010,11001011100,11001001110,11011100100,11001110100,11101101110,11101001100,11100101100,11100100110,11101100100,11100110100,11100110010,11011011e3,11011000110,11000110110,10100011e3,10001011e3,10001000110,10110001e3,10001101e3,10001100010,11010001e3,11000101e3,11000100010,10110111e3,10110001110,10001101110,10111011e3,10111000110,10001110110,11101110110,11010001110,11000101110,11011101e3,11011100010,11011101110,11101011e3,11101000110,11100010110,11101101e3,11101100010,11100011010,11101111010,11001000010,11110001010,1010011e4,10100001100,1001011e4,10010000110,10000101100,10000100110,1011001e4,10110000100,1001101e4,10011000010,10000110100,10000110010,11000010010,1100101e4,11110111010,11000010100,10001111010,10100111100,10010111100,10010011110,10111100100,10011110100,10011110010,11110100100,11110010100,11110010010,11011011110,11011110110,11110110110,10101111e3,10100011110,10001011110,10111101e3,10111100010,11110101e3,11110100010,10111011110,10111101110,11101011110,11110101110,11010000100,1101001e4,11010011100,1100011101011]},4935:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CODE128C=t.CODE128B=t.CODE128A=t.CODE128=void 0;var r=l(n(8845)),a=l(n(8238)),i=l(n(1180)),o=l(n(944));function l(e){return e&&e.__esModule?e:{default:e}}t.CODE128=r.default,t.CODE128A=a.default,t.CODE128B=i.default,t.CODE128C=o.default},3361:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CODE39=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=e.toUpperCase(),n.mod43&&(e+=function(e){return o[e]}(function(e){for(var t=0,n=0;n<e.length;n++)t+=u(e[n]);return t%43}(e))),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"encode",value:function(){for(var e=s("*"),t=0;t<this.data.length;t++)e+=s(this.data[t])+"0";return{data:e+=s("*"),text:this.text}}},{key:"valid",value:function(){return-1!==this.data.search(/^[0-9A-Z\-\.\ \$\/\+\%]+$/)}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","-","."," ","$","/","+","%","*"],l=[20957,29783,23639,30485,20951,29813,23669,20855,29789,23645,29975,23831,30533,22295,30149,24005,21623,29981,23837,22301,30023,23879,30545,22343,30161,24017,21959,30065,23921,22385,29015,18263,29141,17879,29045,18293,17783,29021,18269,17477,17489,17681,20753,35770];function s(e){return function(e){return l[e].toString(2)}(u(e))}function u(e){return o.indexOf(e)}t.CODE39=i},6454:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1239),i=o(n(5532));function o(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.fontSize=!n.flat&&n.fontSize>10*n.width?10*n.width:n.fontSize,r.guardHeight=n.height+r.fontSize/2+n.textMargin,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"encode",value:function(){return this.options.flat?this.encodeFlat():this.encodeGuarded()}},{key:"leftText",value:function(e,t){return this.text.substr(e,t)}},{key:"leftEncode",value:function(e,t){return(0,i.default)(e,t)}},{key:"rightText",value:function(e,t){return this.text.substr(e,t)}},{key:"rightEncode",value:function(e,t){return(0,i.default)(e,t)}},{key:"encodeGuarded",value:function(){var e={fontSize:this.fontSize},t={height:this.guardHeight};return[{data:a.SIDE_BIN,options:t},{data:this.leftEncode(),text:this.leftText(),options:e},{data:a.MIDDLE_BIN,options:t},{data:this.rightEncode(),text:this.rightText(),options:e},{data:a.SIDE_BIN,options:t}]}},{key:"encodeFlat",value:function(){return{data:[a.SIDE_BIN,this.leftEncode(),a.MIDDLE_BIN,this.rightEncode(),a.SIDE_BIN].join(""),text:this.text}}}]),t}(o(n(8012)).default);t.default=l},23:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var a=Object.getOwnPropertyDescriptor(t,n);if(void 0===a){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in a)return a.value;var o=a.get;return void 0!==o?o.call(r):void 0},o=n(1239),l=(r=n(6454))&&r.__esModule?r:{default:r},s=function(e){return(10-e.substr(0,12).split("").map((function(e){return+e})).reduce((function(e,t,n){return n%2?e+3*t:e+t}),0)%10)%10},u=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),-1!==e.search(/^[0-9]{12}$/)&&(e+=s(e));var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.lastChar=n.lastChar,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{13}$/)&&+this.data[12]===s(this.data)}},{key:"leftText",value:function(){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"leftText",this).call(this,1,6)}},{key:"leftEncode",value:function(){var e=this.data.substr(1,6),n=o.EAN13_STRUCTURE[this.data[0]];return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"leftEncode",this).call(this,e,n)}},{key:"rightText",value:function(){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"rightText",this).call(this,7,6)}},{key:"rightEncode",value:function(){var e=this.data.substr(7,6);return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"rightEncode",this).call(this,e,"RRRRRR")}},{key:"encodeGuarded",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"encodeGuarded",this).call(this);return this.options.displayValue&&(e.unshift({data:"000000000000",text:this.text.substr(0,1),options:{textAlign:"left",fontSize:this.fontSize}}),this.options.lastChar&&(e.push({data:"00"}),e.push({data:"00000",text:this.options.lastChar,options:{fontSize:this.fontSize}}))),e}}]),t}(l.default);t.default=u},6552:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1239),i=o(n(5532));function o(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{2}$/)}},{key:"encode",value:function(){var e=a.EAN2_STRUCTURE[parseInt(this.data)%4];return{data:"1011"+(0,i.default)(this.data,e,"01"),text:this.text}}}]),t}(o(n(8012)).default);t.default=l},9668:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1239),i=o(n(5532));function o(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{5}$/)}},{key:"encode",value:function(){var e,t=a.EAN5_STRUCTURE[(e=this.data,e.split("").map((function(e){return+e})).reduce((function(e,t,n){return n%2?e+9*t:e+3*t}),0)%10)];return{data:"1011"+(0,i.default)(this.data,t,"01"),text:this.text}}}]),t}(o(n(8012)).default);t.default=l},5218:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var a=Object.getOwnPropertyDescriptor(t,n);if(void 0===a){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in a)return a.value;var o=a.get;return void 0!==o?o.call(r):void 0},o=(r=n(6454))&&r.__esModule?r:{default:r},l=function(e){return(10-e.substr(0,7).split("").map((function(e){return+e})).reduce((function(e,t,n){return n%2?e+t:e+3*t}),0)%10)%10},s=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),-1!==e.search(/^[0-9]{7}$/)&&(e+=l(e)),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{8}$/)&&+this.data[7]===l(this.data)}},{key:"leftText",value:function(){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"leftText",this).call(this,0,4)}},{key:"leftEncode",value:function(){var e=this.data.substr(0,4);return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"leftEncode",this).call(this,e,"LLLL")}},{key:"rightText",value:function(){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"rightText",this).call(this,4,4)}},{key:"rightEncode",value:function(){var e=this.data.substr(4,4);return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"rightEncode",this).call(this,e,"RRRR")}}]),t}(o.default);t.default=s},5314:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.checksum=l;var a=i(n(5532));function i(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),-1!==e.search(/^[0-9]{11}$/)&&(e+=l(e));var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.displayValue=n.displayValue,n.fontSize>10*n.width?r.fontSize=10*n.width:r.fontSize=n.fontSize,r.guardHeight=n.height+r.fontSize/2+n.textMargin,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{12}$/)&&this.data[11]==l(this.data)}},{key:"encode",value:function(){return this.options.flat?this.flatEncoding():this.guardedEncoding()}},{key:"flatEncoding",value:function(){var e="";return e+="101",e+=(0,a.default)(this.data.substr(0,6),"LLLLLL"),e+="01010",e+=(0,a.default)(this.data.substr(6,6),"RRRRRR"),{data:e+="101",text:this.text}}},{key:"guardedEncoding",value:function(){var e=[];return this.displayValue&&e.push({data:"00000000",text:this.text.substr(0,1),options:{textAlign:"left",fontSize:this.fontSize}}),e.push({data:"101"+(0,a.default)(this.data[0],"L"),options:{height:this.guardHeight}}),e.push({data:(0,a.default)(this.data.substr(1,5),"LLLLL"),text:this.text.substr(1,5),options:{fontSize:this.fontSize}}),e.push({data:"01010",options:{height:this.guardHeight}}),e.push({data:(0,a.default)(this.data.substr(6,5),"RRRRR"),text:this.text.substr(6,5),options:{fontSize:this.fontSize}}),e.push({data:(0,a.default)(this.data[11],"R")+"101",options:{height:this.guardHeight}}),this.displayValue&&e.push({data:"00000000",text:this.text.substr(11,1),options:{textAlign:"right",fontSize:this.fontSize}}),e}}]),t}(i(n(8012)).default);function l(e){var t,n=0;for(t=1;t<11;t+=2)n+=parseInt(e[t]);for(t=0;t<11;t+=2)n+=3*parseInt(e[t]);return(10-n%10)%10}t.default=o},930:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(5532)),i=l(n(8012)),o=n(5314);function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=["XX00000XXX","XX10000XXX","XX20000XXX","XXX00000XX","XXXX00000X","XXXXX00005","XXXXX00006","XXXXX00007","XXXXX00008","XXXXX00009"],c=[["EEEOOO","OOOEEE"],["EEOEOO","OOEOEE"],["EEOOEO","OOEEOE"],["EEOOOE","OOEEEO"],["EOEEOO","OEOOEE"],["EOOEEO","OEEOOE"],["EOOOEE","OEEEOO"],["EOEOEO","OEOEOE"],["EOEOOE","OEOEEO"],["EOOEOE","OEEOEO"]],d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));if(r.isValid=!1,-1!==e.search(/^[0-9]{6}$/))r.middleDigits=e,r.upcA=f(e,"0"),r.text=n.text||""+r.upcA[0]+e+r.upcA[r.upcA.length-1],r.isValid=!0;else{if(-1===e.search(/^[01][0-9]{7}$/))return s(r);if(r.middleDigits=e.substring(1,e.length-1),r.upcA=f(r.middleDigits,e[0]),r.upcA[r.upcA.length-1]!==e[e.length-1])return s(r);r.isValid=!0}return r.displayValue=n.displayValue,n.fontSize>10*n.width?r.fontSize=10*n.width:r.fontSize=n.fontSize,r.guardHeight=n.height+r.fontSize/2+n.textMargin,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"valid",value:function(){return this.isValid}},{key:"encode",value:function(){return this.options.flat?this.flatEncoding():this.guardedEncoding()}},{key:"flatEncoding",value:function(){var e="";return e+="101",e+=this.encodeMiddleDigits(),{data:e+="010101",text:this.text}}},{key:"guardedEncoding",value:function(){var e=[];return this.displayValue&&e.push({data:"00000000",text:this.text[0],options:{textAlign:"left",fontSize:this.fontSize}}),e.push({data:"101",options:{height:this.guardHeight}}),e.push({data:this.encodeMiddleDigits(),text:this.text.substring(1,7),options:{fontSize:this.fontSize}}),e.push({data:"010101",options:{height:this.guardHeight}}),this.displayValue&&e.push({data:"00000000",text:this.text[7],options:{textAlign:"right",fontSize:this.fontSize}}),e}},{key:"encodeMiddleDigits",value:function(){var e=this.upcA[0],t=this.upcA[this.upcA.length-1],n=c[parseInt(t)][parseInt(e)];return(0,a.default)(this.middleDigits,n)}}]),t}(i.default);function f(e,t){for(var n=parseInt(e[e.length-1]),r=u[n],a="",i=0,l=0;l<r.length;l++){var s=r[l];a+="X"===s?e[i++]:s}return(a=""+t+a)+(0,o.checksum)(a)}t.default=d},1239:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SIDE_BIN="101",t.MIDDLE_BIN="01010",t.BINARIES={L:["0001101","0011001","0010011","0111101","0100011","0110001","0101111","0111011","0110111","0001011"],G:["0100111","0110011","0011011","0100001","0011101","0111001","0000101","0010001","0001001","0010111"],R:["1110010","1100110","1101100","1000010","1011100","1001110","1010000","1000100","1001000","1110100"],O:["0001101","0011001","0010011","0111101","0100011","0110001","0101111","0111011","0110111","0001011"],E:["0100111","0110011","0011011","0100001","0011101","0111001","0000101","0010001","0001001","0010111"]},t.EAN2_STRUCTURE=["LL","LG","GL","GG"],t.EAN5_STRUCTURE=["GGLLL","GLGLL","GLLGL","GLLLG","LGGLL","LLGGL","LLLGG","LGLGL","LGLLG","LLGLG"],t.EAN13_STRUCTURE=["LLLLLL","LLGLGG","LLGGLG","LLGGGL","LGLLGG","LGGLLG","LGGGLL","LGLGLG","LGLGGL","LGGLGL"]},5532:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1239);t.default=function(e,t,n){var a=e.split("").map((function(e,n){return r.BINARIES[t[n]]})).map((function(t,n){return t?t[e[n]]:""}));if(n){var i=e.length-1;a=a.map((function(e,t){return t<i?e+n:e}))}return a.join("")}},5321:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UPCE=t.UPC=t.EAN2=t.EAN5=t.EAN8=t.EAN13=void 0;var r=u(n(23)),a=u(n(5218)),i=u(n(9668)),o=u(n(6552)),l=u(n(5314)),s=u(n(930));function u(e){return e&&e.__esModule?e:{default:e}}t.EAN13=r.default,t.EAN8=a.default,t.EAN5=i.default,t.EAN2=o.default,t.UPC=l.default,t.UPCE=s.default},6447:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GenericBarcode=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"encode",value:function(){return{data:"10101010101010101010101010101010101010101",text:this.text}}},{key:"valid",value:function(){return!0}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default);t.GenericBarcode=i},3074:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(4477);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=function(e){function t(){return o(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return-1!==this.data.search(/^([0-9]{2})+$/)}},{key:"encode",value:function(){var e=this,t=this.data.match(/.{2}/g).map((function(t){return e.encodePair(t)})).join("");return{data:i.START_BIN+t+i.END_BIN,text:this.text}}},{key:"encodePair",value:function(e){var t=i.BINARIES[e[1]];return i.BINARIES[e[0]].split("").map((function(e,n){return("1"===e?"111":"1")+("1"===t[n]?"000":"0")})).join("")}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default);t.default=s},6972:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(3074))&&r.__esModule?r:{default:r},o=function(e){var t=e.substr(0,13).split("").map((function(e){return parseInt(e,10)})).reduce((function(e,t,n){return e+t*(3-n%2*2)}),0);return 10*Math.ceil(t/10)-t},l=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),-1!==e.search(/^[0-9]{13}$/)&&(e+=o(e)),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]{14}$/)&&+this.data[13]===o(this.data)}}]),t}(i.default);t.default=l},4477:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.START_BIN="1010",t.END_BIN="11101",t.BINARIES=["00110","10001","01001","11000","00101","10100","01100","00011","10010","01010"]},5984:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ITF14=t.ITF=void 0;var r=i(n(3074)),a=i(n(6972));function i(e){return e&&e.__esModule?e:{default:e}}t.ITF=r.default,t.ITF14=a.default},2582:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"encode",value:function(){for(var e="110",t=0;t<this.data.length;t++){var n=parseInt(this.data[t]).toString(2);n=o(n,4-n.length);for(var r=0;r<n.length;r++)e+="0"==n[r]?"100":"110"}return{data:e+="1001",text:this.text}}},{key:"valid",value:function(){return-1!==this.data.search(/^[0-9]+$/)}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default);function o(e,t){for(var n=0;n<t;n++)e="0"+e;return e}t.default=i},7839:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(2582))&&r.__esModule?r:{default:r},i=n(4348),o=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e+(0,i.mod10)(e),n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a.default);t.default=o},8035:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(2582))&&r.__esModule?r:{default:r},i=n(4348),o=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e+=(0,i.mod10)(e),e+=(0,i.mod10)(e),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a.default);t.default=o},5883:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(2582))&&r.__esModule?r:{default:r},i=n(4348),o=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e+(0,i.mod11)(e),n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a.default);t.default=o},6287:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(2582))&&r.__esModule?r:{default:r},i=n(4348),o=function(e){function t(e,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e+=(0,i.mod11)(e),e+=(0,i.mod10)(e),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a.default);t.default=o},4348:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mod10=function(e){for(var t=0,n=0;n<e.length;n++){var r=parseInt(e[n]);(n+e.length)%2==0?t+=r:t+=2*r%10+Math.floor(2*r/10)}return(10-t%10)%10},t.mod11=function(e){for(var t=0,n=[2,3,4,5,6,7],r=0;r<e.length;r++){var a=parseInt(e[e.length-1-r]);t+=n[r%n.length]*a}return(11-t%11)%11}},8458:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MSI1110=t.MSI1010=t.MSI11=t.MSI10=t.MSI=void 0;var r=s(n(2582)),a=s(n(7839)),i=s(n(5883)),o=s(n(8035)),l=s(n(6287));function s(e){return e&&e.__esModule?e:{default:e}}t.MSI=r.default,t.MSI10=a.default,t.MSI11=i.default,t.MSI1010=o.default,t.MSI1110=l.default},123:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.codabar=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),0===e.search(/^[0-9\-\$\:\.\+\/]+$/)&&(e="A"+e+"A");var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e.toUpperCase(),n));return r.text=r.options.text||r.text.replace(/[A-D]/g,""),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"valid",value:function(){return-1!==this.data.search(/^[A-D][0-9\-\$\:\.\+\/]+[A-D]$/)}},{key:"encode",value:function(){for(var e=[],t=this.getEncodings(),n=0;n<this.data.length;n++)e.push(t[this.data.charAt(n)]),n!==this.data.length-1&&e.push("0");return{text:this.text,data:e.join("")}}},{key:"getEncodings",value:function(){return{0:"101010011",1:"101011001",2:"101001011",3:"110010101",4:"101101001",5:"110101001",6:"100101011",7:"100101101",8:"100110101",9:"110100101","-":"101001101",$:"101100101",":":"1101011011","/":"1101101011",".":"1101101101","+":"101100110011",A:"1011001001",B:"1001001011",C:"1010010011",D:"1010011001"}}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default);t.codabar=i},2289:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3361),a=n(4935),i=n(5321),o=n(5984),l=n(8458),s=n(6562),u=n(123),c=n(6447);t.default={CODE39:r.CODE39,CODE128:a.CODE128,CODE128A:a.CODE128A,CODE128B:a.CODE128B,CODE128C:a.CODE128C,EAN13:i.EAN13,EAN8:i.EAN8,EAN5:i.EAN5,EAN2:i.EAN2,UPC:i.UPC,UPCE:i.UPCE,ITF14:o.ITF14,ITF:o.ITF,MSI:l.MSI,MSI10:l.MSI10,MSI11:l.MSI11,MSI1010:l.MSI1010,MSI1110:l.MSI1110,pharmacode:s.pharmacode,codabar:u.codabar,GenericBarcode:c.GenericBarcode}},6562:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pharmacode=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.number=parseInt(e,10),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"encode",value:function(){for(var e=this.number,t="";!isNaN(e)&&0!=e;)e%2==0?(t="11100"+t,e=(e-2)/2):(t="100"+t,e=(e-1)/2);return{data:t=t.slice(0,-2),text:this.text}}},{key:"valid",value:function(){return this.number>=3&&this.number<=131070}}]),t}(((r=n(8012))&&r.__esModule?r:{default:r}).default);t.pharmacode=i},8532:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.api=t}return n(e,[{key:"handleCatch",value:function(e){if("InvalidInputException"!==e.name)throw e;if(this.api._options.valid===this.api._defaults.valid)throw e.message;this.api._options.valid(!1),this.api.render=function(){}}},{key:"wrapBarcodeCall",value:function(e){try{var t=e.apply(void 0,arguments);return this.api._options.valid(!0),t}catch(e){return this.handleCatch(e),this.api}}}]),e}();t.default=r},2362:(e,t)=>{"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(e,a){n(this,t);var i=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i.name="InvalidInputException",i.symbology=e,i.input=a,i.message='"'+i.input+'" is not a valid input for '+i.symbology,i}return a(t,Error),t}(),o=function(e){function t(){n(this,t);var e=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.name="InvalidElementException",e.message="Not supported type to render on",e}return a(t,Error),t}(),l=function(e){function t(){n(this,t);var e=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.name="NoElementException",e.message="No element to render on.",e}return a(t,Error),t}();t.InvalidInputException=i,t.InvalidElementException=o,t.NoElementException=l},7044:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.marginTop=e.marginTop||e.margin,e.marginBottom=e.marginBottom||e.margin,e.marginRight=e.marginRight||e.margin,e.marginLeft=e.marginLeft||e.margin,e}},3898:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(5065)),a=i(n(6025));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t={};for(var n in a.default)a.default.hasOwnProperty(n)&&(e.hasAttribute("jsbarcode-"+n.toLowerCase())&&(t[n]=e.getAttribute("jsbarcode-"+n.toLowerCase())),e.hasAttribute("data-"+n.toLowerCase())&&(t[n]=e.getAttribute("data-"+n.toLowerCase())));return t.value=e.getAttribute("jsbarcode-value")||e.getAttribute("data-value"),(0,r.default)(t)}},9972:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=l(n(3898)),i=l(n(2804)),o=n(2362);function l(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t){if("string"==typeof t)return function(t){var n=document.querySelectorAll(t);if(0!==n.length){for(var r=[],a=0;a<n.length;a++)r.push(e(n[a]));return r}}(t);if(Array.isArray(t)){for(var n=[],l=0;l<t.length;l++)n.push(e(t[l]));return n}if("undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLImageElement)return s=t,{element:u=document.createElement("canvas"),options:(0,a.default)(s),renderer:i.default.CanvasRenderer,afterRender:function(){s.setAttribute("src",u.toDataURL())}};if(t&&t.nodeName&&"svg"===t.nodeName.toLowerCase()||"undefined"!=typeof SVGElement&&t instanceof SVGElement)return{element:t,options:(0,a.default)(t),renderer:i.default.SVGRenderer};if("undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement)return{element:t,options:(0,a.default)(t),renderer:i.default.CanvasRenderer};if(t&&t.getContext)return{element:t,renderer:i.default.CanvasRenderer};if(t&&"object"===(void 0===t?"undefined":r(t))&&!t.nodeName)return{element:t,renderer:i.default.ObjectRenderer};throw new o.InvalidElementException;var s,u}},5443:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=[];return function e(n){if(Array.isArray(n))for(var r=0;r<n.length;r++)e(n[r]);else n.text=n.text||"",n.data=n.data||"",t.push(n)}(e),t}},2276:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t){return n({},e,t)}},5065:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=["width","height","textMargin","fontSize","margin","marginTop","marginBottom","marginLeft","marginRight"];for(var n in t)t.hasOwnProperty(n)&&("string"==typeof e[n=t[n]]&&(e[n]=parseInt(e[n],10)));return"string"==typeof e.displayValue&&(e.displayValue="false"!=e.displayValue),e}},6025:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={width:2,height:100,format:"auto",displayValue:!0,fontOptions:"",font:"monospace",text:void 0,textAlign:"center",textPosition:"bottom",textMargin:2,fontSize:20,background:"#ffffff",lineColor:"#000000",margin:10,marginTop:void 0,marginBottom:void 0,marginLeft:void 0,marginRight:void 0,valid:function(){}}},8204:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(2276))&&r.__esModule?r:{default:r},o=n(7899),l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.canvas=t,this.encodings=n,this.options=r}return a(e,[{key:"render",value:function(){if(!this.canvas.getContext)throw new Error("The browser does not support canvas.");this.prepareCanvas();for(var e=0;e<this.encodings.length;e++){var t=(0,i.default)(this.options,this.encodings[e].options);this.drawCanvasBarcode(t,this.encodings[e]),this.drawCanvasText(t,this.encodings[e]),this.moveCanvasDrawing(this.encodings[e])}this.restoreCanvas()}},{key:"prepareCanvas",value:function(){var e=this.canvas.getContext("2d");e.save(),(0,o.calculateEncodingAttributes)(this.encodings,this.options,e);var t=(0,o.getTotalWidthOfEncodings)(this.encodings),n=(0,o.getMaximumHeightOfEncodings)(this.encodings);this.canvas.width=t+this.options.marginLeft+this.options.marginRight,this.canvas.height=n,e.clearRect(0,0,this.canvas.width,this.canvas.height),this.options.background&&(e.fillStyle=this.options.background,e.fillRect(0,0,this.canvas.width,this.canvas.height)),e.translate(this.options.marginLeft,0)}},{key:"drawCanvasBarcode",value:function(e,t){var n,r=this.canvas.getContext("2d"),a=t.data;n="top"==e.textPosition?e.marginTop+e.fontSize+e.textMargin:e.marginTop,r.fillStyle=e.lineColor;for(var i=0;i<a.length;i++){var o=i*e.width+t.barcodePadding;"1"===a[i]?r.fillRect(o,n,e.width,e.height):a[i]&&r.fillRect(o,n,e.width,e.height*a[i])}}},{key:"drawCanvasText",value:function(e,t){var n,r,a=this.canvas.getContext("2d"),i=e.fontOptions+" "+e.fontSize+"px "+e.font;e.displayValue&&(r="top"==e.textPosition?e.marginTop+e.fontSize-e.textMargin:e.height+e.textMargin+e.marginTop+e.fontSize,a.font=i,"left"==e.textAlign||t.barcodePadding>0?(n=0,a.textAlign="left"):"right"==e.textAlign?(n=t.width-1,a.textAlign="right"):(n=t.width/2,a.textAlign="center"),a.fillText(t.text,n,r))}},{key:"moveCanvasDrawing",value:function(e){this.canvas.getContext("2d").translate(e.width,0)}},{key:"restoreCanvas",value:function(){this.canvas.getContext("2d").restore()}}]),e}();t.default=l},2804:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8204)),a=o(n(6917)),i=o(n(8652));function o(e){return e&&e.__esModule?e:{default:e}}t.default={CanvasRenderer:r.default,SVGRenderer:a.default,ObjectRenderer:i.default}},8652:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),r=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.object=t,this.encodings=n,this.options=r}return n(e,[{key:"render",value:function(){this.object.encodings=this.encodings}}]),e}();t.default=r},7899:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTotalWidthOfEncodings=t.calculateEncodingAttributes=t.getBarcodePadding=t.getEncodingHeight=t.getMaximumHeightOfEncodings=void 0;var r,a=(r=n(2276))&&r.__esModule?r:{default:r};function i(e,t){return t.height+(t.displayValue&&e.text.length>0?t.fontSize+t.textMargin:0)+t.marginTop+t.marginBottom}function o(e,t,n){if(n.displayValue&&t<e){if("center"==n.textAlign)return Math.floor((e-t)/2);if("left"==n.textAlign)return 0;if("right"==n.textAlign)return Math.floor(e-t)}return 0}function l(e,t,n){var r;if(n)r=n;else{if("undefined"==typeof document)return 0;r=document.createElement("canvas").getContext("2d")}r.font=t.fontOptions+" "+t.fontSize+"px "+t.font;var a=r.measureText(e);return a?a.width:0}t.getMaximumHeightOfEncodings=function(e){for(var t=0,n=0;n<e.length;n++)e[n].height>t&&(t=e[n].height);return t},t.getEncodingHeight=i,t.getBarcodePadding=o,t.calculateEncodingAttributes=function(e,t,n){for(var r=0;r<e.length;r++){var s,u=e[r],c=(0,a.default)(t,u.options);s=c.displayValue?l(u.text,c,n):0;var d=u.data.length*c.width;u.width=Math.ceil(Math.max(s,d)),u.height=i(u,c),u.barcodePadding=o(s,d,c)}},t.getTotalWidthOfEncodings=function(e){for(var t=0,n=0;n<e.length;n++)t+=e[n].width;return t}},6917:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(2276))&&r.__esModule?r:{default:r},o=n(7899),l="http://www.w3.org/2000/svg",s=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.svg=t,this.encodings=n,this.options=r,this.document=r.xmlDocument||document}return a(e,[{key:"render",value:function(){var e=this.options.marginLeft;this.prepareSVG();for(var t=0;t<this.encodings.length;t++){var n=this.encodings[t],r=(0,i.default)(this.options,n.options),a=this.createGroup(e,r.marginTop,this.svg);this.setGroupOptions(a,r),this.drawSvgBarcode(a,r,n),this.drawSVGText(a,r,n),e+=n.width}}},{key:"prepareSVG",value:function(){for(;this.svg.firstChild;)this.svg.removeChild(this.svg.firstChild);(0,o.calculateEncodingAttributes)(this.encodings,this.options);var e=(0,o.getTotalWidthOfEncodings)(this.encodings),t=(0,o.getMaximumHeightOfEncodings)(this.encodings),n=e+this.options.marginLeft+this.options.marginRight;this.setSvgAttributes(n,t),this.options.background&&this.drawRect(0,0,n,t,this.svg).setAttribute("style","fill:"+this.options.background+";")}},{key:"drawSvgBarcode",value:function(e,t,n){var r,a=n.data;r="top"==t.textPosition?t.fontSize+t.textMargin:0;for(var i=0,o=0,l=0;l<a.length;l++)o=l*t.width+n.barcodePadding,"1"===a[l]?i++:i>0&&(this.drawRect(o-t.width*i,r,t.width*i,t.height,e),i=0);i>0&&this.drawRect(o-t.width*(i-1),r,t.width*i,t.height,e)}},{key:"drawSVGText",value:function(e,t,n){var r,a,i=this.document.createElementNS(l,"text");t.displayValue&&(i.setAttribute("style","font:"+t.fontOptions+" "+t.fontSize+"px "+t.font),a="top"==t.textPosition?t.fontSize-t.textMargin:t.height+t.textMargin+t.fontSize,"left"==t.textAlign||n.barcodePadding>0?(r=0,i.setAttribute("text-anchor","start")):"right"==t.textAlign?(r=n.width-1,i.setAttribute("text-anchor","end")):(r=n.width/2,i.setAttribute("text-anchor","middle")),i.setAttribute("x",r),i.setAttribute("y",a),i.appendChild(this.document.createTextNode(n.text)),e.appendChild(i))}},{key:"setSvgAttributes",value:function(e,t){var n=this.svg;n.setAttribute("width",e+"px"),n.setAttribute("height",t+"px"),n.setAttribute("x","0px"),n.setAttribute("y","0px"),n.setAttribute("viewBox","0 0 "+e+" "+t),n.setAttribute("xmlns",l),n.setAttribute("version","1.1"),n.setAttribute("style","transform: translate(0,0)")}},{key:"createGroup",value:function(e,t,n){var r=this.document.createElementNS(l,"g");return r.setAttribute("transform","translate("+e+", "+t+")"),n.appendChild(r),r}},{key:"setGroupOptions",value:function(e,t){e.setAttribute("style","fill:"+t.lineColor+";")}},{key:"drawRect",value:function(e,t,n,r,a){var i=this.document.createElementNS(l,"rect");return i.setAttribute("x",e),i.setAttribute("y",t),i.setAttribute("width",n),i.setAttribute("height",r),a.appendChild(i),i}}]),e}();t.default=s},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var o,l,s=a(e),u=1;u<arguments.length;u++){for(var c in o=Object(arguments[u]))n.call(o,c)&&(s[c]=o[c]);if(t){l=t(o);for(var d=0;d<l.length;d++)r.call(o,l[d])&&(s[l[d]]=o[l[d]])}}return s}},2703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(7418),i=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,r,a,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!h.call(g,e)||!h.call(p,e)&&(f.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,S=60106,E=60107,k=60108,C=60114,P=60109,O=60110,T=60112,M=60113,N=60120,R=60115,L=60116,A=60121,D=60128,I=60129,z=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;x=F("react.element"),S=F("react.portal"),E=F("react.fragment"),k=F("react.strict_mode"),C=F("react.profiler"),P=F("react.provider"),O=F("react.context"),T=F("react.forward_ref"),M=F("react.suspense"),N=F("react.suspense_list"),R=F("react.memo"),L=F("react.lazy"),A=F("react.block"),F("react.scope"),D=F("react.opaque.id"),I=F("react.debug_trace_mode"),z=F("react.offscreen"),j=F("react.legacy_hidden")}var G,B="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function H(e){if(void 0===G)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);G=t&&t[1]||""}return"\n"+G+e}var W=!1;function X(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=r.stack.split("\n"),o=a.length-1,l=i.length-1;1<=o&&0<=l&&a[o]!==i[l];)l--;for(;1<=o&&0<=l;o--,l--)if(a[o]!==i[l]){if(1!==o||1!==l)do{if(o--,0>--l||a[o]!==i[l])return"\n"+a[o].replace(" at new "," at ")}while(1<=o&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function V(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return X(e.type,!1);case 11:return X(e.type.render,!1);case 22:return X(e.type._render,!1);case 1:return X(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case C:return"Profiler";case k:return"StrictMode";case M:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Y(e.type);case A:return Y(e._render);case L:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function oe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function ue(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var xe=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Pe=null,Oe=null;function Te(e){if(e=Zr(e)){if("function"!=typeof Ce)throw Error(o(280));var t=e.stateNode;t&&(t=ta(t),Ce(e.stateNode,e.type,t))}}function Me(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ne(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Re(e,t){return e(t)}function Le(e,t,n,r,a){return e(t,n,r,a)}function Ae(){}var De=Re,Ie=!1,ze=!1;function je(){null===Pe&&null===Oe||(Ae(),Ne())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ta(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ge=!1;if(d)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ge=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ge){Ge=!1}function Ue(e,t,n,r,a,i,o,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var He=!1,We=null,Xe=!1,Ve=null,Ye={onError:function(e){He=!0,We=e}};function Qe(e,t,n,r,a,i,o,l,s){He=!1,We=null,Ue.apply(Ye,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(qe(e)!==e)throw Error(o(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ke(a),e;if(i===r)return Ke(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,it=[],ot=null,lt=null,st=null,ut=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function gt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=ht(t,n,r,a,i),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function mt(e){var t=Jr(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==ot&&vt(ot)&&(ot=null),null!==lt&&vt(lt)&&(lt=null),null!==st&&vt(st)&&(st=null),ut.forEach(yt),ct.forEach(yt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function wt(e){function t(t){return _t(t,e)}if(0<it.length){_t(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&_t(ot,e),null!==lt&&_t(lt,e),null!==st&&_t(st,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},Et={},kt={};function Ct(e){if(Et[e])return Et[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}d&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Pt=Ct("animationend"),Ot=Ct("animationiteration"),Tt=Ct("animationstart"),Mt=Ct("transitionend"),Nt=new Map,Rt=new Map,Lt=["abort","abort",Pt,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Rt.set(r,t),Nt.set(r,a),u(a,[r])}}(0,i.unstable_now)();var Dt=8;function It(e){if(0!=(1&e))return Dt=15,1;if(0!=(2&e))return Dt=14,2;if(0!=(4&e))return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):0!=(32&e)?(Dt=11,32):0!=(t=192&e)?(Dt=10,t):0!=(256&e)?(Dt=9,256):0!=(t=3584&e)?(Dt=8,t):0!=(4096&e)?(Dt=7,4096):0!=(t=4186112&e)?(Dt=6,t):0!=(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):0!=(134217728&e)?(Dt=3,134217728):0!=(t=805306368&e)?(Dt=2,t):0!=(1073741824&e)?(Dt=1,1073741824):(Dt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var r=0,a=0,i=e.expiredLanes,o=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,a=Dt=15;else if(0!=(i=134217727&n)){var s=i&~o;0!==s?(r=It(s),a=Dt):0!=(l&=i)&&(r=It(l),a=Dt)}else 0!=(i=n&~o)?(r=It(i),a=Dt):0!==l&&(r=It(l),a=Dt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(It(t),a<=Dt)return t;Dt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Ht(t)),r|=e[n],t&=~a;return r}function jt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Gt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Gt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Gt(3584&~t))&&0===(e=Gt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Gt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function Gt(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Xt|0)|0},Wt=Math.log,Xt=Math.LN2,Vt=i.unstable_UserBlockingPriority,Yt=i.unstable_runWithPriority,Qt=!0;function qt(e,t,n,r){Ie||Ae();var a=Kt,i=Ie;Ie=!0;try{Le(a,e,t,n,r)}finally{(Ie=i)||je()}}function $t(e,t,n,r){Yt(Vt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var a;if(Qt)if((a=0==(4&t))&&0<it.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)a&&pt(e,r);else{if(a){if(-1<ft.indexOf(e))return e=ht(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return ot=gt(ot,e,t,n,r,a),!0;case"dragenter":return lt=gt(lt,e,t,n,r,a),!0;case"mouseover":return st=gt(st,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return ut.set(i,gt(ut.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,ct.set(i,gt(ct.get(i)||null,e,t,n,r,a)),!0}return!1}(i,e,t,n,r))return;pt(e,r)}Nr(e,t,r,null,n)}}}function Jt(e,t,n,r){var a=ke(r);if(null!==(a=Jr(a))){var i=qe(a);if(null===i)a=null;else{var o=i.tag;if(13===o){if(null!==(a=$e(i)))return a;a=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;a=null}else i!==a&&(a=null)}}return Nr(e,t,r,a,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,i){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var sn,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=ln(dn),hn=a({},dn,{view:0,detail:0}),pn=ln(hn),gn=a({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=ln(gn),vn=ln(a({},gn,{dataTransfer:0})),yn=ln(a({},hn,{relatedTarget:0})),bn=ln(a({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=ln(a({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=ln(a({},dn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Cn(){return kn}var Pn=ln(a({},hn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),On=ln(a({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=ln(a({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Mn=ln(a({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=ln(a({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Ln=d&&"CompositionEvent"in window,An=null;d&&"documentMode"in document&&(An=document.documentMode);var Dn=d&&"TextEvent"in window&&!An,In=d&&(!Ln||An&&8<An&&11>=An),zn=String.fromCharCode(32),jn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Wn(e,t,n,r){Me(r),0<(t=Lr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Xn=null,Vn=null;function Yn(e){kr(e,0)}function Qn(e){if(K(ea(e)))return e}function qn(e,t){if("change"===e)return t}var $n=!1;if(d){var Kn;if(d){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Kn=Jn}else Kn=!1;$n=Kn&&(!document.documentMode||9<document.documentMode)}function er(){Xn&&(Xn.detachEvent("onpropertychange",tr),Vn=Xn=null)}function tr(e){if("value"===e.propertyName&&Qn(Vn)){var t=[];if(Wn(t,Vn,e,ke(e)),e=Yn,Ie)e(t);else{Ie=!0;try{Re(e,t)}finally{Ie=!1,je()}}}}function nr(e,t,n){"focusin"===e?(er(),Vn=n,(Xn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Vn)}function ar(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function sr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!or(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,mr=null,vr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==gr||gr!==J(r)||(r="selectionStart"in(r=gr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&sr(vr,r)||(vr=r,0<(r=Lr(mr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(Lt,2);for(var _r="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<_r.length;wr++)Rt.set(_r[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Qe.apply(this,arguments),He){if(!He)throw Error(o(198));var c=We;He=!1,We=null,Xe||(Xe=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function kr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&a.isPropagationStopped())break e;Er(a,l,u),i=s}else for(o=0;o<r.length;o++){if(s=(l=r[o]).instance,u=l.currentTarget,l=l.listener,s!==i&&a.isPropagationStopped())break e;Er(a,l,u),i=s}}}if(Xe)throw e=Ve,Xe=!1,Ve=null,e}function Cr(e,t){var n=na(t),r=e+"__bubble";n.has(r)||(Mr(t,e,2,!1),n.add(r))}var Pr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Pr]||(e[Pr]=!0,l.forEach((function(t){Sr.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;a|=2,i=r}var o=na(i),l=e+"__"+(t?"capture":"bubble");o.has(l)||(t&&(a|=4),Mr(i,e,a,t),o.add(l))}function Mr(e,t,n,r){var a=Rt.get(t);switch(void 0===a?2:a){case 0:a=qt;break;case 1:a=$t;break;default:a=Kt}n=a.bind(null,t,n,e),a=void 0,!Ge||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,a){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var s=o.tag;if((3===s||4===s)&&((s=o.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;o=o.return}for(;null!==l;){if(null===(o=Jr(l)))return;if(5===(s=o.tag)||6===s){r=i=o;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{De(e,t,n)}finally{ze=!1,je()}}((function(){var r=i,a=ke(n),o=[];e:{var l=Nt.get(e);if(void 0!==l){var s=fn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Pn;break;case"focusin":u="focus",s=yn;break;case"focusout":u="blur",s=yn;break;case"beforeblur":case"afterblur":s=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Pt:case Ot:case Tt:s=bn;break;case Mt:s=Mn;break;case"scroll":s=pn;break;case"wheel":s=Nn;break;case"copy":case"cut":case"paste":s=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=On}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Fe(p,f))&&c.push(Rr(p,g,h))),d)break;p=p.return}0<c.length&&(l=new s(l,u,null,n,a),o.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Jr(u)&&!u[$r])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Jr(u):null)&&(u!==(d=qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==s?l:ea(s),h=null==u?l:ea(u),(l=new c(g,p+"leave",s,n,a)).target=d,l.relatedTarget=h,g=null,Jr(a)===r&&((c=new c(f,p+"enter",u,n,a)).target=h,c.relatedTarget=d,g=c),d=g,s&&u)e:{for(f=u,p=0,h=c=s;h;h=Ar(h))p++;for(h=0,g=f;g;g=Ar(g))h++;for(;0<p-h;)c=Ar(c),p--;for(;0<h-p;)f=Ar(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=Ar(c),f=Ar(f)}c=null}else c=null;null!==s&&Dr(o,l,s,c,!1),null!==u&&null!==d&&Dr(o,d,u,c,!0)}if("select"===(s=(l=r?ea(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var m=qn;else if(Hn(l))if($n)m=ir;else{m=rr;var v=nr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=ar);switch(m&&(m=m(e,r))?Wn(o,m,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ae(l,"number",l.value)),v=r?ea(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(gr=v,mr=r,vr=null);break;case"focusout":vr=mr=gr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(o,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":br(o,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=nn()):(en="value"in(Zt=a)?Zt.value:Zt.textContent,Bn=!0)),0<(v=Lr(r,b)).length&&(b=new wn(b,e,null,n,a),o.push({event:b,listeners:v}),(y||null!==(y=Gn(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:(jn=!0,zn);case"textInput":return(e=t.data)===zn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Ln&&Fn(e,t)?(e=nn(),tn=en=Zt=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Lr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=y)}kr(o,t)}))}function Rr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Fe(e,n))&&r.unshift(Rr(e,i,a)),null!=(i=Fe(e,t))&&r.push(Rr(e,i,a))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,a){for(var i=t._reactName,o=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Fe(n,i))&&o.unshift(Rr(n,s,l)):a||null!=(s=Fe(n,i))&&o.push(Rr(n,s,l))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}function Ir(){}var zr=null,jr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Xr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Vr=0,Yr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Yr,qr="__reactProps$"+Yr,$r="__reactContainer$"+Yr,Kr="__reactEvents$"+Yr;function Jr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$r]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Xr(e);null!==e;){if(n=e[Qr])return n;e=Xr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Qr]||e[$r])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ta(e){return e[qr]||null}function na(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var ra=[],aa=-1;function ia(e){return{current:e}}function oa(e){0>aa||(e.current=ra[aa],ra[aa]=null,aa--)}function la(e,t){aa++,ra[aa]=e.current,e.current=t}var sa={},ua=ia(sa),ca=ia(!1),da=sa;function fa(e,t){var n=e.type.contextTypes;if(!n)return sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ha(e){return null!=e.childContextTypes}function pa(){oa(ca),oa(ua)}function ga(e,t,n){if(ua.current!==sa)throw Error(o(168));la(ua,t),la(ca,n)}function ma(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,Y(t)||"Unknown",i));return a({},n,r)}function va(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||sa,da=ua.current,la(ua,e),la(ca,ca.current),!0}function ya(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ma(e,t,da),r.__reactInternalMemoizedMergedChildContext=e,oa(ca),oa(ua),la(ua,e)):oa(ca),la(ca,n)}var ba=null,_a=null,wa=i.unstable_runWithPriority,xa=i.unstable_scheduleCallback,Sa=i.unstable_cancelCallback,Ea=i.unstable_shouldYield,ka=i.unstable_requestPaint,Ca=i.unstable_now,Pa=i.unstable_getCurrentPriorityLevel,Oa=i.unstable_ImmediatePriority,Ta=i.unstable_UserBlockingPriority,Ma=i.unstable_NormalPriority,Na=i.unstable_LowPriority,Ra=i.unstable_IdlePriority,La={},Aa=void 0!==ka?ka:function(){},Da=null,Ia=null,za=!1,ja=Ca(),Fa=1e4>ja?Ca:function(){return Ca()-ja};function Ga(){switch(Pa()){case Oa:return 99;case Ta:return 98;case Ma:return 97;case Na:return 96;case Ra:return 95;default:throw Error(o(332))}}function Ba(e){switch(e){case 99:return Oa;case 98:return Ta;case 97:return Ma;case 96:return Na;case 95:return Ra;default:throw Error(o(332))}}function Ua(e,t){return e=Ba(e),wa(e,t)}function Ha(e,t,n){return e=Ba(e),xa(e,t,n)}function Wa(){if(null!==Ia){var e=Ia;Ia=null,Sa(e)}Xa()}function Xa(){if(!za&&null!==Da){za=!0;var e=0;try{var t=Da;Ua(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Da=null}catch(t){throw null!==Da&&(Da=Da.slice(e+1)),xa(Oa,Wa),t}finally{za=!1}}}var Va=w.ReactCurrentBatchConfig;function Ya(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qa=ia(null),qa=null,$a=null,Ka=null;function Ja(){Ka=$a=qa=null}function Za(e){var t=Qa.current;oa(Qa),e.type._context._currentValue=t}function ei(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ti(e,t){qa=e,Ka=$a=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Lo=!0),e.firstContext=null)}function ni(e,t){if(Ka!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ka=e,t=1073741823),t={context:e,observedBits:t,next:null},null===$a){if(null===qa)throw Error(o(308));$a=t,qa.dependencies={lanes:0,firstContext:t,responders:null}}else $a=$a.next=t;return e._currentValue}var ri=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function oi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ui(e,t,n,r){var i=e.updateQueue;ri=!1;var o=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?o=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==o){for(f=i.baseState,l=0,d=c=u=null;;){s=o.lane;var h=o.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:h,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,g=o;switch(s=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,s);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(s="function"==typeof(p=g.payload)?p.call(h,f,s):p))break e;f=a({},f,s);break e;case 2:ri=!0}}null!==o.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[o]:s.push(o))}else h={eventTime:h,lane:s,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===d?(c=d=h,u=f):d=d.next=h,l|=s;if(null===(o=o.next)){if(null===(s=i.shared.pending))break;o=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===d&&(u=f),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,Dl|=l,e.lanes=l,e.memoizedState=f}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var di=(new r.Component).refs;function fi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=os(),a=ls(e),i=oi(r,a);i.payload=t,null!=n&&(i.callback=n),li(e,i),ss(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=os(),a=ls(e),i=oi(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),li(e,i),ss(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=os(),r=ls(e),a=oi(n,r);a.tag=2,null!=t&&(a.callback=t),li(e,a),ss(e,r,n)}};function pi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,i))}function gi(e,t,n){var r=!1,a=sa,i=t.contextType;return"object"==typeof i&&null!==i?i=ni(i):(a=ha(t)?da:ua.current,i=(r=null!=(r=t.contextTypes))?fa(e,a):sa),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function vi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=di,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ni(i):(i=ha(t)?da:ua.current,a.context=fa(e,i)),ui(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(fi(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&hi.enqueueReplaceState(a,a.state,null),ui(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var yi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function _i(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Gs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ws(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Bs(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Us(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Bs(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case S:return(t=Xs(t,e.mode,n)).return=e,t}if(yi(t)||U(t))return(t=Us(t,e.mode,n,null)).return=e,t;_i(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===a?n.type===E?d(e,t,n.props.children,r,a):u(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null}if(yi(n)||U(n))return null!==a?null:d(e,t,n,r,null);_i(e,n)}return null}function p(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,a,r.key):u(t,e,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(yi(r)||U(r))return d(t,e=e.get(n)||null,r,a,null);_i(t,r)}return null}function g(a,o,l,s){for(var u=null,c=null,d=o,g=o=0,m=null;null!==d&&g<l.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=h(a,d,l[g],s);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,g),null===c?u=v:c.sibling=v,c=v,d=m}if(g===l.length)return n(a,d),u;if(null===d){for(;g<l.length;g++)null!==(d=f(a,l[g],s))&&(o=i(d,o,g),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(a,d);g<l.length;g++)null!==(m=p(d,a,g,l[g],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),o=i(m,o,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(a,e)})),u}function m(a,l,s,u){var c=U(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,g=l,m=l=0,v=null,y=s.next();null!==g&&!y.done;m++,y=s.next()){g.index>m?(v=g,g=null):v=g.sibling;var b=h(a,g,y.value,u);if(null===b){null===g&&(g=v);break}e&&g&&null===b.alternate&&t(a,g),l=i(b,l,m),null===d?c=b:d.sibling=b,d=b,g=v}if(y.done)return n(a,g),c;if(null===g){for(;!y.done;m++,y=s.next())null!==(y=f(a,y.value,u))&&(l=i(y,l,m),null===d?c=y:d.sibling=y,d=y);return c}for(g=r(a,g);!y.done;m++,y=s.next())null!==(y=p(g,a,m,y.value,u))&&(e&&null!==y.alternate&&g.delete(null===y.key?m:y.key),l=i(y,l,m),null===d?c=y:d.sibling=y,d=y);return e&&g.forEach((function(e){return t(a,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===E&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case x:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===E){n(e,u.sibling),(r=a(u,i.props.children)).return=e,e=r;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(r=a(u,i.props)).ref=bi(e,u,i),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===E?((r=Us(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Bs(i.type,i.key,i.props,null,e.mode,s)).ref=bi(e,r,i),s.return=e,e=s)}return l(e);case S:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xs(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=Ws(i,e.mode,s)).return=e,e=r),l(e);if(yi(i))return g(e,r,i,s);if(U(i))return m(e,r,i,s);if(c&&_i(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,Y(e.type)||"Component"))}return n(e,r)}}var xi=wi(!0),Si=wi(!1),Ei={},ki=ia(Ei),Ci=ia(Ei),Pi=ia(Ei);function Oi(e){if(e===Ei)throw Error(o(174));return e}function Ti(e,t){switch(la(Pi,t),la(Ci,e),la(ki,Ei),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}oa(ki),la(ki,t)}function Mi(){oa(ki),oa(Ci),oa(Pi)}function Ni(e){Oi(Pi.current);var t=Oi(ki.current),n=he(t,e.type);t!==n&&(la(Ci,e),la(ki,n))}function Ri(e){Ci.current===e&&(oa(ki),oa(Ci))}var Li=ia(0);function Ai(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Di=null,Ii=null,zi=!1;function ji(e,t){var n=js(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Gi(e){if(zi){var t=Ii;if(t){var n=t;if(!Fi(e,t)){if(!(t=Wr(n.nextSibling))||!Fi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Di=e);ji(Di,n)}Di=e,Ii=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Di=e}}function Bi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Di=e}function Ui(e){if(e!==Di)return!1;if(!zi)return Bi(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Gr(t,e.memoizedProps))for(t=Ii;t;)ji(e,t),t=Wr(t.nextSibling);if(Bi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ii=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ii=null}}else Ii=Di?Wr(e.stateNode.nextSibling):null;return!0}function Hi(){Ii=Di=null,zi=!1}var Wi=[];function Xi(){for(var e=0;e<Wi.length;e++)Wi[e]._workInProgressVersionPrimary=null;Wi.length=0}var Vi=w.ReactCurrentDispatcher,Yi=w.ReactCurrentBatchConfig,Qi=0,qi=null,$i=null,Ki=null,Ji=!1,Zi=!1;function eo(){throw Error(o(321))}function to(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function no(e,t,n,r,a,i){if(Qi=i,qi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Vi.current=null===e||null===e.memoizedState?To:Mo,e=n(r,a),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error(o(301));i+=1,Ki=$i=null,t.updateQueue=null,Vi.current=No,e=n(r,a)}while(Zi)}if(Vi.current=Oo,t=null!==$i&&null!==$i.next,Qi=0,Ki=$i=qi=null,Ji=!1,t)throw Error(o(300));return e}function ro(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ki?qi.memoizedState=Ki=e:Ki=Ki.next=e,Ki}function ao(){if(null===$i){var e=qi.alternate;e=null!==e?e.memoizedState:null}else e=$i.next;var t=null===Ki?qi.memoizedState:Ki.next;if(null!==t)Ki=t,$i=e;else{if(null===e)throw Error(o(310));e={memoizedState:($i=e).memoizedState,baseState:$i.baseState,baseQueue:$i.baseQueue,queue:$i.queue,next:null},null===Ki?qi.memoizedState=Ki=e:Ki=Ki.next=e}return Ki}function io(e,t){return"function"==typeof t?t(e):t}function oo(e){var t=ao(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=$i,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var s=l=i=null,u=a;do{var c=u.lane;if((Qi&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=d,i=r):s=s.next=d,qi.lanes|=c,Dl|=c}u=u.next}while(null!==u&&u!==a);null===s?i=r:s.next=l,or(r,t.memoizedState)||(Lo=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function lo(e){var t=ao(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);or(i,t.memoizedState)||(Lo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function so(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Qi&e)===e)&&(t._workInProgressVersionPrimary=r,Wi.push(t))),e)return n(t._source);throw Wi.push(t),Error(o(350))}function uo(e,t,n,r){var a=Pl;if(null===a)throw Error(o(349));var i=t._getVersion,l=i(t._source),s=Vi.current,u=s.useState((function(){return so(a,t,n)})),c=u[1],d=u[0];u=Ki;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=qi;return e.memoizedState={refs:h,source:t,subscribe:r},s.useEffect((function(){h.getSnapshot=n,h.setSnapshot=c;var e=i(t._source);if(!or(l,e)){e=n(t._source),or(d,e)||(c(e),e=ls(m),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,o=e;0<o;){var s=31-Ht(o),u=1<<s;r[s]|=e,o&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=ls(m);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),or(p,n)&&or(g,t)&&or(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:io,lastRenderedState:d}).dispatch=c=Po.bind(null,qi,e),u.queue=e,u.baseQueue=null,d=so(a,t,n),u.memoizedState=u.baseState=d),d}function co(e,t,n){return uo(ao(),e,t,n)}function fo(e){var t=ro();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:io,lastRenderedState:e}).dispatch=Po.bind(null,qi,e),[t.memoizedState,e]}function ho(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=qi.updateQueue)?(t={lastEffect:null},qi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function po(e){return e={current:e},ro().memoizedState=e}function go(){return ao().memoizedState}function mo(e,t,n,r){var a=ro();qi.flags|=e,a.memoizedState=ho(1|t,n,void 0,void 0===r?null:r)}function vo(e,t,n,r){var a=ao();r=void 0===r?null:r;var i=void 0;if(null!==$i){var o=$i.memoizedState;if(i=o.destroy,null!==r&&to(r,o.deps))return void ho(t,n,i,r)}qi.flags|=e,a.memoizedState=ho(1|t,n,i,r)}function yo(e,t){return mo(516,4,e,t)}function bo(e,t){return vo(516,4,e,t)}function _o(e,t){return vo(4,2,e,t)}function wo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xo(e,t,n){return n=null!=n?n.concat([e]):null,vo(4,2,wo.bind(null,t,e),n)}function So(){}function Eo(e,t){var n=ao();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ko(e,t){var n=ao();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Co(e,t){var n=Ga();Ua(98>n?98:n,(function(){e(!0)})),Ua(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function Po(e,t,n){var r=os(),a=ls(e),i={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===qi||null!==o&&o===qi)Zi=Ji=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=o(l,n);if(i.eagerReducer=o,i.eagerState=s,or(s,l))return}catch(e){}ss(e,a,r)}}var Oo={readContext:ni,useCallback:eo,useContext:eo,useEffect:eo,useImperativeHandle:eo,useLayoutEffect:eo,useMemo:eo,useReducer:eo,useRef:eo,useState:eo,useDebugValue:eo,useDeferredValue:eo,useTransition:eo,useMutableSource:eo,useOpaqueIdentifier:eo,unstable_isNewReconciler:!1},To={readContext:ni,useCallback:function(e,t){return ro().memoizedState=[e,void 0===t?null:t],e},useContext:ni,useEffect:yo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mo(4,2,wo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mo(4,2,e,t)},useMemo:function(e,t){var n=ro();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ro();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Po.bind(null,qi,e),[r.memoizedState,e]},useRef:po,useState:fo,useDebugValue:So,useDeferredValue:function(e){var t=fo(e),n=t[0],r=t[1];return yo((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=fo(!1),t=e[0];return po(e=Co.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ro();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},uo(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Vr++).toString(36))),Error(o(355))})),n=fo(t)[1];return 0==(2&qi.mode)&&(qi.flags|=516,ho(5,(function(){n("r:"+(Vr++).toString(36))}),void 0,null)),t}return fo(t="r:"+(Vr++).toString(36)),t},unstable_isNewReconciler:!1},Mo={readContext:ni,useCallback:Eo,useContext:ni,useEffect:bo,useImperativeHandle:xo,useLayoutEffect:_o,useMemo:ko,useReducer:oo,useRef:go,useState:function(){return oo(io)},useDebugValue:So,useDeferredValue:function(e){var t=oo(io),n=t[0],r=t[1];return bo((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=oo(io)[0];return[go().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return oo(io)[0]},unstable_isNewReconciler:!1},No={readContext:ni,useCallback:Eo,useContext:ni,useEffect:bo,useImperativeHandle:xo,useLayoutEffect:_o,useMemo:ko,useReducer:lo,useRef:go,useState:function(){return lo(io)},useDebugValue:So,useDeferredValue:function(e){var t=lo(io),n=t[0],r=t[1];return bo((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=lo(io)[0];return[go().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return lo(io)[0]},unstable_isNewReconciler:!1},Ro=w.ReactCurrentOwner,Lo=!1;function Ao(e,t,n,r){t.child=null===e?Si(t,null,n,r):xi(t,e.child,n,r)}function Do(e,t,n,r,a){n=n.render;var i=t.ref;return ti(t,a),r=no(e,t,n,r,i,a),null===e||Lo?(t.flags|=1,Ao(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Zo(e,t,a))}function Io(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||Fs(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bs(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,zo(e,t,o,r,a,i))}return o=e.child,0==(a&i)&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:sr)(a,r)&&e.ref===t.ref)?Zo(e,t,i):(t.flags|=1,(e=Gs(o,r)).ref=t.ref,e.return=t,t.child=e)}function zo(e,t,n,r,a,i){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Lo=!1,0==(i&a))return t.lanes=e.lanes,Zo(e,t,i);0!=(16384&e.flags)&&(Lo=!0)}return Go(e,t,n,r,i)}function jo(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ms(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ms(0,e),null;t.memoizedState={baseLanes:0},ms(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ms(0,r);return Ao(e,t,a,n),t.child}function Fo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Go(e,t,n,r,a){var i=ha(n)?da:ua.current;return i=fa(t,i),ti(t,a),n=no(e,t,n,r,i,a),null===e||Lo?(t.flags|=1,Ao(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Zo(e,t,a))}function Bo(e,t,n,r,a){if(ha(n)){var i=!0;va(t)}else i=!1;if(ti(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),gi(t,n,r),vi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var s=o.context,u=n.contextType;u="object"==typeof u&&null!==u?ni(u):fa(t,u=ha(n)?da:ua.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||s!==u)&&mi(t,o,r,u),ri=!1;var f=t.memoizedState;o.state=f,ui(t,r,o,a),s=t.memoizedState,l!==r||f!==s||ca.current||ri?("function"==typeof c&&(fi(t,n,c,r),s=t.memoizedState),(l=ri||pi(t,n,l,r,f,s,u))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=u,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,ii(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ya(t.type,l),o.props=u,d=t.pendingProps,f=o.context,s="object"==typeof(s=n.contextType)&&null!==s?ni(s):fa(t,s=ha(n)?da:ua.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==d||f!==s)&&mi(t,o,r,s),ri=!1,f=t.memoizedState,o.state=f,ui(t,r,o,a);var p=t.memoizedState;l!==d||f!==p||ca.current||ri?("function"==typeof h&&(fi(t,n,h,r),p=t.memoizedState),(u=ri||pi(t,n,u,r,f,p,s))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=s,r=u):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Uo(e,t,n,r,i,a)}function Uo(e,t,n,r,a,i){Fo(e,t);var o=0!=(64&t.flags);if(!r&&!o)return a&&ya(t,n,!1),Zo(e,t,i);r=t.stateNode,Ro.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=xi(t,e.child,null,i),t.child=xi(t,null,l,i)):Ao(e,t,l,i),t.memoizedState=r.state,a&&ya(t,n,!0),t.child}function Ho(e){var t=e.stateNode;t.pendingContext?ga(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ga(0,t.context,!1),Ti(e,t.containerInfo)}var Wo,Xo,Vo,Yo={dehydrated:null,retryLane:0};function Qo(e,t,n){var r,a=t.pendingProps,i=Li.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),la(Li,1&i),null===e?(void 0!==a.fallback&&Gi(t),e=a.children,i=a.fallback,o?(e=qo(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yo,e):"number"==typeof a.unstable_expectedLoadTime?(e=qo(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yo,t.lanes=33554432,e):((n=Hs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(a=function(e,t,n,r,a){var i=t.mode,o=e.child;e=o.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=l,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Gs(o,l),null!==e?r=Gs(e,r):(r=Us(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=Yo,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Gs(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function qo(e,t,n,r){var a=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Hs(t,a,0,null),n=Us(n,a,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function $o(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ei(e.return,t)}function Ko(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a,o.lastEffect=i)}function Jo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Ao(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$o(e,n);else if(19===e.tag)$o(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ai(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ko(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ai(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ko(t,!0,n,null,i,t.lastEffect);break;case"together":Ko(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Gs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Gs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ha(t.type)&&pa(),null;case 3:return Mi(),oa(ca),oa(ua),Xi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ui(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ri(t);var i=Oi(Pi.current);if(n=t.type,null!==e&&null!=t.stateNode)Xo(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Oi(ki.current),Ui(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Qr]=t,r[qr]=l,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Cr(xr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":ee(r,l),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Cr("invalid",r);break;case"textarea":se(r,l),Cr("invalid",r)}for(var u in Se(n,l),e=null,l)l.hasOwnProperty(u)&&(i=l[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Cr("scroll",r));switch(n){case"input":$(r),re(r,l,!0);break;case"textarea":$(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Qr]=t,e[qr]=r,Wo(e,t),t.stateNode=e,u=Ee(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),i=r;break;case"iframe":case"object":case"embed":Cr("load",e),i=r;break;case"video":case"audio":for(i=0;i<xr.length;i++)Cr(xr[i],e);i=r;break;case"source":Cr("error",e),i=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),i=r;break;case"details":Cr("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Cr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=a({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":se(e,r),i=le(e,r),Cr("invalid",e);break;default:i=r}Se(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?we(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Cr("scroll",e):null!=d&&_(e,l,d,u))}switch(n){case"input":$(e),re(e,r,!1);break;case"textarea":$(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?oe(e,!!r.multiple,l,!1):null!=r.defaultValue&&oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Ir)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Vo(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Oi(Pi.current),Oi(ki.current),Ui(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return oa(Li),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ui(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?0===Rl&&(Rl=3):(0!==Rl&&3!==Rl||(Rl=4),null===Pl||0==(134217727&Dl)&&0==(134217727&Il)||fs(Pl,Tl))),(r||n)&&(t.flags|=4),null);case 4:return Mi(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return Za(t),null;case 17:return ha(t.type)&&pa(),null;case 19:if(oa(Li),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)el(r,!1);else{if(0!==Rl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Ai(e))){for(t.flags|=64,el(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return la(Li,1&Li.current|2),t.child}e=e.sibling}null!==r.tail&&Fa()>Gl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ai(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fa()-r.renderingStartTime>Gl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fa(),n.sibling=null,t=Li.current,la(Li,l?1&t|2:1&t),n):null;case 23:case 24:return vs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function nl(e){switch(e.tag){case 1:ha(e.type)&&pa();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Mi(),oa(ca),oa(ua),Xi(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Ri(e),null;case 13:return oa(Li),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return oa(Li),null;case 4:return Mi(),null;case 10:return Za(e),null;case 23:case 24:return vs(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function al(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xo=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Oi(ki.current);var o,l=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(d in Se(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(o in u)!u.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&u[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Cr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===D?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Vo=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function ol(e,t,n){(n=oi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Xl=r),al(0,t)},n}function ll(e,t,n){(n=oi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return al(0,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this),al(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var sl="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){As(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ya(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function dl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Ns(n,e),Ms(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ya(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=_e("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hl(e,t){if(_a&&"function"==typeof _a.onCommitFiberUnmount)try{_a.onCommitFiberUnmount(ba,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Ns(t,n);else{r=t;try{a()}catch(e){As(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){As(t,e)}break;case 5:ul(t);break;case 4:bl(e,t)}}function pl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(gl(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vl(e,n,t):yl(e,n,t)}function vl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,a=t,i=!1;;){if(!i){i=a.return;e:for(;;){if(null===i)throw Error(o(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===a.tag||6===a.tag){e:for(var l=e,s=a,u=s;;)if(hl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=a.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(hl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(i=!1)}a.sibling.return=a.return,a=a.sibling}}function _l(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,a),t=Ee(e,r),a=0;a<i.length;a+=2){var l=i[a],s=i[a+1];"style"===l?we(n,s):"dangerouslySetInnerHTML"===l?me(n,s):"children"===l?ve(n,s):_(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?oe(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?oe(n,!!r.multiple,r.defaultValue,!0):oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=Fa(),fl(t.child,!0)),void wl(t);case 19:return void wl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(o(163))}function wl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new sl),t.forEach((function(t){var r=Is.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function xl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Sl=Math.ceil,El=w.ReactCurrentDispatcher,kl=w.ReactCurrentOwner,Cl=0,Pl=null,Ol=null,Tl=0,Ml=0,Nl=ia(0),Rl=0,Ll=null,Al=0,Dl=0,Il=0,zl=0,jl=null,Fl=0,Gl=1/0;function Bl(){Gl=Fa()+500}var Ul,Hl=null,Wl=!1,Xl=null,Vl=null,Yl=!1,Ql=null,ql=90,$l=[],Kl=[],Jl=null,Zl=0,es=null,ts=-1,ns=0,rs=0,as=null,is=!1;function os(){return 0!=(48&Cl)?Fa():-1!==ts?ts:ts=Fa()}function ls(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ga()?1:2;if(0===ns&&(ns=Al),0!==Va.transition){0!==rs&&(rs=null!==jl?jl.pendingLanes:0),e=ns;var t=4186112&~rs;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ga(),e=Ft(0!=(4&Cl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ns)}function ss(e,t,n){if(50<Zl)throw Zl=0,es=null,Error(o(185));if(null===(e=us(e,t)))return null;Ut(e,t,n),e===Pl&&(Il|=t,4===Rl&&fs(e,Tl));var r=Ga();1===t?0!=(8&Cl)&&0==(48&Cl)?hs(e):(cs(e,n),0===Cl&&(Bl(),Wa())):(0==(4&Cl)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cs(e,n)),jl=e}function us(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Ht(l),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&a)){c=t,It(u);var d=Dt;i[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=zt(e,e===Pl?Tl:0),t=Dt,0===r)null!==n&&(n!==La&&Sa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==La&&Sa(n)}15===t?(n=hs.bind(null,e),null===Da?(Da=[n],Ia=xa(Oa,Xa)):Da.push(n),n=La):n=14===t?Ha(99,hs.bind(null,e)):Ha(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),ds.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function ds(e){if(ts=-1,rs=ns=0,0!=(48&Cl))throw Error(o(327));var t=e.callbackNode;if(Ts()&&e.callbackNode!==t)return null;var n=zt(e,e===Pl?Tl:0);if(0===n)return null;var r=n,a=Cl;Cl|=16;var i=_s();for(Pl===e&&Tl===r||(Bl(),ys(e,r));;)try{Ss();break}catch(t){bs(e,t)}if(Ja(),El.current=i,Cl=a,null!==Ol?r=0:(Pl=null,Tl=0,r=Rl),0!=(Al&Il))ys(e,0);else if(0!==r){if(2===r&&(Cl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=jt(e))&&(r=ws(e,n))),1===r)throw t=Ll,ys(e,0),fs(e,n),cs(e,Fa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:Cs(e);break;case 3:if(fs(e,n),(62914560&n)===n&&10<(r=Fl+500-Fa())){if(0!==zt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){os(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Br(Cs.bind(null,e),r);break}Cs(e);break;case 4:if(fs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Ht(n);i=1<<l,(l=r[l])>a&&(a=l),n&=~i}if(n=a,10<(n=(120>(n=Fa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Br(Cs.bind(null,e),n);break}Cs(e);break;case 5:Cs(e);break;default:throw Error(o(329))}}return cs(e,Fa()),e.callbackNode===t?ds.bind(null,e):null}function fs(e,t){for(t&=~zl,t&=~Il,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function hs(e){if(0!=(48&Cl))throw Error(o(327));if(Ts(),e===Pl&&0!=(e.expiredLanes&Tl)){var t=Tl,n=ws(e,t);0!=(Al&Il)&&(n=ws(e,t=zt(e,t)))}else n=ws(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Cl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=jt(e))&&(n=ws(e,t))),1===n)throw n=Ll,ys(e,0),fs(e,t),cs(e,Fa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cs(e),cs(e,Fa()),null}function ps(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(Bl(),Wa())}}function gs(e,t){var n=Cl;Cl&=-2,Cl|=8;try{return e(t)}finally{0===(Cl=n)&&(Bl(),Wa())}}function ms(e,t){la(Nl,Ml),Ml|=t,Al|=t}function vs(){Ml=Nl.current,oa(Nl)}function ys(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pa();break;case 3:Mi(),oa(ca),oa(ua),Xi();break;case 5:Ri(r);break;case 4:Mi();break;case 13:case 19:oa(Li);break;case 10:Za(r);break;case 23:case 24:vs()}n=n.return}Pl=e,Ol=Gs(e.current,null),Tl=Ml=Al=t,Rl=0,Ll=null,zl=Il=Dl=0}function bs(e,t){for(;;){var n=Ol;try{if(Ja(),Vi.current=Oo,Ji){for(var r=qi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Ji=!1}if(Qi=0,Ki=$i=qi=null,Zi=!1,kl.current=null,null===n||null===n.return){Rl=1,Ll=t,Ol=null;break}e:{var i=e,o=n.return,l=n,s=t;if(t=Tl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Li.current),f=o;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=oi(-1,1);y.tag=2,li(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new il,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var _=Ds.bind(null,i,u,l);u.then(_,_)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error((Y(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Rl&&(Rl=2),s=rl(s,l),f=o;do{switch(f.tag){case 3:i=s,f.flags|=4096,t&=-t,f.lanes|=t,si(f,ol(0,i,t));break e;case 1:i=s;var w=f.type,x=f.stateNode;if(0==(64&f.flags)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Vl||!Vl.has(x)))){f.flags|=4096,t&=-t,f.lanes|=t,si(f,ll(f,i,t));break e}}f=f.return}while(null!==f)}ks(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function _s(){var e=El.current;return El.current=Oo,null===e?Oo:e}function ws(e,t){var n=Cl;Cl|=16;var r=_s();for(Pl===e&&Tl===t||ys(e,t);;)try{xs();break}catch(t){bs(e,t)}if(Ja(),Cl=n,El.current=r,null!==Ol)throw Error(o(261));return Pl=null,Tl=0,Rl}function xs(){for(;null!==Ol;)Es(Ol)}function Ss(){for(;null!==Ol&&!Ea();)Es(Ol)}function Es(e){var t=Ul(e.alternate,e,Ml);e.memoizedProps=e.pendingProps,null===t?ks(e):Ol=t,kl.current=null}function ks(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Ml)))return void(Ol=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ml)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Ol=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Rl&&(Rl=5)}function Cs(e){var t=Ga();return Ua(99,Ps.bind(null,e,t)),null}function Ps(e,t){do{Ts()}while(null!==Ql);if(0!=(48&Cl))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,i=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-Ht(i),c=1<<u;a[u]=0,l[u]=-1,s[u]=-1,i&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===Pl&&(Ol=Pl=null,Tl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Cl,Cl|=32,kl.current=null,zr=Qt,hr(l=fr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,f=-1,h=-1,p=0,g=0,m=l,v=null;t:for(;;){for(var y;m!==s||0!==i&&3!==m.nodeType||(f=d+i),m!==u||0!==c&&3!==m.nodeType||(h=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(y=m.firstChild);)v=m,m=y;for(;;){if(m===l)break t;if(v===s&&++p===i&&(f=d),v===u&&++g===c&&(h=d),null!==(y=m.nextSibling))break;v=(m=v).parentNode}m=y}s=-1===f||-1===h?null:{start:f,end:h}}else s=null;s=s||{start:0,end:0}}else s=null;jr={focusedElem:l,selectionRange:s},Qt=!1,as=null,is=!1,Hl=r;do{try{Os()}catch(e){if(null===Hl)throw Error(o(330));As(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);as=null,Hl=r;do{try{for(l=e;null!==Hl;){var b=Hl.flags;if(16&b&&ve(Hl.stateNode,""),128&b){var _=Hl.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:ml(Hl),Hl.flags&=-3;break;case 6:ml(Hl),Hl.flags&=-3,_l(Hl.alternate,Hl);break;case 1024:Hl.flags&=-1025;break;case 1028:Hl.flags&=-1025,_l(Hl.alternate,Hl);break;case 4:_l(Hl.alternate,Hl);break;case 8:bl(l,s=Hl);var x=s.alternate;pl(s),null!==x&&pl(x)}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(o(330));As(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);if(w=jr,_=fr(),b=w.focusedElem,l=w.selectionRange,_!==b&&b&&b.ownerDocument&&dr(b.ownerDocument.documentElement,b)){null!==l&&hr(b)&&(_=l.start,void 0===(w=l.end)&&(w=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(w,b.value.length)):(w=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),s=b.textContent.length,x=Math.min(l.start,s),l=void 0===l.end?x:Math.min(l.end,s),!w.extend&&x>l&&(s=l,l=x,x=s),s=cr(b,x),i=cr(b,l),s&&i&&(1!==w.rangeCount||w.anchorNode!==s.node||w.anchorOffset!==s.offset||w.focusNode!==i.node||w.focusOffset!==i.offset)&&((_=_.createRange()).setStart(s.node,s.offset),w.removeAllRanges(),x>l?(w.addRange(_),w.extend(i.node,i.offset)):(_.setEnd(i.node,i.offset),w.addRange(_))))),_=[];for(w=b;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(w=_[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Qt=!!zr,jr=zr=null,e.current=n,Hl=r;do{try{for(b=e;null!==Hl;){var S=Hl.flags;if(36&S&&dl(b,Hl.alternate,Hl),128&S){_=void 0;var E=Hl.ref;if(null!==E){var k=Hl.stateNode;switch(Hl.tag){case 5:_=k;break;default:_=k}"function"==typeof E?E(_):E.current=_}}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(o(330));As(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);Hl=null,Aa(),Cl=a}else e.current=n;if(Yl)Yl=!1,Ql=e,ql=t;else for(Hl=r;null!==Hl;)t=Hl.nextEffect,Hl.nextEffect=null,8&Hl.flags&&((S=Hl).sibling=null,S.stateNode=null),Hl=t;if(0===(r=e.pendingLanes)&&(Vl=null),1===r?e===es?Zl++:(Zl=0,es=e):Zl=0,n=n.stateNode,_a&&"function"==typeof _a.onCommitFiberRoot)try{_a.onCommitFiberRoot(ba,n,void 0,64==(64&n.current.flags))}catch(e){}if(cs(e,Fa()),Wl)throw Wl=!1,e=Xl,Xl=null,e;return 0!=(8&Cl)||Wa(),null}function Os(){for(;null!==Hl;){var e=Hl.alternate;is||null===as||(0!=(8&Hl.flags)?Ze(Hl,as)&&(is=!0):13===Hl.tag&&xl(e,Hl)&&Ze(Hl,as)&&(is=!0));var t=Hl.flags;0!=(256&t)&&cl(e,Hl),0==(512&t)||Yl||(Yl=!0,Ha(97,(function(){return Ts(),null}))),Hl=Hl.nextEffect}}function Ts(){if(90!==ql){var e=97<ql?97:ql;return ql=90,Ua(e,Rs)}return!1}function Ms(e,t){$l.push(t,e),Yl||(Yl=!0,Ha(97,(function(){return Ts(),null})))}function Ns(e,t){Kl.push(t,e),Yl||(Yl=!0,Ha(97,(function(){return Ts(),null})))}function Rs(){if(null===Ql)return!1;var e=Ql;if(Ql=null,0!=(48&Cl))throw Error(o(331));var t=Cl;Cl|=32;var n=Kl;Kl=[];for(var r=0;r<n.length;r+=2){var a=n[r],i=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(o(330));As(i,e)}}for(n=$l,$l=[],r=0;r<n.length;r+=2){a=n[r],i=n[r+1];try{var s=a.create;a.destroy=s()}catch(e){if(null===i)throw Error(o(330));As(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Cl=t,Wa(),!0}function Ls(e,t,n){li(e,t=ol(0,t=rl(n,t),1)),t=os(),null!==(e=us(e,1))&&(Ut(e,1,t),cs(e,t))}function As(e,t){if(3===e.tag)Ls(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ls(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){var a=ll(n,e=rl(t,e),1);if(li(n,a),a=os(),null!==(n=us(n,1)))Ut(n,1,a),cs(n,a);else if("function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ds(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=os(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Tl&n)===n&&(4===Rl||3===Rl&&(62914560&Tl)===Tl&&500>Fa()-Fl?ys(e,0):zl|=n),cs(e,t)}function Is(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ga()?1:2:(0===ns&&(ns=Al),0===(t=Gt(62914560&~ns))&&(t=4194304))),n=os(),null!==(e=us(e,t))&&(Ut(e,t,n),cs(e,n))}function zs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function js(e,t,n,r){return new zs(e,t,n,r)}function Fs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Gs(e,t){var n=e.alternate;return null===n?((n=js(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bs(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Fs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Us(n.children,a,i,t);case I:l=8,a|=16;break;case k:l=8,a|=1;break;case C:return(e=js(12,n,t,8|a)).elementType=C,e.type=C,e.lanes=i,e;case M:return(e=js(13,n,t,a)).type=M,e.elementType=M,e.lanes=i,e;case N:return(e=js(19,n,t,a)).elementType=N,e.lanes=i,e;case z:return Hs(n,a,i,t);case j:return(e=js(24,n,t,a)).elementType=j,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case O:l=9;break e;case T:l=11;break e;case R:l=14;break e;case L:l=16,r=null;break e;case A:l=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=js(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Us(e,t,n,r){return(e=js(7,e,r,t)).lanes=n,e}function Hs(e,t,n,r){return(e=js(23,e,r,t)).elementType=z,e.lanes=n,e}function Ws(e,t,n){return(e=js(6,e,null,t)).lanes=n,e}function Xs(e,t,n){return(t=js(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ys(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qs(e,t,n,r){var a=t.current,i=os(),l=ls(a);e:if(n){t:{if(qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(ha(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(o(171))}if(1===n.tag){var u=n.type;if(ha(u)){n=ma(n,u,s);break e}}n=s}else n=sa;return null===t.context?t.context=n:t.pendingContext=n,(t=oi(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(a,t),ss(a,l,i),l}function qs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}function Js(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Vs(e,t,null!=n&&!0===n.hydrate),t=js(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ai(t),e[$r]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=qs(o);l.call(e)}}Qs(t,o,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Js(e,0,t?{hydrate:!0}:void 0)}(n,r),o=i._internalRoot,"function"==typeof a){var s=a;a=function(){var e=qs(o);s.call(e)}}gs((function(){Qs(t,o,e,a)}))}return qs(o)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zs(t))throw Error(o(200));return Ys(e,t,null,n)}Ul=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ca.current)Lo=!0;else{if(0==(n&r)){switch(Lo=!1,t.tag){case 3:Ho(t),Hi();break;case 5:Ni(t);break;case 1:ha(t.type)&&va(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;la(Qa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qo(e,t,n):(la(Li,1&Li.current),null!==(t=Zo(e,t,n))?t.sibling:null);la(Li,1&Li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Jo(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),la(Li,Li.current),r)break;return null;case 23:case 24:return t.lanes=0,jo(e,t,n)}return Zo(e,t,n)}Lo=0!=(16384&e.flags)}else Lo=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=fa(t,ua.current),ti(t,n),a=no(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ha(r)){var i=!0;va(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&fi(t,r,l,e),a.updater=hi,t.stateNode=a,a._reactInternals=t,vi(t,r,e,n),t=Uo(null,t,r,!0,i,n)}else t.tag=0,Ao(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return Fs(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===R)return 14}return 2}(a),e=Ya(a,e),i){case 0:t=Go(null,t,a,e,n);break e;case 1:t=Bo(null,t,a,e,n);break e;case 11:t=Do(null,t,a,e,n);break e;case 14:t=Io(null,t,a,Ya(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Go(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 1:return r=t.type,a=t.pendingProps,Bo(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 3:if(Ho(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,ii(e,t),ui(t,r,null,n),(r=t.memoizedState.element)===a)Hi(),t=Zo(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(Ii=Wr(t.stateNode.containerInfo.firstChild),Di=t,i=zi=!0),i){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(i=e[a])._workInProgressVersionPrimary=e[a+1],Wi.push(i);for(n=Si(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ao(e,t,r,n),Hi();t=t.child}return t;case 5:return Ni(t),null===e&&Gi(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,Gr(r,a)?l=null:null!==i&&Gr(r,i)&&(t.flags|=16),Fo(e,t),Ao(e,t,l,n),t.child;case 6:return null===e&&Gi(t),null;case 13:return Qo(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xi(t,null,r,n):Ao(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Do(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 7:return Ao(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ao(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value;var s=t.type._context;if(la(Qa,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0==(i=or(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===a.children&&!ca.current){t=Zo(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=oi(-1,n&-n)).tag=2,li(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ei(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Ao(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ti(t,n),r=r(a=ni(a,i.unstable_observedBits)),t.flags|=1,Ao(e,t,r,n),t.child;case 14:return i=Ya(a=t.type,t.pendingProps),Io(e,t,a,i=Ya(a.type,i),r,n);case 15:return zo(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ya(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ha(r)?(e=!0,va(t)):e=!1,ti(t,n),gi(t,r,a),vi(t,r,a,n),Uo(null,t,r,!0,e,n);case 19:return Jo(e,t,n);case 23:case 24:return jo(e,t,n)}throw Error(o(156,t.tag))},Js.prototype.render=function(e){Qs(e,this._internalRoot,null,null)},Js.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qs(null,e,null,(function(){t[$r]=null}))},et=function(e){13===e.tag&&(ss(e,4,os()),Ks(e,4))},tt=function(e){13===e.tag&&(ss(e,67108864,os()),Ks(e,67108864))},nt=function(e){if(13===e.tag){var t=os(),n=ls(e);ss(e,n,t),Ks(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ta(r);if(!a)throw Error(o(90));K(r),ne(r,a)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&oe(e,!!n.multiple,t,!1)}},Re=ps,Le=function(e,t,n,r,a){var i=Cl;Cl|=4;try{return Ua(98,e.bind(null,t,n,r,a))}finally{0===(Cl=i)&&(Bl(),Wa())}},Ae=function(){0==(49&Cl)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cs(e,Fa())}))}Wa()}(),Ts())},De=function(e,t){var n=Cl;Cl|=2;try{return e(t)}finally{0===(Cl=n)&&(Bl(),Wa())}};var nu={Events:[Zr,ea,ta,Me,Ne,Ts,{current:!1}]},ru={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},au={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{ba=iu.inject(au),_a=iu}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Cl;if(0!=(48&n))return e(t);Cl|=1;try{if(e)return Ua(99,e.bind(null,t))}finally{Cl=n,Wa()}},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zs(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(o(40));return!!e._reactRootContainer&&(gs((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[$r]=null}))})),!0)},t.unstable_batchedUpdates=ps,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},5668:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DraggableCore",{enumerable:!0,get:function(){return c.default}}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==p(e)&&"function"!=typeof e)return{default:e};var t=h();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}(n(7294)),a=f(n(5697)),i=f(n(3935)),o=f(n(4184)),l=n(1825),s=n(2849),u=n(9280),c=f(n(783)),d=f(n(5904));function f(e){return e&&e.__esModule?e:{default:e}}function h(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return h=function(){return e},e}function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),e}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?S(e):t}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(u,e);var t,n,a=(t=u,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=E(t);if(n){var a=E(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return x(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),k(S(t=a.call(this,e)),"onDragStart",(function(e,n){if((0,d.default)("Draggable: onDragStart: %j",n),!1===t.props.onStart(e,(0,s.createDraggableData)(S(t),n)))return!1;t.setState({dragging:!0,dragged:!0})})),k(S(t),"onDrag",(function(e,n){if(!t.state.dragging)return!1;(0,d.default)("Draggable: onDrag: %j",n);var r,a,i=(0,s.createDraggableData)(S(t),n),o={x:i.x,y:i.y};if(t.props.bounds){var l=o.x,u=o.y;o.x+=t.state.slackX,o.y+=t.state.slackY;var c=(r=(0,s.getBoundPosition)(S(t),o.x,o.y),a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(r,a)||function(e,t){if(e){if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(e,t):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=c[0],h=c[1];o.x=f,o.y=h,o.slackX=t.state.slackX+(l-o.x),o.slackY=t.state.slackY+(u-o.y),i.x=o.x,i.y=o.y,i.deltaX=o.x-t.state.x,i.deltaY=o.y-t.state.y}if(!1===t.props.onDrag(e,i))return!1;t.setState(o)})),k(S(t),"onDragStop",(function(e,n){if(!t.state.dragging)return!1;if(!1===t.props.onStop(e,(0,s.createDraggableData)(S(t),n)))return!1;(0,d.default)("Draggable: onDragStop: %j",n);var r={dragging:!1,slackX:0,slackY:0};if(Boolean(t.props.position)){var a=t.props.position,i=a.x,o=a.y;r.x=i,r.y=o}t.setState(r)})),t.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:y({},e.position),slackX:0,slackY:0,isElementSVG:!1},!e.position||e.onDrag||e.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),t}return _(u,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,d.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:y({},n)})}}]),_(u,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props,n=(t.axis,t.bounds,t.children),a=t.defaultPosition,i=t.defaultClassName,u=t.defaultClassNameDragging,d=t.defaultClassNameDragged,f=t.position,h=t.positionOffset,p=(t.scale,function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(t,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"])),m={},v=null,b=!Boolean(f)||this.state.dragging,_=f||a,w={x:(0,s.canDragX)(this)&&b?this.state.x:_.x,y:(0,s.canDragY)(this)&&b?this.state.y:_.y};this.state.isElementSVG?v=(0,l.createSVGTransform)(w,h):m=(0,l.createCSSTransform)(w,h);var x=(0,o.default)(n.props.className||"",i,(k(e={},u,this.state.dragging),k(e,d,this.state.dragged),e));return r.createElement(c.default,g({},p,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),r.cloneElement(r.Children.only(n),{className:x,style:y(y({},n.props.style),m),transform:v}))}}]),u}(r.Component);t.default=C,k(C,"displayName","Draggable"),k(C,"propTypes",y(y({},c.default.propTypes),{},{axis:a.default.oneOf(["both","x","y","none"]),bounds:a.default.oneOfType([a.default.shape({left:a.default.number,right:a.default.number,top:a.default.number,bottom:a.default.number}),a.default.string,a.default.oneOf([!1])]),defaultClassName:a.default.string,defaultClassNameDragging:a.default.string,defaultClassNameDragged:a.default.string,defaultPosition:a.default.shape({x:a.default.number,y:a.default.number}),positionOffset:a.default.shape({x:a.default.oneOfType([a.default.number,a.default.string]),y:a.default.oneOfType([a.default.number,a.default.string])}),position:a.default.shape({x:a.default.number,y:a.default.number}),className:u.dontSetMe,style:u.dontSetMe,transform:u.dontSetMe})),k(C,"defaultProps",y(y({},c.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))},783:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==f(e)&&"function"!=typeof e)return{default:e};var t=d();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}(n(7294)),a=c(n(5697)),i=c(n(3935)),o=n(1825),l=n(2849),s=n(9280),u=c(n(5904));function c(e){return e&&e.__esModule?e:{default:e}}function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=e[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?p(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?b(e):t}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x={start:"touchstart",move:"touchmove",stop:"touchend"},S={start:"mousedown",move:"mousemove",stop:"mouseup"},E=S,k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(d,e);var t,n,a,s,c=(a=d,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(a);if(s){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function d(){var e;g(this,d);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return w(b(e=c.call.apply(c,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),w(b(e),"mounted",!1),w(b(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,o.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,o.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var a=(0,o.getTouchIdentifier)(t);e.setState({touchIdentifier:a});var i=(0,l.getControlPosition)(t,a,b(e));if(null!=i){var s=i.x,c=i.y,d=(0,l.createCoreData)(b(e),s,c);(0,u.default)("DraggableCore: handleDragStart: %j",d),(0,u.default)("calling",e.props.onStart),!1!==e.props.onStart(t,d)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,o.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:s,lastY:c}),(0,o.addEvent)(r,E.move,e.handleDrag),(0,o.addEvent)(r,E.stop,e.handleDragStop))}}})),w(b(e),"handleDrag",(function(t){var n=(0,l.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,a=n.y;if(Array.isArray(e.props.grid)){var i=r-e.state.lastX,o=a-e.state.lastY,s=h((0,l.snapToGrid)(e.props.grid,i,o),2);if(i=s[0],o=s[1],!i&&!o)return;r=e.state.lastX+i,a=e.state.lastY+o}var c=(0,l.createCoreData)(b(e),r,a);if((0,u.default)("DraggableCore: handleDrag: %j",c),!1!==e.props.onDrag(t,c)&&!1!==e.mounted)e.setState({lastX:r,lastY:a});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var d=document.createEvent("MouseEvents");d.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(d)}}})),w(b(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,l.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,a=n.y,i=(0,l.createCoreData)(b(e),r,a);if(!1===e.props.onStop(t,i)||!1===e.mounted)return!1;var s=e.findDOMNode();s&&e.props.enableUserSelectHack&&(0,o.removeUserSelectStyles)(s.ownerDocument),(0,u.default)("DraggableCore: handleDragStop: %j",i),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),s&&((0,u.default)("DraggableCore: Removing handlers"),(0,o.removeEvent)(s.ownerDocument,E.move,e.handleDrag),(0,o.removeEvent)(s.ownerDocument,E.stop,e.handleDragStop))}}})),w(b(e),"onMouseDown",(function(t){return E=S,e.handleDragStart(t)})),w(b(e),"onMouseUp",(function(t){return E=S,e.handleDragStop(t)})),w(b(e),"onTouchStart",(function(t){return E=x,e.handleDragStart(t)})),w(b(e),"onTouchEnd",(function(t){return E=x,e.handleDragStop(t)})),e}return t=d,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,o.addEvent)(e,x.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,o.removeEvent)(t,S.move,this.handleDrag),(0,o.removeEvent)(t,x.move,this.handleDrag),(0,o.removeEvent)(t,S.stop,this.handleDragStop),(0,o.removeEvent)(t,x.stop,this.handleDragStop),(0,o.removeEvent)(e,x.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,o.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:i.default.findDOMNode(this)}},{key:"render",value:function(){return r.cloneElement(r.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&m(t.prototype,n),d}(r.Component);t.default=k,w(k,"displayName","DraggableCore"),w(k,"propTypes",{allowAnyClick:a.default.bool,disabled:a.default.bool,enableUserSelectHack:a.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:a.default.arrayOf(a.default.number),handle:a.default.string,cancel:a.default.string,nodeRef:a.default.object,onStart:a.default.func,onDrag:a.default.func,onStop:a.default.func,onMouseDown:a.default.func,scale:a.default.number,className:s.dontSetMe,style:s.dontSetMe,transform:s.dontSetMe}),w(k,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},1193:(e,t,n)=>{"use strict";var r=n(5668),a=r.default,i=r.DraggableCore;e.exports=a,e.exports.default=a,e.exports.DraggableCore=i},1825:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.matchesSelector=d,t.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(d(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},t.addEvent=function(e,t,n,r){if(e){var a=s({capture:!0},r);e.addEventListener?e.addEventListener(t,n,a):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n}},t.removeEvent=function(e,t,n,r){if(e){var a=s({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,a):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null}},t.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,a.int)(n.borderTopWidth))+(0,a.int)(n.borderBottomWidth)},t.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,a.int)(n.borderLeftWidth))+(0,a.int)(n.borderRightWidth)},t.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,a.int)(n.paddingTop))-(0,a.int)(n.paddingBottom)},t.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,a.int)(n.paddingLeft))-(0,a.int)(n.paddingRight)},t.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect();return{x:(e.clientX+t.scrollLeft-r.left)/n,y:(e.clientY+t.scrollTop-r.top)/n}},t.createCSSTransform=function(e,t){var n=f(e,t,"px");return u({},(0,i.browserPrefixToKey)("transform",i.default),n)},t.createSVGTransform=function(e,t){return f(e,t,"")},t.getTranslation=f,t.getTouch=function(e,t){return e.targetTouches&&(0,a.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,a.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},t.getTouchIdentifier=function(e){return e.targetTouches&&e.targetTouches[0]?e.targetTouches[0].identifier:e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].identifier:void 0},t.addUserSelectStyles=function(e){if(e){var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t)),e.body&&h(e.body,"react-draggable-transparent-selection")}},t.removeUserSelectStyles=function(e){if(e)try{if(e.body&&p(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},t.addClassName=h,t.removeClassName=p;var a=n(9280),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var l=a?Object.getOwnPropertyDescriptor(e,i):null;l&&(l.get||l.set)?Object.defineProperty(n,i,l):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n(8650));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c="";function d(e,t){return c||(c=(0,a.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,a.isFunction)(e[t])}))),!!(0,a.isFunction)(e[c])&&e[c](t)}function f(e,t,n){var r=e.x,a=e.y,i="translate(".concat(r).concat(n,",").concat(a).concat(n,")");if(t){var o="".concat("string"==typeof t.x?t.x:t.x+n),l="".concat("string"==typeof t.y?t.y:t.y+n);i="translate(".concat(o,", ").concat(l,")")+i}return i}function h(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function p(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}},8650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefix=r,t.browserPrefixToKey=a,t.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},t.default=void 0;var n=["Moz","Webkit","O","ms"];function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var r=0;r<n.length;r++)if(a(e,n[r])in t)return n[r];return""}function a(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var i=r();t.default=i},5904:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){}},2849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var o=e.props.bounds;o="string"==typeof o?o:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(o);var l=i(e);if("string"==typeof o){var s,u=l.ownerDocument,c=u.defaultView;if(!((s="parent"===o?l.parentNode:u.querySelector(o))instanceof c.HTMLElement))throw new Error('Bounds selector "'+o+'" could not find an element.');var d=c.getComputedStyle(l),f=c.getComputedStyle(s);o={left:-l.offsetLeft+(0,r.int)(f.paddingLeft)+(0,r.int)(d.marginLeft),top:-l.offsetTop+(0,r.int)(f.paddingTop)+(0,r.int)(d.marginTop),right:(0,a.innerWidth)(s)-(0,a.outerWidth)(l)-l.offsetLeft+(0,r.int)(f.paddingRight)-(0,r.int)(d.marginRight),bottom:(0,a.innerHeight)(s)-(0,a.outerHeight)(l)-l.offsetTop+(0,r.int)(f.paddingBottom)-(0,r.int)(d.marginBottom)}}return(0,r.isNum)(o.right)&&(t=Math.min(t,o.right)),(0,r.isNum)(o.bottom)&&(n=Math.min(n,o.bottom)),(0,r.isNum)(o.left)&&(t=Math.max(t,o.left)),(0,r.isNum)(o.top)&&(n=Math.max(n,o.top)),[t,n]},t.snapToGrid=function(e,t,n){return[Math.round(t/e[0])*e[0],Math.round(n/e[1])*e[1]]},t.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},t.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},t.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,a.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var o=i(n),l=n.props.offsetParent||o.offsetParent||o.ownerDocument.body;return(0,a.offsetXYFromParent)(r||e,l,n.props.scale)},t.createCoreData=function(e,t,n){var a=e.state,o=!(0,r.isNum)(a.lastX),l=i(e);return o?{node:l,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:l,deltaX:t-a.lastX,deltaY:n-a.lastY,lastX:a.lastX,lastY:a.lastY,x:t,y:n}},t.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var r=n(9280),a=n(1825);function i(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}},9280:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},t.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},t.isNum=function(e){return"number"==typeof e&&!isNaN(e)},t.int=function(e){return parseInt(e,10)},t.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))}},7287:(e,t,n)=>{(e=n.nmd(e)).exports=function(t){var r={},a=n(7418),i=n(7294),o=n(3840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,u=60103,c=60106,d=60107,f=60108,h=60114,p=60109,g=60110,m=60112,v=60113,y=60120,b=60115,_=60116,w=60121,x=60129,S=60130,E=60131;if("function"==typeof Symbol&&Symbol.for){var k=Symbol.for;u=k("react.element"),c=k("react.portal"),d=k("react.fragment"),f=k("react.strict_mode"),h=k("react.profiler"),p=k("react.provider"),g=k("react.context"),m=k("react.forward_ref"),v=k("react.suspense"),y=k("react.suspense_list"),b=k("react.memo"),_=k("react.lazy"),w=k("react.block"),k("react.scope"),x=k("react.debug_trace_mode"),S=k("react.offscreen"),E=k("react.legacy_hidden")}var C="function"==typeof Symbol&&Symbol.iterator;function P(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=C&&e[C]||e["@@iterator"])?e:null}function O(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case d:return"Fragment";case c:return"Portal";case h:return"Profiler";case f:return"StrictMode";case v:return"Suspense";case y:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Consumer";case p:return(e._context.displayName||"Context")+".Provider";case m:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case b:return O(e.type);case w:return O(e._render);case _:t=e._payload,e=e._init;try{return O(e(t))}catch(e){}}return null}function T(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function M(e){if(T(e)!==e)throw Error(l(188))}function N(e){var t=e.alternate;if(!t){if(null===(t=T(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return M(a),e;if(i===r)return M(a),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,s=a.child;s;){if(s===n){o=!0,n=a,r=i;break}if(s===r){o=!0,r=a,n=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===n){o=!0,n=i,r=a;break}if(s===r){o=!0,r=i,n=a;break}s=s.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}function R(e){if(!(e=N(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function L(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var A,D=t.getPublicInstance,I=t.getRootHostContext,z=t.getChildHostContext,j=t.prepareForCommit,F=t.resetAfterCommit,G=t.createInstance,B=t.appendInitialChild,U=t.finalizeInitialChildren,H=t.prepareUpdate,W=t.shouldSetTextContent,X=t.createTextInstance,V=t.scheduleTimeout,Y=t.cancelTimeout,Q=t.noTimeout,q=t.isPrimaryRenderer,$=t.supportsMutation,K=t.supportsPersistence,J=t.supportsHydration,Z=t.getInstanceFromNode,ee=t.makeOpaqueHydratingObject,te=t.makeClientId,ne=t.beforeActiveInstanceBlur,re=t.afterActiveInstanceBlur,ae=t.preparePortalMount,ie=t.supportsTestSelectors,oe=t.findFiberRoot,le=t.getBoundingRect,se=t.getTextContent,ue=t.isHiddenSubtree,ce=t.matchAccessibilityRole,de=t.setFocusIfFocusable,fe=t.setupIntersectionObserver,he=t.appendChild,pe=t.appendChildToContainer,ge=t.commitTextUpdate,me=t.commitMount,ve=t.commitUpdate,ye=t.insertBefore,be=t.insertInContainerBefore,_e=t.removeChild,we=t.removeChildFromContainer,xe=t.resetTextContent,Se=t.hideInstance,Ee=t.hideTextInstance,ke=t.unhideInstance,Ce=t.unhideTextInstance,Pe=t.clearContainer,Oe=t.cloneInstance,Te=t.createContainerChildSet,Me=t.appendChildToContainerChildSet,Ne=t.finalizeContainerChildren,Re=t.replaceContainerChildren,Le=t.cloneHiddenInstance,Ae=t.cloneHiddenTextInstance,De=t.canHydrateInstance,Ie=t.canHydrateTextInstance,ze=t.isSuspenseInstancePending,je=t.isSuspenseInstanceFallback,Fe=t.getNextHydratableSibling,Ge=t.getFirstHydratableChild,Be=t.hydrateInstance,Ue=t.hydrateTextInstance,He=t.getNextHydratableInstanceAfterSuspenseInstance,We=t.commitHydratedContainer,Xe=t.commitHydratedSuspenseInstance;function Ve(e){if(void 0===A)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);A=t&&t[1]||""}return"\n"+A+e}var Ye=!1;function Qe(e,t){if(!e||Ye)return"";Ye=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=r.stack.split("\n"),o=a.length-1,l=i.length-1;1<=o&&0<=l&&a[o]!==i[l];)l--;for(;1<=o&&0<=l;o--,l--)if(a[o]!==i[l]){if(1!==o||1!==l)do{if(o--,0>--l||a[o]!==i[l])return"\n"+a[o].replace(" at new "," at ")}while(1<=o&&0<=l);break}}}finally{Ye=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Ve(e):""}var qe=[],$e=-1;function Ke(e){return{current:e}}function Je(e){0>$e||(e.current=qe[$e],qe[$e]=null,$e--)}function Ze(e,t){$e++,qe[$e]=e.current,e.current=t}var et={},tt=Ke(et),nt=Ke(!1),rt=et;function at(e,t){var n=e.type.contextTypes;if(!n)return et;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function it(e){return null!=e.childContextTypes}function ot(){Je(nt),Je(tt)}function lt(e,t,n){if(tt.current!==et)throw Error(l(168));Ze(tt,t),Ze(nt,n)}function st(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(l(108,O(t)||"Unknown",i));return a({},n,r)}function ut(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||et,rt=tt.current,Ze(tt,e),Ze(nt,nt.current),!0}function ct(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=st(e,t,rt),r.__reactInternalMemoizedMergedChildContext=e,Je(nt),Je(tt),Ze(tt,e)):Je(nt),Ze(nt,n)}var dt=null,ft=null;(0,o.unstable_now)();var ht=0,pt=8;function gt(e){if(0!=(1&e))return pt=15,1;if(0!=(2&e))return pt=14,2;if(0!=(4&e))return pt=13,4;var t=24&e;return 0!==t?(pt=12,t):0!=(32&e)?(pt=11,32):0!=(t=192&e)?(pt=10,t):0!=(256&e)?(pt=9,256):0!=(t=3584&e)?(pt=8,t):0!=(4096&e)?(pt=7,4096):0!=(t=4186112&e)?(pt=6,t):0!=(t=62914560&e)?(pt=5,t):67108864&e?(pt=4,67108864):0!=(134217728&e)?(pt=3,134217728):0!=(t=805306368&e)?(pt=2,t):0!=(1073741824&e)?(pt=1,1073741824):(pt=8,e)}function mt(e,t){var n=e.pendingLanes;if(0===n)return pt=0;var r=0,a=0,i=e.expiredLanes,o=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,a=pt=15;else if(0!=(i=134217727&n)){var s=i&~o;0!==s?(r=gt(s),a=pt):0!=(l&=i)&&(r=gt(l),a=pt)}else 0!=(i=n&~o)?(r=gt(i),a=pt):0!==l&&(r=gt(l),a=pt);if(0===r)return 0;if(r=n&((0>(r=31-xt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(gt(t),a<=pt)return t;pt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-xt(t)),r|=e[n],t&=~a;return r}function vt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function yt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=bt(24&~t))?yt(10,t):e;case 10:return 0===(e=bt(192&~t))?yt(8,t):e;case 8:return 0===(e=bt(3584&~t))&&0===(e=bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=bt(805306368&~t))&&(t=268435456),t}throw Error(l(358,e))}function bt(e){return e&-e}function _t(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-xt(t)]=n}var xt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(St(e)/Et|0)|0},St=Math.log,Et=Math.LN2,kt=o.unstable_runWithPriority,Ct=o.unstable_scheduleCallback,Pt=o.unstable_cancelCallback,Ot=o.unstable_shouldYield,Tt=o.unstable_requestPaint,Mt=o.unstable_now,Nt=o.unstable_getCurrentPriorityLevel,Rt=o.unstable_ImmediatePriority,Lt=o.unstable_UserBlockingPriority,At=o.unstable_NormalPriority,Dt=o.unstable_LowPriority,It=o.unstable_IdlePriority,zt={},jt=void 0!==Tt?Tt:function(){},Ft=null,Gt=null,Bt=!1,Ut=Mt(),Ht=1e4>Ut?Mt:function(){return Mt()-Ut};function Wt(){switch(Nt()){case Rt:return 99;case Lt:return 98;case At:return 97;case Dt:return 96;case It:return 95;default:throw Error(l(332))}}function Xt(e){switch(e){case 99:return Rt;case 98:return Lt;case 97:return At;case 96:return Dt;case 95:return It;default:throw Error(l(332))}}function Vt(e,t){return e=Xt(e),kt(e,t)}function Yt(e,t,n){return e=Xt(e),Ct(e,t,n)}function Qt(){if(null!==Gt){var e=Gt;Gt=null,Pt(e)}qt()}function qt(){if(!Bt&&null!==Ft){Bt=!0;var e=0;try{var t=Ft;Vt(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ft=null}catch(t){throw null!==Ft&&(Ft=Ft.slice(e+1)),Ct(Rt,Qt),t}finally{Bt=!1}}}var $t=s.ReactCurrentBatchConfig,Kt="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Jt=Object.prototype.hasOwnProperty;function Zt(e,t){if(Kt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!Kt(e[n[r]],t[n[r]]))return!1;return!0}function en(e){switch(e.tag){case 5:return Ve(e.type);case 16:return Ve("Lazy");case 13:return Ve("Suspense");case 19:return Ve("SuspenseList");case 0:case 2:case 15:return Qe(e.type,!1);case 11:return Qe(e.type.render,!1);case 22:return Qe(e.type._render,!1);case 1:return Qe(e.type,!0);default:return""}}function tn(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var nn=Ke(null),rn=null,an=null,on=null;function ln(){on=an=rn=null}function sn(e,t){e=e.type._context,q?(Ze(nn,e._currentValue),e._currentValue=t):(Ze(nn,e._currentValue2),e._currentValue2=t)}function un(e){var t=nn.current;Je(nn),e=e.type._context,q?e._currentValue=t:e._currentValue2=t}function cn(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function dn(e,t){rn=e,on=an=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ur=!0),e.firstContext=null)}function fn(e,t){if(on!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(on=e,t=1073741823),t={context:e,observedBits:t,next:null},null===an){if(null===rn)throw Error(l(308));an=t,rn.dependencies={lanes:0,firstContext:t,responders:null}}else an=an.next=t;return q?e._currentValue:e._currentValue2}var hn=!1;function pn(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function gn(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function mn(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function vn(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function yn(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function bn(e,t,n,r){var i=e.updateQueue;hn=!1;var o=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?o=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==o){for(f=i.baseState,l=0,d=c=u=null;;){s=o.lane;var h=o.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:h,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,g=o;switch(s=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,s);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(s="function"==typeof(p=g.payload)?p.call(h,f,s):p))break e;f=a({},f,s);break e;case 2:hn=!0}}null!==o.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[o]:s.push(o))}else h={eventTime:h,lane:s,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===d?(c=d=h,u=f):d=d.next=h,l|=s;if(null===(o=o.next)){if(null===(s=i.shared.pending))break;o=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===d&&(u=f),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,ui|=l,e.lanes=l,e.memoizedState=f}}function _n(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var wn=(new i.Component).refs;function xn(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Sn={isMounted:function(e){return!!(e=e._reactInternals)&&T(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ai(),a=Di(e),i=mn(r,a);i.payload=t,null!=n&&(i.callback=n),vn(e,i),Ii(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ai(),a=Di(e),i=mn(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),vn(e,i),Ii(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ai(),r=Di(e),a=mn(n,r);a.tag=2,null!=t&&(a.callback=t),vn(e,a),Ii(e,r,n)}};function En(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&Zt(n,r)&&Zt(a,i))}function kn(e,t,n){var r=!1,a=et,i=t.contextType;return"object"==typeof i&&null!==i?i=fn(i):(a=it(t)?rt:tt.current,i=(r=null!=(r=t.contextTypes))?at(e,a):et),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Sn,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function Cn(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Sn.enqueueReplaceState(t,t.state,null)}function Pn(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=wn,pn(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=fn(i):(i=it(t)?rt:tt.current,a.context=at(e,i)),bn(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(xn(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Sn.enqueueReplaceState(a,a.state,null),bn(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var On=Array.isArray;function Tn(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===wn&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Mn(e,t){if("textarea"!==e.type)throw Error(l(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Nn(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=xo(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function o(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Co(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=Tn(e,t,n),r.return=e,r):((r=So(n.type,n.key,n.props,null,e.mode,r)).ref=Tn(e,t,n),r.return=e,r)}function h(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Po(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function p(e,t,n,r,i){return null===t||7!==t.tag?((t=Eo(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Co(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return(n=So(t.type,t.key,t.props,null,e.mode,n)).ref=Tn(e,null,t),n.return=e,n;case c:return(t=Po(t,e.mode,n)).return=e,t}if(On(t)||P(t))return(t=Eo(t,e.mode,n,null)).return=e,t;Mn(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===a?n.type===d?p(e,t,n.props.children,r,a):f(e,t,n,r):null;case c:return n.key===a?h(e,t,n,r):null}if(On(n)||P(n))return null!==a?null:p(e,t,n,r,null);Mn(e,n)}return null}function v(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return e=e.get(null===r.key?n:r.key)||null,r.type===d?p(t,e,r.props.children,a,r.key):f(t,e,r,a);case c:return h(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(On(r)||P(r))return p(t,e=e.get(n)||null,r,a,null);Mn(t,r)}return null}function y(a,o,l,s){for(var u=null,c=null,d=o,f=o=0,h=null;null!==d&&f<l.length;f++){d.index>f?(h=d,d=null):h=d.sibling;var p=m(a,d,l[f],s);if(null===p){null===d&&(d=h);break}e&&d&&null===p.alternate&&t(a,d),o=i(p,o,f),null===c?u=p:c.sibling=p,c=p,d=h}if(f===l.length)return n(a,d),u;if(null===d){for(;f<l.length;f++)null!==(d=g(a,l[f],s))&&(o=i(d,o,f),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(a,d);f<l.length;f++)null!==(h=v(d,a,f,l[f],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?f:h.key),o=i(h,o,f),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return t(a,e)})),u}function b(a,o,s,u){var c=P(s);if("function"!=typeof c)throw Error(l(150));if(null==(s=c.call(s)))throw Error(l(151));for(var d=c=null,f=o,h=o=0,p=null,y=s.next();null!==f&&!y.done;h++,y=s.next()){f.index>h?(p=f,f=null):p=f.sibling;var b=m(a,f,y.value,u);if(null===b){null===f&&(f=p);break}e&&f&&null===b.alternate&&t(a,f),o=i(b,o,h),null===d?c=b:d.sibling=b,d=b,f=p}if(y.done)return n(a,f),c;if(null===f){for(;!y.done;h++,y=s.next())null!==(y=g(a,y.value,u))&&(o=i(y,o,h),null===d?c=y:d.sibling=y,d=y);return c}for(f=r(a,f);!y.done;h++,y=s.next())null!==(y=v(f,a,h,y.value,u))&&(e&&null!==y.alternate&&f.delete(null===y.key?h:y.key),o=i(y,o,h),null===d?c=y:d.sibling=y,d=y);return e&&f.forEach((function(e){return t(a,e)})),c}return function(e,r,i,s){var f="object"==typeof i&&null!==i&&i.type===d&&null===i.key;f&&(i=i.props.children);var h="object"==typeof i&&null!==i;if(h)switch(i.$$typeof){case u:e:{for(h=i.key,f=r;null!==f;){if(f.key===h){switch(f.tag){case 7:if(i.type===d){n(e,f.sibling),(r=a(f,i.props.children)).return=e,e=r;break e}break;default:if(f.elementType===i.type){n(e,f.sibling),(r=a(f,i.props)).ref=Tn(e,f,i),r.return=e,e=r;break e}}n(e,f);break}t(e,f),f=f.sibling}i.type===d?((r=Eo(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=So(i.type,i.key,i.props,null,e.mode,s)).ref=Tn(e,r,i),s.return=e,e=s)}return o(e);case c:e:{for(f=i.key;null!==r;){if(r.key===f){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Po(i,e.mode,s)).return=e,e=r}return o(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=Co(i,e.mode,s)).return=e,e=r),o(e);if(On(i))return y(e,r,i,s);if(P(i))return b(e,r,i,s);if(h&&Mn(e,i),void 0===i&&!f)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(l(152,O(e.type)||"Component"))}return n(e,r)}}var Rn=Nn(!0),Ln=Nn(!1),An={},Dn=Ke(An),In=Ke(An),zn=Ke(An);function jn(e){if(e===An)throw Error(l(174));return e}function Fn(e,t){Ze(zn,t),Ze(In,e),Ze(Dn,An),e=I(t),Je(Dn),Ze(Dn,e)}function Gn(){Je(Dn),Je(In),Je(zn)}function Bn(e){var t=jn(zn.current),n=jn(Dn.current);n!==(t=z(n,e.type,t))&&(Ze(In,e),Ze(Dn,t))}function Un(e){In.current===e&&(Je(Dn),Je(In))}var Hn=Ke(0);function Wn(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||ze(n)||je(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Xn=null,Vn=null,Yn=!1;function Qn(e,t){var n=_o(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qn(e,t){switch(e.tag){case 5:return null!==(t=De(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=Ie(t,e.pendingProps))&&(e.stateNode=t,!0);case 13:default:return!1}}function $n(e){if(Yn){var t=Vn;if(t){var n=t;if(!qn(e,t)){if(!(t=Fe(n))||!qn(e,t))return e.flags=-1025&e.flags|2,Yn=!1,void(Xn=e);Qn(Xn,n)}Xn=e,Vn=Ge(t)}else e.flags=-1025&e.flags|2,Yn=!1,Xn=e}}function Kn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Xn=e}function Jn(e){if(!J||e!==Xn)return!1;if(!Yn)return Kn(e),Yn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!W(t,e.memoizedProps))for(t=Vn;t;)Qn(e,t),t=Fe(t);if(Kn(e),13===e.tag){if(!J)throw Error(l(316));if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));Vn=He(e)}else Vn=Xn?Fe(e.stateNode):null;return!0}function Zn(){J&&(Vn=Xn=null,Yn=!1)}var er=[];function tr(){for(var e=0;e<er.length;e++){var t=er[e];q?t._workInProgressVersionPrimary=null:t._workInProgressVersionSecondary=null}er.length=0}var nr=s.ReactCurrentDispatcher,rr=s.ReactCurrentBatchConfig,ar=0,ir=null,or=null,lr=null,sr=!1,ur=!1;function cr(){throw Error(l(321))}function dr(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Kt(e[n],t[n]))return!1;return!0}function fr(e,t,n,r,a,i){if(ar=i,ir=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,nr.current=null===e||null===e.memoizedState?jr:Fr,e=n(r,a),ur){i=0;do{if(ur=!1,!(25>i))throw Error(l(301));i+=1,lr=or=null,t.updateQueue=null,nr.current=Gr,e=n(r,a)}while(ur)}if(nr.current=zr,t=null!==or&&null!==or.next,ar=0,lr=or=ir=null,sr=!1,t)throw Error(l(300));return e}function hr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===lr?ir.memoizedState=lr=e:lr=lr.next=e,lr}function pr(){if(null===or){var e=ir.alternate;e=null!==e?e.memoizedState:null}else e=or.next;var t=null===lr?ir.memoizedState:lr.next;if(null!==t)lr=t,or=e;else{if(null===e)throw Error(l(310));e={memoizedState:(or=e).memoizedState,baseState:or.baseState,baseQueue:or.baseQueue,queue:or.queue,next:null},null===lr?ir.memoizedState=lr=e:lr=lr.next=e}return lr}function gr(e,t){return"function"==typeof t?t(e):t}function mr(e){var t=pr(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=or,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var s=o=i=null,u=a;do{var c=u.lane;if((ar&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(o=s=d,i=r):s=s.next=d,ir.lanes|=c,ui|=c}u=u.next}while(null!==u&&u!==a);null===s?i=r:s.next=o,Kt(r,t.memoizedState)||(Ur=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function vr(e){var t=pr(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);Kt(i,t.memoizedState)||(Ur=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function yr(e,t,n){var r=t._getVersion;r=r(t._source);var a=q?t._workInProgressVersionPrimary:t._workInProgressVersionSecondary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(ar&e)===e)&&(q?t._workInProgressVersionPrimary=r:t._workInProgressVersionSecondary=r,er.push(t))),e)return n(t._source);throw er.push(t),Error(l(350))}function br(e,t,n,r){var a=ti;if(null===a)throw Error(l(349));var i=t._getVersion,o=i(t._source),s=nr.current,u=s.useState((function(){return yr(a,t,n)})),c=u[1],d=u[0];u=lr;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=ir;return e.memoizedState={refs:h,source:t,subscribe:r},s.useEffect((function(){h.getSnapshot=n,h.setSnapshot=c;var e=i(t._source);if(!Kt(o,e)){e=n(t._source),Kt(d,e)||(c(e),e=Di(m),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,l=e;0<l;){var s=31-xt(l),u=1<<s;r[s]|=e,l&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=Di(m);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),Kt(p,n)&&Kt(g,t)&&Kt(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:gr,lastRenderedState:d}).dispatch=c=Ir.bind(null,ir,e),u.queue=e,u.baseQueue=null,d=yr(a,t,n),u.memoizedState=u.baseState=d),d}function _r(e,t,n){return br(pr(),e,t,n)}function wr(e){var t=hr();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:gr,lastRenderedState:e}).dispatch=Ir.bind(null,ir,e),[t.memoizedState,e]}function xr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ir.updateQueue)?(t={lastEffect:null},ir.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Sr(e){return e={current:e},hr().memoizedState=e}function Er(){return pr().memoizedState}function kr(e,t,n,r){var a=hr();ir.flags|=e,a.memoizedState=xr(1|t,n,void 0,void 0===r?null:r)}function Cr(e,t,n,r){var a=pr();r=void 0===r?null:r;var i=void 0;if(null!==or){var o=or.memoizedState;if(i=o.destroy,null!==r&&dr(r,o.deps))return void xr(t,n,i,r)}ir.flags|=e,a.memoizedState=xr(1|t,n,i,r)}function Pr(e,t){return kr(516,4,e,t)}function Or(e,t){return Cr(516,4,e,t)}function Tr(e,t){return Cr(4,2,e,t)}function Mr(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Nr(e,t,n){return n=null!=n?n.concat([e]):null,Cr(4,2,Mr.bind(null,t,e),n)}function Rr(){}function Lr(e,t){var n=pr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&dr(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ar(e,t){var n=pr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&dr(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Dr(e,t){var n=Wt();Vt(98>n?98:n,(function(){e(!0)})),Vt(97<n?97:n,(function(){var n=rr.transition;rr.transition=1;try{e(!1),t()}finally{rr.transition=n}}))}function Ir(e,t,n){var r=Ai(),a=Di(e),i={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===ir||null!==o&&o===ir)ur=sr=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=o(l,n);if(i.eagerReducer=o,i.eagerState=s,Kt(s,l))return}catch(e){}Ii(e,a,r)}}var zr={readContext:fn,useCallback:cr,useContext:cr,useEffect:cr,useImperativeHandle:cr,useLayoutEffect:cr,useMemo:cr,useReducer:cr,useRef:cr,useState:cr,useDebugValue:cr,useDeferredValue:cr,useTransition:cr,useMutableSource:cr,useOpaqueIdentifier:cr,unstable_isNewReconciler:!1},jr={readContext:fn,useCallback:function(e,t){return hr().memoizedState=[e,void 0===t?null:t],e},useContext:fn,useEffect:Pr,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,kr(4,2,Mr.bind(null,t,e),n)},useLayoutEffect:function(e,t){return kr(4,2,e,t)},useMemo:function(e,t){var n=hr();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=hr();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ir.bind(null,ir,e),[r.memoizedState,e]},useRef:Sr,useState:wr,useDebugValue:Rr,useDeferredValue:function(e){var t=wr(e),n=t[0],r=t[1];return Pr((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=wr(!1),t=e[0];return Sr(e=Dr.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=hr();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},br(r,e,t,n)},useOpaqueIdentifier:function(){if(Yn){var e=!1,t=ee((function(){throw e||(e=!0,n(te())),Error(l(355))})),n=wr(t)[1];return 0==(2&ir.mode)&&(ir.flags|=516,xr(5,(function(){n(te())}),void 0,null)),t}return wr(t=te()),t},unstable_isNewReconciler:!1},Fr={readContext:fn,useCallback:Lr,useContext:fn,useEffect:Or,useImperativeHandle:Nr,useLayoutEffect:Tr,useMemo:Ar,useReducer:mr,useRef:Er,useState:function(){return mr(gr)},useDebugValue:Rr,useDeferredValue:function(e){var t=mr(gr),n=t[0],r=t[1];return Or((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=mr(gr)[0];return[Er().current,e]},useMutableSource:_r,useOpaqueIdentifier:function(){return mr(gr)[0]},unstable_isNewReconciler:!1},Gr={readContext:fn,useCallback:Lr,useContext:fn,useEffect:Or,useImperativeHandle:Nr,useLayoutEffect:Tr,useMemo:Ar,useReducer:vr,useRef:Er,useState:function(){return vr(gr)},useDebugValue:Rr,useDeferredValue:function(e){var t=vr(gr),n=t[0],r=t[1];return Or((function(){var t=rr.transition;rr.transition=1;try{r(e)}finally{rr.transition=t}}),[e]),n},useTransition:function(){var e=vr(gr)[0];return[Er().current,e]},useMutableSource:_r,useOpaqueIdentifier:function(){return vr(gr)[0]},unstable_isNewReconciler:!1},Br=s.ReactCurrentOwner,Ur=!1;function Hr(e,t,n,r){t.child=null===e?Ln(t,null,n,r):Rn(t,e.child,n,r)}function Wr(e,t,n,r,a){n=n.render;var i=t.ref;return dn(t,a),r=fr(e,t,n,r,i,a),null===e||Ur?(t.flags|=1,Hr(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ua(e,t,a))}function Xr(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||wo(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=So(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Vr(e,t,o,r,a,i))}return o=e.child,0==(a&i)&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:Zt)(a,r)&&e.ref===t.ref)?ua(e,t,i):(t.flags|=1,(e=xo(o,r)).ref=t.ref,e.return=t,t.child=e)}function Vr(e,t,n,r,a,i){if(null!==e&&Zt(e.memoizedProps,r)&&e.ref===t.ref){if(Ur=!1,0==(i&a))return t.lanes=e.lanes,ua(e,t,i);0!=(16384&e.flags)&&(Ur=!0)}return qr(e,t,n,r,i)}function Yr(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},Wi(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},Wi(0,e),null;t.memoizedState={baseLanes:0},Wi(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Wi(0,r);return Hr(e,t,a,n),t.child}function Qr(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qr(e,t,n,r,a){var i=it(n)?rt:tt.current;return i=at(t,i),dn(t,a),n=fr(e,t,n,r,i,a),null===e||Ur?(t.flags|=1,Hr(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,ua(e,t,a))}function $r(e,t,n,r,a){if(it(n)){var i=!0;ut(t)}else i=!1;if(dn(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),kn(t,n,r),Pn(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var s=o.context,u=n.contextType;u="object"==typeof u&&null!==u?fn(u):at(t,u=it(n)?rt:tt.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||s!==u)&&Cn(t,o,r,u),hn=!1;var f=t.memoizedState;o.state=f,bn(t,r,o,a),s=t.memoizedState,l!==r||f!==s||nt.current||hn?("function"==typeof c&&(xn(t,n,c,r),s=t.memoizedState),(l=hn||En(t,n,l,r,f,s,u))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=u,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,gn(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:tn(t.type,l),o.props=u,d=t.pendingProps,f=o.context,s="object"==typeof(s=n.contextType)&&null!==s?fn(s):at(t,s=it(n)?rt:tt.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==d||f!==s)&&Cn(t,o,r,s),hn=!1,f=t.memoizedState,o.state=f,bn(t,r,o,a);var p=t.memoizedState;l!==d||f!==p||nt.current||hn?("function"==typeof h&&(xn(t,n,h,r),p=t.memoizedState),(u=hn||En(t,n,u,r,f,p,s))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=s,r=u):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Kr(e,t,n,r,i,a)}function Kr(e,t,n,r,a,i){Qr(e,t);var o=0!=(64&t.flags);if(!r&&!o)return a&&ct(t,n,!1),ua(e,t,i);r=t.stateNode,Br.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Rn(t,e.child,null,i),t.child=Rn(t,null,l,i)):Hr(e,t,l,i),t.memoizedState=r.state,a&&ct(t,n,!0),t.child}function Jr(e){var t=e.stateNode;t.pendingContext?lt(0,t.pendingContext,t.pendingContext!==t.context):t.context&&lt(0,t.context,!1),Fn(e,t.containerInfo)}var Zr,ea,ta,na,ra={dehydrated:null,retryLane:0};function aa(e,t,n){var r,a=t.pendingProps,i=Hn.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),Ze(Hn,1&i),null===e?(void 0!==a.fallback&&$n(t),e=a.children,i=a.fallback,o?(e=ia(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ra,e):"number"==typeof a.unstable_expectedLoadTime?(e=ia(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ra,t.lanes=33554432,e):((n=ko({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(a=function(e,t,n,r,a){var i=t.mode,o=e.child;e=o.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=l,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=xo(o,l),null!==e?r=xo(e,r):(r=Eo(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=ra,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=xo(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function ia(e,t,n,r){var a=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=ko(t,a,0,null),n=Eo(n,a,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function oa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),cn(e.return,t)}function la(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a,o.lastEffect=i)}function sa(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Hr(e,t,r.children,n),0!=(2&(r=Hn.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&oa(e,n);else if(19===e.tag)oa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ze(Hn,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Wn(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),la(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Wn(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}la(t,!0,n,null,i,t.lastEffect);break;case"together":la(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ua(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ui|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=xo(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=xo(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ca(e){e.flags|=4}if($)Zr=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)B(e,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ea=function(){},ta=function(e,t,n,r,a){if((e=e.memoizedProps)!==r){var i=t.stateNode,o=jn(Dn.current);n=H(i,n,e,r,a,o),(t.updateQueue=n)&&ca(t)}},na=function(e,t,n,r){n!==r&&ca(t)};else if(K){Zr=function(e,t,n,r){for(var a=t.child;null!==a;){if(5===a.tag){var i=a.stateNode;n&&r&&(i=Le(i,a.type,a.memoizedProps,a)),B(e,i)}else if(6===a.tag)i=a.stateNode,n&&r&&(i=Ae(i,a.memoizedProps,a)),B(e,i);else if(4!==a.tag){if(13===a.tag&&0!=(4&a.flags)&&(i=null!==a.memoizedState)){var o=a.child;if(null!==o&&(null!==o.child&&(o.child.return=o,Zr(e,o,!0,i)),null!==(i=o.sibling))){i.return=a,a=i;continue}}if(null!==a.child){a.child.return=a,a=a.child;continue}}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};var da=function(e,t,n,r){for(var a=t.child;null!==a;){if(5===a.tag){var i=a.stateNode;n&&r&&(i=Le(i,a.type,a.memoizedProps,a)),Me(e,i)}else if(6===a.tag)i=a.stateNode,n&&r&&(i=Ae(i,a.memoizedProps,a)),Me(e,i);else if(4!==a.tag){if(13===a.tag&&0!=(4&a.flags)&&(i=null!==a.memoizedState)){var o=a.child;if(null!==o&&(null!==o.child&&(o.child.return=o,da(e,o,!0,i)),null!==(i=o.sibling))){i.return=a,a=i;continue}}if(null!==a.child){a.child.return=a,a=a.child;continue}}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};ea=function(e){var t=e.stateNode;if(null!==e.firstEffect){var n=t.containerInfo,r=Te(n);da(r,e,!1,!1),t.pendingChildren=r,ca(e),Ne(n,r)}},ta=function(e,t,n,r,a){var i=e.stateNode,o=e.memoizedProps;if((e=null===t.firstEffect)&&o===r)t.stateNode=i;else{var l=t.stateNode,s=jn(Dn.current),u=null;o!==r&&(u=H(l,n,o,r,a,s)),e&&null===u?t.stateNode=i:(i=Oe(i,u,n,o,r,t,e,l),U(i,n,r,a,s)&&ca(t),t.stateNode=i,e?ca(t):Zr(i,t,!1,!1))}},na=function(e,t,n,r){n!==r?(e=jn(zn.current),n=jn(Dn.current),t.stateNode=X(r,e,n,t),ca(t)):t.stateNode=e.stateNode}}else ea=function(){},ta=function(){},na=function(){};function fa(e,t){if(!Yn)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ha(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return it(t.type)&&ot(),null;case 3:return Gn(),Je(nt),Je(tt),tr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Jn(t)?ca(t):r.hydrate||(t.flags|=256)),ea(t),null;case 5:Un(t);var a=jn(zn.current);if(n=t.type,null!==e&&null!=t.stateNode)ta(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(l(166));return null}if(e=jn(Dn.current),Jn(t)){if(!J)throw Error(l(175));e=Be(t.stateNode,t.type,t.memoizedProps,a,e,t),t.updateQueue=e,null!==e&&ca(t)}else{var i=G(n,r,a,e,t);Zr(i,t,!1,!1),t.stateNode=i,U(i,n,r,a,e)&&ca(t)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)na(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=jn(zn.current),a=jn(Dn.current),Jn(t)){if(!J)throw Error(l(176));Ue(t.stateNode,t.memoizedProps,t)&&ca(t)}else t.stateNode=X(r,e,a,t)}return null;case 13:return Je(Hn),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,a=!1,null===e?void 0!==t.memoizedProps.fallback&&Jn(t):a=null!==e.memoizedState,r&&!a&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Hn.current)?0===oi&&(oi=3):(0!==oi&&3!==oi||(oi=4),null===ti||0==(134217727&ui)&&0==(134217727&ci)||Gi(ti,ri))),K&&r&&(t.flags|=4),$&&(r||a)&&(t.flags|=4),null);case 4:return Gn(),ea(t),null===e&&ae(t.stateNode.containerInfo),null;case 10:return un(t),null;case 17:return it(t.type)&&ot(),null;case 19:if(Je(Hn),null===(r=t.memoizedState))return null;if(a=0!=(64&t.flags),null===(i=r.rendering))if(a)fa(r,!1);else{if(0!==oi||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(i=Wn(e))){for(t.flags|=64,fa(r,!1),null!==(e=i.updateQueue)&&(t.updateQueue=e,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,e=n,r=t.child;null!==r;)n=e,(a=r).flags&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(i=a.alternate)?(a.childLanes=0,a.lanes=n,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=i.childLanes,a.lanes=i.lanes,a.child=i.child,a.memoizedProps=i.memoizedProps,a.memoizedState=i.memoizedState,a.updateQueue=i.updateQueue,a.type=i.type,n=i.dependencies,a.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),r=r.sibling;return Ze(Hn,1&Hn.current|2),t.child}e=e.sibling}null!==r.tail&&Ht()>pi&&(t.flags|=64,a=!0,fa(r,!1),t.lanes=33554432)}else{if(!a)if(null!==(e=Wn(i))){if(t.flags|=64,a=!0,null!==(e=e.updateQueue)&&(t.updateQueue=e,t.flags|=4),fa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!i.alternate&&!Yn)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ht()-r.renderingStartTime>pi&&1073741824!==n&&(t.flags|=64,a=!0,fa(r,!1),t.lanes=33554432);r.isBackwards?(i.sibling=t.child,t.child=i):(null!==(e=r.last)?e.sibling=i:t.child=i,r.last=i)}return null!==r.tail?(e=r.tail,r.rendering=e,r.tail=e.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ht(),e.sibling=null,t=Hn.current,Ze(Hn,a?1&t|2:1&t),e):null;case 23:case 24:return Xi(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(l(156,t.tag))}function pa(e){switch(e.tag){case 1:it(e.type)&&ot();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Gn(),Je(nt),Je(tt),tr(),0!=(64&(t=e.flags)))throw Error(l(285));return e.flags=-4097&t|64,e;case 5:return Un(e),null;case 13:return Je(Hn),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return Je(Hn),null;case 4:return Gn(),null;case 10:return un(e),null;case 23:case 24:return Xi(),null;default:return null}}function ga(e,t){try{var n="",r=t;do{n+=en(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ma(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var va="function"==typeof WeakMap?WeakMap:Map;function ya(e,t,n){(n=mn(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){yi||(yi=!0,bi=r),ma(0,t)},n}function ba(e,t,n){(n=mn(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ma(0,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===_i?_i=new Set([this]):_i.add(this),ma(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var _a="function"==typeof WeakSet?WeakSet:Set;function wa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){so(e,t)}else t.current=null}function xa(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:tn(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void($&&256&t.flags&&Pe(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(l(163))}function Sa(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function Ea(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(io(n,e),ao(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:tn(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&_n(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=D(n.child.stateNode);break;case 1:e=n.child.stateNode}_n(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&me(e,n.type,n.memoizedProps,n));case 6:case 4:case 12:return;case 13:return void(J&&null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Xe(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(l(163))}function ka(e,t){if($)for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?Se(r):ke(n.stateNode,n.memoizedProps)}else if(6===n.tag)r=n.stateNode,t?Ee(r):Ce(r,n.memoizedProps);else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Ca(e,t){if(ft&&"function"==typeof ft.onCommitFiberUnmount)try{ft.onCommitFiberUnmount(dt,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))io(t,n);else{r=t;try{a()}catch(e){so(r,e)}}n=n.next}while(n!==e)}break;case 1:if(wa(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){so(t,e)}break;case 5:wa(t);break;case 4:$?La(e,t):K&&K&&(t=t.stateNode.containerInfo,e=Te(t),Re(t,e))}}function Pa(e,t){for(var n=t;;)if(Ca(e,n),null===n.child||$&&4===n.tag){if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Oa(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function Ta(e){return 5===e.tag||3===e.tag||4===e.tag}function Ma(e){if($){e:{for(var t=e.return;null!==t;){if(Ta(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(l(161))}16&n.flags&&(xe(t),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ta(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Na(e,n,t):Ra(e,n,t)}}function Na(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?be(n,e,t):pe(n,e);else if(4!==r&&null!==(e=e.child))for(Na(e,t,n),e=e.sibling;null!==e;)Na(e,t,n),e=e.sibling}function Ra(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?ye(n,e,t):he(n,e);else if(4!==r&&null!==(e=e.child))for(Ra(e,t,n),e=e.sibling;null!==e;)Ra(e,t,n),e=e.sibling}function La(e,t){for(var n,r,a=t,i=!1;;){if(!i){i=a.return;e:for(;;){if(null===i)throw Error(l(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===a.tag||6===a.tag)Pa(e,a),r?we(n,a.stateNode):_e(n,a.stateNode);else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(Ca(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(i=!1)}a.sibling.return=a.return,a=a.sibling}}function Aa(e,t){if($){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void Sa(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var a=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&ve(n,i,a,e,r,t)}return;case 6:if(null===t.stateNode)throw Error(l(162));return n=t.memoizedProps,void ge(t.stateNode,null!==e?e.memoizedProps:n,n);case 3:return void(J&&(t=t.stateNode,t.hydrate&&(t.hydrate=!1,We(t.containerInfo))));case 12:return;case 13:return Da(t),void Ia(t);case 19:return void Ia(t);case 17:return;case 23:case 24:return void ka(t,null!==t.memoizedState)}throw Error(l(163))}switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void Sa(3,t);case 12:return;case 13:return Da(t),void Ia(t);case 19:return void Ia(t);case 3:J&&(n=t.stateNode).hydrate&&(n.hydrate=!1,We(n.containerInfo));break;case 23:case 24:return}e:if(K){switch(t.tag){case 1:case 5:case 6:case 20:break e;case 3:case 4:t=t.stateNode,Re(t.containerInfo,t.pendingChildren);break e}throw Error(l(163))}}function Da(e){null!==e.memoizedState&&(hi=Ht(),$&&ka(e.child,!0))}function Ia(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new _a),t.forEach((function(t){var r=co.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function za(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ja=0,Fa=1,Ga=2,Ba=3,Ua=4;if("function"==typeof Symbol&&Symbol.for){var Ha=Symbol.for;ja=Ha("selector.component"),Fa=Ha("selector.has_pseudo_class"),Ga=Ha("selector.role"),Ba=Ha("selector.test_id"),Ua=Ha("selector.text")}function Wa(e){var t=Z(e);if(null!=t){if("string"!=typeof t.memoizedProps["data-testname"])throw Error(l(364));return t}if(null===(e=oe(e)))throw Error(l(362));return e.stateNode.current}function Xa(e,t){switch(t.$$typeof){case ja:if(e.type===t.value)return!0;break;case Fa:e:{t=t.value,e=[e,0];for(var n=0;n<e.length;){var r=e[n++],a=e[n++],i=t[a];if(5!==r.tag||!ue(r)){for(;null!=i&&Xa(r,i);)i=t[++a];if(a===t.length){t=!0;break e}for(r=r.child;null!==r;)e.push(r,a),r=r.sibling}}t=!1}return t;case Ga:if(5===e.tag&&ce(e.stateNode,t.value))return!0;break;case Ua:if((5===e.tag||6===e.tag)&&null!==(e=se(e))&&0<=e.indexOf(t.value))return!0;break;case Ba:if(5===e.tag&&"string"==typeof(e=e.memoizedProps["data-testname"])&&e.toLowerCase()===t.value.toLowerCase())return!0;break;default:throw Error(l(365,t))}return!1}function Va(e){switch(e.$$typeof){case ja:return"<"+(O(e.value)||"Unknown")+">";case Fa:return":has("+(Va(e)||"")+")";case Ga:return'[role="'+e.value+'"]';case Ua:return'"'+e.value+'"';case Ba:return'[data-testname="'+e.value+'"]';default:throw Error(l(365,e))}}function Ya(e,t){var n=[];e=[e,0];for(var r=0;r<e.length;){var a=e[r++],i=e[r++],o=t[i];if(5!==a.tag||!ue(a)){for(;null!=o&&Xa(a,o);)o=t[++i];if(i===t.length)n.push(a);else for(a=a.child;null!==a;)e.push(a,i),a=a.sibling}}return n}function Qa(e,t){if(!ie)throw Error(l(363));e=Ya(e=Wa(e),t),t=[],e=Array.from(e);for(var n=0;n<e.length;){var r=e[n++];if(5===r.tag)ue(r)||t.push(r.stateNode);else for(r=r.child;null!==r;)e.push(r),r=r.sibling}return t}var qa=null,$a=Math.ceil,Ka=s.ReactCurrentDispatcher,Ja=s.ReactCurrentOwner,Za=s.IsSomeRendererActing,ei=0,ti=null,ni=null,ri=0,ai=0,ii=Ke(0),oi=0,li=null,si=0,ui=0,ci=0,di=0,fi=null,hi=0,pi=1/0;function gi(){pi=Ht()+500}var mi,vi=null,yi=!1,bi=null,_i=null,wi=!1,xi=null,Si=90,Ei=[],ki=[],Ci=null,Pi=0,Oi=null,Ti=-1,Mi=0,Ni=0,Ri=null,Li=!1;function Ai(){return 0!=(48&ei)?Ht():-1!==Ti?Ti:Ti=Ht()}function Di(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wt()?1:2;if(0===Mi&&(Mi=si),0!==$t.transition){0!==Ni&&(Ni=null!==fi?fi.pendingLanes:0),e=Mi;var t=4186112&~Ni;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wt(),e=yt(0!=(4&ei)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),Mi)}function Ii(e,t,n){if(50<Pi)throw Pi=0,Oi=null,Error(l(185));if(null===(e=zi(e,t)))return null;wt(e,t,n),e===ti&&(ci|=t,4===oi&&Gi(e,ri));var r=Wt();1===t?0!=(8&ei)&&0==(48&ei)?Bi(e):(ji(e,n),0===ei&&(gi(),Qt())):(0==(4&ei)||98!==r&&99!==r||(null===Ci?Ci=new Set([e]):Ci.add(e)),ji(e,n)),fi=e}function zi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ji(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var s=31-xt(o),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&a)){c=t,gt(u);var d=pt;i[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);o&=~u}if(r=mt(e,e===ti?ri:0),t=pt,0===r)null!==n&&(n!==zt&&Pt(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==zt&&Pt(n)}15===t?(n=Bi.bind(null,e),null===Ft?(Ft=[n],Gt=Ct(Rt,qt)):Ft.push(n),n=zt):n=14===t?Yt(99,Bi.bind(null,e)):Yt(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(l(358,e))}}(t),Fi.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function Fi(e){if(Ti=-1,Ni=Mi=0,0!=(48&ei))throw Error(l(327));var t=e.callbackNode;if(ro()&&e.callbackNode!==t)return null;var n=mt(e,e===ti?ri:0);if(0===n)return null;var r=n,a=ei;ei|=16;var i=Qi();for(ti===e&&ri===r||(gi(),Vi(e,r));;)try{Ki();break}catch(t){Yi(e,t)}if(ln(),Ka.current=i,ei=a,null!==ni?r=0:(ti=null,ri=0,r=oi),0!=(si&ci))Vi(e,0);else if(0!==r){if(2===r&&(ei|=64,e.hydrate&&(e.hydrate=!1,Pe(e.containerInfo)),0!==(n=vt(e))&&(r=qi(e,n))),1===r)throw t=li,Vi(e,0),Gi(e,n),ji(e,Ht()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(l(345));case 2:eo(e);break;case 3:if(Gi(e,n),(62914560&n)===n&&10<(r=hi+500-Ht())){if(0!==mt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){Ai(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=V(eo.bind(null,e),r);break}eo(e);break;case 4:if(Gi(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var o=31-xt(n);i=1<<o,(o=r[o])>a&&(a=o),n&=~i}if(n=a,10<(n=(120>(n=Ht()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*$a(n/1960))-n)){e.timeoutHandle=V(eo.bind(null,e),n);break}eo(e);break;case 5:eo(e);break;default:throw Error(l(329))}}return ji(e,Ht()),e.callbackNode===t?Fi.bind(null,e):null}function Gi(e,t){for(t&=~di,t&=~ci,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-xt(t),r=1<<n;e[n]=-1,t&=~r}}function Bi(e){if(0!=(48&ei))throw Error(l(327));if(ro(),e===ti&&0!=(e.expiredLanes&ri)){var t=ri,n=qi(e,t);0!=(si&ci)&&(n=qi(e,t=mt(e,t)))}else n=qi(e,t=mt(e,0));if(0!==e.tag&&2===n&&(ei|=64,e.hydrate&&(e.hydrate=!1,Pe(e.containerInfo)),0!==(t=vt(e))&&(n=qi(e,t))),1===n)throw n=li,Vi(e,0),Gi(e,t),ji(e,Ht()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,eo(e),ji(e,Ht()),null}function Ui(e,t){var n=ei;ei|=1;try{return e(t)}finally{0===(ei=n)&&(gi(),Qt())}}function Hi(e,t){var n=ei;if(0!=(48&n))return e(t);ei|=1;try{if(e)return Vt(99,e.bind(null,t))}finally{ei=n,Qt()}}function Wi(e,t){Ze(ii,ai),ai|=t,si|=t}function Xi(){ai=ii.current,Je(ii)}function Vi(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==Q&&(e.timeoutHandle=Q,Y(n)),null!==ni)for(n=ni.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ot();break;case 3:Gn(),Je(nt),Je(tt),tr();break;case 5:Un(r);break;case 4:Gn();break;case 13:case 19:Je(Hn);break;case 10:un(r);break;case 23:case 24:Xi()}n=n.return}ti=e,ni=xo(e.current,null),ri=ai=si=t,oi=0,li=null,di=ci=ui=0}function Yi(e,t){for(;;){var n=ni;try{if(ln(),nr.current=zr,sr){for(var r=ir.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}sr=!1}if(ar=0,lr=or=ir=null,ur=!1,Ja.current=null,null===n||null===n.return){oi=1,li=t,ni=null;break}e:{var i=e,o=n.return,l=n,s=t;if(t=ri,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Hn.current),f=o;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=mn(-1,1);y.tag=2,vn(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new va,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var _=uo.bind(null,i,u,l);u.then(_,_)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error((O(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==oi&&(oi=2),s=ga(s,l),f=o;do{switch(f.tag){case 3:i=s,f.flags|=4096,t&=-t,f.lanes|=t,yn(f,ya(0,i,t));break e;case 1:i=s;var w=f.type,x=f.stateNode;if(0==(64&f.flags)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===_i||!_i.has(x)))){f.flags|=4096,t&=-t,f.lanes|=t,yn(f,ba(f,i,t));break e}}f=f.return}while(null!==f)}Zi(n)}catch(e){t=e,ni===n&&null!==n&&(ni=n=n.return);continue}break}}function Qi(){var e=Ka.current;return Ka.current=zr,null===e?zr:e}function qi(e,t){var n=ei;ei|=16;var r=Qi();for(ti===e&&ri===t||Vi(e,t);;)try{$i();break}catch(t){Yi(e,t)}if(ln(),ei=n,Ka.current=r,null!==ni)throw Error(l(261));return ti=null,ri=0,oi}function $i(){for(;null!==ni;)Ji(ni)}function Ki(){for(;null!==ni&&!Ot();)Ji(ni)}function Ji(e){var t=mi(e.alternate,e,ai);e.memoizedProps=e.pendingProps,null===t?Zi(e):ni=t,Ja.current=null}function Zi(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ha(n,t,ai)))return void(ni=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&ai)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=pa(t)))return n.flags&=2047,void(ni=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ni=t);ni=t=e}while(null!==t);0===oi&&(oi=5)}function eo(e){var t=Wt();return Vt(99,to.bind(null,e,t)),null}function to(e,t){do{ro()}while(null!==xi);if(0!=(48&ei))throw Error(l(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,i=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var o=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-xt(i),c=1<<u;a[u]=0,o[u]=-1,s[u]=-1,i&=~c}if(null!==Ci&&0==(24&r)&&Ci.has(e)&&Ci.delete(e),e===ti&&(ni=ti=null,ri=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){a=ei,ei|=32,Ja.current=null,Ri=j(e.containerInfo),Li=!1,vi=r;do{try{no()}catch(e){if(null===vi)throw Error(l(330));so(vi,e),vi=vi.nextEffect}}while(null!==vi);Ri=null,vi=r;do{try{for(o=e;null!==vi;){var d=vi.flags;if(16&d&&$&&xe(vi.stateNode),128&d){var f=vi.alternate;if(null!==f){var h=f.ref;null!==h&&("function"==typeof h?h(null):h.current=null)}}switch(1038&d){case 2:Ma(vi),vi.flags&=-3;break;case 6:Ma(vi),vi.flags&=-3,Aa(vi.alternate,vi);break;case 1024:vi.flags&=-1025;break;case 1028:vi.flags&=-1025,Aa(vi.alternate,vi);break;case 4:Aa(vi.alternate,vi);break;case 8:s=o,i=vi,$?La(s,i):Pa(s,i);var p=i.alternate;Oa(i),null!==p&&Oa(p)}vi=vi.nextEffect}}catch(e){if(null===vi)throw Error(l(330));so(vi,e),vi=vi.nextEffect}}while(null!==vi);Li&&re(),F(e.containerInfo),e.current=n,vi=r;do{try{for(d=e;null!==vi;){var g=vi.flags;if(36&g&&Ea(d,vi.alternate,vi),128&g){f=void 0;var m=vi.ref;if(null!==m){var v=vi.stateNode;switch(vi.tag){case 5:f=D(v);break;default:f=v}"function"==typeof m?m(f):m.current=f}}vi=vi.nextEffect}}catch(e){if(null===vi)throw Error(l(330));so(vi,e),vi=vi.nextEffect}}while(null!==vi);vi=null,jt(),ei=a}else e.current=n;if(wi)wi=!1,xi=e,Si=t;else for(vi=r;null!==vi;)t=vi.nextEffect,vi.nextEffect=null,8&vi.flags&&((g=vi).sibling=null,g.stateNode=null),vi=t;if(0===(r=e.pendingLanes)&&(_i=null),1===r?e===Oi?Pi++:(Pi=0,Oi=e):Pi=0,n=n.stateNode,ft&&"function"==typeof ft.onCommitFiberRoot)try{ft.onCommitFiberRoot(dt,n,void 0,64==(64&n.current.flags))}catch(e){}if(ji(e,Ht()),yi)throw yi=!1,e=bi,bi=null,e;return 0!=(8&ei)||Qt(),null}function no(){for(;null!==vi;){var e=vi.alternate;Li||null===Ri||(0!=(8&vi.flags)?L(vi,Ri)&&(Li=!0,ne()):13===vi.tag&&za(e,vi)&&L(vi,Ri)&&(Li=!0,ne()));var t=vi.flags;0!=(256&t)&&xa(e,vi),0==(512&t)||wi||(wi=!0,Yt(97,(function(){return ro(),null}))),vi=vi.nextEffect}}function ro(){if(90!==Si){var e=97<Si?97:Si;return Si=90,Vt(e,oo)}return!1}function ao(e,t){Ei.push(t,e),wi||(wi=!0,Yt(97,(function(){return ro(),null})))}function io(e,t){ki.push(t,e),wi||(wi=!0,Yt(97,(function(){return ro(),null})))}function oo(){if(null===xi)return!1;var e=xi;if(xi=null,0!=(48&ei))throw Error(l(331));var t=ei;ei|=32;var n=ki;ki=[];for(var r=0;r<n.length;r+=2){var a=n[r],i=n[r+1],o=a.destroy;if(a.destroy=void 0,"function"==typeof o)try{o()}catch(e){if(null===i)throw Error(l(330));so(i,e)}}for(n=Ei,Ei=[],r=0;r<n.length;r+=2){a=n[r],i=n[r+1];try{var s=a.create;a.destroy=s()}catch(e){if(null===i)throw Error(l(330));so(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return ei=t,Qt(),!0}function lo(e,t,n){vn(e,t=ya(0,t=ga(n,t),1)),t=Ai(),null!==(e=zi(e,1))&&(wt(e,1,t),ji(e,t))}function so(e,t){if(3===e.tag)lo(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){lo(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===_i||!_i.has(r))){var a=ba(n,e=ga(t,e),1);if(vn(n,a),a=Ai(),null!==(n=zi(n,1)))wt(n,1,a),ji(n,a);else if("function"==typeof r.componentDidCatch&&(null===_i||!_i.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function uo(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Ai(),e.pingedLanes|=e.suspendedLanes&n,ti===e&&(ri&n)===n&&(4===oi||3===oi&&(62914560&ri)===ri&&500>Ht()-hi?Vi(e,0):di|=n),ji(e,t)}function co(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wt()?1:2:(0===Mi&&(Mi=si),0===(t=bt(62914560&~Mi))&&(t=4194304))),n=Ai(),null!==(e=zi(e,t))&&(wt(e,t,n),ji(e,n))}mi=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||nt.current)Ur=!0;else{if(0==(n&r)){switch(Ur=!1,t.tag){case 3:Jr(t),Zn();break;case 5:Bn(t);break;case 1:it(t.type)&&ut(t);break;case 4:Fn(t,t.stateNode.containerInfo);break;case 10:sn(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?aa(e,t,n):(Ze(Hn,1&Hn.current),null!==(t=ua(e,t,n))?t.sibling:null);Ze(Hn,1&Hn.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return sa(e,t,n);t.flags|=64}var a=t.memoizedState;if(null!==a&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ze(Hn,Hn.current),r)break;return null;case 23:case 24:return t.lanes=0,Yr(e,t,n)}return ua(e,t,n)}Ur=0!=(16384&e.flags)}else Ur=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=at(t,tt.current),dn(t,n),a=fr(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,it(r)){var i=!0;ut(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,pn(t);var o=r.getDerivedStateFromProps;"function"==typeof o&&xn(t,r,o,e),a.updater=Sn,t.stateNode=a,a._reactInternals=t,Pn(t,r,e,n),t=Kr(null,t,r,!0,i,n)}else t.tag=0,Hr(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return wo(e)?1:0;if(null!=e){if((e=e.$$typeof)===m)return 11;if(e===b)return 14}return 2}(a),e=tn(a,e),i){case 0:t=qr(null,t,a,e,n);break e;case 1:t=$r(null,t,a,e,n);break e;case 11:t=Wr(null,t,a,e,n);break e;case 14:t=Xr(null,t,a,tn(a.type,e),r,n);break e}throw Error(l(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,qr(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 1:return r=t.type,a=t.pendingProps,$r(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 3:if(Jr(t),r=t.updateQueue,null===e||null===r)throw Error(l(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,gn(e,t),bn(t,r,null,n),(r=t.memoizedState.element)===a)Zn(),t=ua(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(J?(Vn=Ge(t.stateNode.containerInfo),Xn=t,i=Yn=!0):i=!1),i){if(J&&null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)i=e[a],o=e[a+1],q?i._workInProgressVersionPrimary=o:i._workInProgressVersionSecondary=o,er.push(i);for(n=Ln(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Hr(e,t,r,n),Zn();t=t.child}return t;case 5:return Bn(t),null===e&&$n(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,W(r,a)?o=null:null!==i&&W(r,i)&&(t.flags|=16),Qr(e,t),Hr(e,t,o,n),t.child;case 6:return null===e&&$n(t),null;case 13:return aa(e,t,n);case 4:return Fn(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Rn(t,null,r,n):Hr(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Wr(e,t,r,a=t.elementType===r?a:tn(r,a),n);case 7:return Hr(e,t,t.pendingProps,n),t.child;case 8:case 12:return Hr(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,o=t.memoizedProps,sn(t,i=a.value),null!==o){var s=o.value;if(0==(i=Kt(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(o.children===a.children&&!nt.current){t=ua(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){o=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=mn(-1,n&-n)).tag=2,vn(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),cn(s.return,n),u.lanes|=n;break}c=c.next}}else o=10===s.tag&&s.type===t.type?null:s.child;if(null!==o)o.return=s;else for(o=s;null!==o;){if(o===t){o=null;break}if(null!==(s=o.sibling)){s.return=o.return,o=s;break}o=o.return}s=o}}Hr(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,dn(t,n),r=r(a=fn(a,i.unstable_observedBits)),t.flags|=1,Hr(e,t,r,n),t.child;case 14:return i=tn(a=t.type,t.pendingProps),Xr(e,t,a,i=tn(a.type,i),r,n);case 15:return Vr(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:tn(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,it(r)?(e=!0,ut(t)):e=!1,dn(t,n),kn(t,r,a),Pn(t,r,a,n),Kr(null,t,r,!0,e,n);case 19:return sa(e,t,n);case 23:case 24:return Yr(e,t,n)}throw Error(l(156,t.tag))};var fo={current:!1},ho=o.unstable_flushAllWithoutAsserting,po="function"==typeof ho;function go(){if(void 0!==ho)return ho();for(var e=!1;ro();)e=!0;return e}function mo(t){try{go(),function(t){if(null===qa)try{var n=("require"+Math.random()).slice(0,7);qa=(e&&e[n]).call(e,"timers").setImmediate}catch(e){qa=function(e){var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}qa(t)}((function(){go()?mo(t):t()}))}catch(e){t(e)}}var vo=0,yo=!1;function bo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function _o(e,t,n,r){return new bo(e,t,n,r)}function wo(e){return!(!(e=e.prototype)||!e.isReactComponent)}function xo(e,t){var n=e.alternate;return null===n?((n=_o(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function So(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)wo(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case d:return Eo(n.children,a,i,t);case x:o=8,a|=16;break;case f:o=8,a|=1;break;case h:return(e=_o(12,n,t,8|a)).elementType=h,e.type=h,e.lanes=i,e;case v:return(e=_o(13,n,t,a)).type=v,e.elementType=v,e.lanes=i,e;case y:return(e=_o(19,n,t,a)).elementType=y,e.lanes=i,e;case S:return ko(n,a,i,t);case E:return(e=_o(24,n,t,a)).elementType=E,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:o=10;break e;case g:o=9;break e;case m:o=11;break e;case b:o=14;break e;case _:o=16,r=null;break e;case w:o=22;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=_o(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Eo(e,t,n,r){return(e=_o(7,e,r,t)).lanes=n,e}function ko(e,t,n,r){return(e=_o(23,e,r,t)).elementType=S,e.lanes=n,e}function Co(e,t,n){return(e=_o(6,e,null,t)).lanes=n,e}function Po(e,t,n){return(t=_o(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Oo(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=Q,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=_t(0),this.expirationTimes=_t(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=_t(0),J&&(this.mutableSourceEagerHydrationData=null)}function To(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw Error(l(268,Object.keys(e)))}return null===(e=R(t))?null:e.stateNode}function Mo(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function No(e,t){Mo(e,t),(e=e.alternate)&&Mo(e,t)}function Ro(e){return null===(e=R(e))?null:e.stateNode}function Lo(){return null}return r.IsThisRendererActing=fo,r.act=function(e){function t(){vo--,Za.current=n,fo.current=r}!1===yo&&(yo=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),vo++;var n=Za.current,r=fo.current;Za.current=!0,fo.current=!0;try{var a=Ui(e)}catch(e){throw t(),e}if(null!==a&&"object"==typeof a&&"function"==typeof a.then)return{then:function(e,r){a.then((function(){1<vo||!0===po&&!0===n?(t(),e()):mo((function(n){t(),n?r(n):e()}))}),(function(e){t(),r(e)}))}};try{1!==vo||!1!==po&&!1!==n||go(),t()}catch(e){throw t(),e}return{then:function(e){e()}}},r.attemptContinuousHydration=function(e){13===e.tag&&(Ii(e,67108864,Ai()),No(e,67108864))},r.attemptHydrationAtCurrentPriority=function(e){if(13===e.tag){var t=Ai(),n=Di(e);Ii(e,n,t),No(e,n)}},r.attemptSynchronousHydration=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.hydrate){var n=gt(t.pendingLanes);t.expiredLanes|=n&t.pendingLanes,ji(t,Ht()),0==(48&ei)&&(gi(),Qt())}break;case 13:var r=Ai();Hi((function(){return Ii(e,1,r)})),No(e,4)}},r.attemptUserBlockingHydration=function(e){13===e.tag&&(Ii(e,4,Ai()),No(e,4))},r.batchedEventUpdates=function(e,t){var n=ei;ei|=2;try{return e(t)}finally{0===(ei=n)&&(gi(),Qt())}},r.batchedUpdates=Ui,r.createComponentSelector=function(e){return{$$typeof:ja,value:e}},r.createContainer=function(e,t,n){return e=new Oo(e,t,n),t=_o(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e,pn(t),e},r.createHasPsuedoClassSelector=function(e){return{$$typeof:Fa,value:e}},r.createPortal=function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:c,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}},r.createRoleSelector=function(e){return{$$typeof:Ga,value:e}},r.createTestNameSelector=function(e){return{$$typeof:Ba,value:e}},r.createTextSelector=function(e){return{$$typeof:Ua,value:e}},r.deferredUpdates=function(e){return Vt(97,e)},r.discreteUpdates=function(e,t,n,r,a){var i=ei;ei|=4;try{return Vt(98,e.bind(null,t,n,r,a))}finally{0===(ei=i)&&(gi(),Qt())}},r.findAllNodes=Qa,r.findBoundingRects=function(e,t){if(!ie)throw Error(l(363));t=Qa(e,t),e=[];for(var n=0;n<t.length;n++)e.push(le(t[n]));for(t=e.length-1;0<t;t--)for(var r=(n=e[t]).x,a=r+n.width,i=n.y,o=i+n.height,s=t-1;0<=s;s--)if(t!==s){var u=e[s],c=u.x,d=c+u.width,f=u.y,h=f+u.height;if(r>=c&&i>=f&&a<=d&&o<=h){e.splice(t,1);break}if(!(r!==c||n.width!==u.width||h<i||f>o)){f>i&&(u.height+=f-i,u.y=i),h<o&&(u.height=o-f),e.splice(t,1);break}if(!(i!==f||n.height!==u.height||d<r||c>a)){c>r&&(u.width+=c-r,u.x=r),d<a&&(u.width=a-c),e.splice(t,1);break}}return e},r.findHostInstance=To,r.findHostInstanceWithNoPortals=function(e){return null===(e=function(e){if(!(e=N(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:20===e.tag?e.stateNode.instance:e.stateNode},r.findHostInstanceWithWarning=function(e){return To(e)},r.flushControlled=function(e){var t=ei;ei|=1;try{Vt(99,e)}finally{0===(ei=t)&&(gi(),Qt())}},r.flushDiscreteUpdates=function(){0==(49&ei)&&(function(){if(null!==Ci){var e=Ci;Ci=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ji(e,Ht())}))}Qt()}(),ro())},r.flushPassiveEffects=ro,r.flushSync=Hi,r.focusWithin=function(e,t){if(!ie)throw Error(l(363));for(t=Ya(e=Wa(e),t),t=Array.from(t),e=0;e<t.length;){var n=t[e++];if(!ue(n)){if(5===n.tag&&de(n.stateNode))return!0;for(n=n.child;null!==n;)t.push(n),n=n.sibling}}return!1},r.getCurrentUpdateLanePriority=function(){return ht},r.getFindAllNodesFailureDescription=function(e,t){if(!ie)throw Error(l(363));var n=0,r=[];e=[Wa(e),0];for(var a=0;a<e.length;){var i=e[a++],o=e[a++],s=t[o];if((5!==i.tag||!ue(i))&&(Xa(i,s)&&(r.push(Va(s)),++o>n&&(n=o)),o<t.length))for(i=i.child;null!==i;)e.push(i,o),i=i.sibling}if(n<t.length){for(e=[];n<t.length;n++)e.push(Va(t[n]));return"findAllNodes was able to match part of the selector:\n  "+r.join(" > ")+"\n\nNo matching component was found for:\n  "+e.join(" > ")}return null},r.getPublicRootInstance=function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return D(e.child.stateNode);default:return e.child.stateNode}},r.injectIntoDevTools=function(e){if(e={bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:s.ReactCurrentDispatcher,findHostInstanceByFiber:Ro,findFiberByHostInstance:e.findFiberByHostInstance||Lo,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)e=!1;else{var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.isDisabled&&t.supportsFiber)try{dt=t.inject(e),ft=t}catch(e){}e=!0}return e},r.observeVisibleRects=function(e,t,n,r){if(!ie)throw Error(l(363));e=Qa(e,t);var a=fe(e,n,r).disconnect;return{disconnect:function(){a()}}},r.registerMutableSourceForHydration=function(e,t){var n=t._getVersion;n=n(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)},r.runWithPriority=function(e,t){var n=ht;try{return ht=e,t()}finally{ht=n}},r.shouldSuspend=function(){return!1},r.unbatchedUpdates=function(e,t){var n=ei;ei&=-2,ei|=8;try{return e(t)}finally{0===(ei=n)&&(gi(),Qt())}},r.updateContainer=function(e,t,n,r){var a=t.current,i=Ai(),o=Di(a);e:if(n){t:{if(T(n=n._reactInternals)!==n||1!==n.tag)throw Error(l(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(it(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(l(171))}if(1===n.tag){var u=n.type;if(it(u)){n=st(n,u,s);break e}}n=s}else n=et;return null===t.context?t.context=n:t.pendingContext=n,(t=mn(i,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),vn(a,t),Ii(a,o,i),o},r}},6525:(e,t,n)=>{"use strict";e.exports=n(7287)},2408:(e,t,n)=>{"use strict";var r=n(7418),a=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var o=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;a=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),o=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var b=y.prototype=new v;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,i={},o=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:a,type:e,key:o,ref:l,props:i,_owner:_.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var k=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case a:case i:s=!0}}if(s)return o=o(s=e),e=""===r?"."+C(s,0):r,Array.isArray(o)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),P(o,t,n,"",(function(e){return e}))):null!=o&&(E(o)&&(o=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,n+(!o.key||s&&s.key===o.key?"":(""+o.key).replace(k,"$&/")+"/")+e)),t.push(o)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+C(l=e[u],u);s+=P(l,t,n,c,o)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(l=e.next()).done;)s+=P(l=l.value,t,n,c=r+C(l,u++),o);else if("object"===l)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function O(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function N(){var e=M.current;if(null===e)throw Error(h(321));return e}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var i=r({},e.props),o=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=_.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:a,type:e.type,key:o,ref:l,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,w=_.port2;_.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?w.postMessage(null):(g=!1,m=null)}catch(e){throw w.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,w.postMessage(null))},r=function(e,n){v=f((function(){e(t.unstable_now())}),n)},a=function(){h(v),v=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<k(a,t)))break e;e[r]=t,e[n]=a,n=r}}function S(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,o=e[i],l=i+1,s=e[l];if(void 0!==o&&0>k(o,n))void 0!==s&&0>k(s,o)?(e[r]=s,e[l]=n,r=l):(e[r]=o,e[i]=n,r=i);else{if(!(void 0!==s&&0>k(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],O=1,T=null,M=3,N=!1,R=!1,L=!1;function A(e){for(var t=S(P);null!==t;){if(null===t.callback)E(P);else{if(!(t.startTime<=e))break;E(P),t.sortIndex=t.expirationTime,x(C,t)}t=S(P)}}function D(e){if(L=!1,A(e),!R)if(null!==S(C))R=!0,n(I);else{var t=S(P);null!==t&&r(D,t.startTime-e)}}function I(e,n){R=!1,L&&(L=!1,a()),N=!0;var i=M;try{for(A(n),T=S(C);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=T.callback;if("function"==typeof o){T.callback=null,M=T.priorityLevel;var l=o(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===S(C)&&E(C),A(n)}else E(C);T=S(C)}if(null!==T)var s=!0;else{var u=S(P);null!==u&&r(D,u.startTime-n),s=!1}return s}finally{T=null,M=i,N=!1}}var z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||N||(R=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>l?(e.sortIndex=o,x(P,e),null===S(C)&&e===S(P)&&(L?a():L=!0,r(D,o-l))):(e.sortIndex=s,x(C,e),R||N||(R=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var i=n[e]={id:e,loaded:!1,exports:{}};return t[e](i,i.exports,r),i.loaded=!0,i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var t={};r.r(t),r.d(t,{appendChild:()=>Un,appendChildToContainer:()=>Hn,appendInitialChild:()=>xn,cancelTimeout:()=>In,clearContainer:()=>tr,commitMount:()=>qn,commitTextUpdate:()=>Qn,commitUpdate:()=>$n,createInstance:()=>Sn,createTextInstance:()=>En,finalizeInitialChildren:()=>kn,getChildHostContext:()=>An,getPublicInstance:()=>Cn,getRootHostContext:()=>Ln,hideInstance:()=>Kn,hideTextInstance:()=>Jn,idlePriority:()=>bn.unstable_IdlePriority,insertBefore:()=>Wn,insertInContainerBefore:()=>Xn,isPrimaryRenderer:()=>Fn,noTimeout:()=>zn,now:()=>bn.unstable_now,prepareForCommit:()=>Pn,preparePortalMount:()=>On,prepareUpdate:()=>Tn,removeChild:()=>Vn,removeChildFromContainer:()=>Yn,resetAfterCommit:()=>Mn,resetTextContent:()=>Nn,run:()=>bn.unstable_runWithPriority,scheduleTimeout:()=>Dn,shouldDeprioritizeSubtree:()=>Rn,shouldSetTextContent:()=>jn,supportsMutation:()=>Bn,unhideInstance:()=>Zn,unhideTextInstance:()=>er,warnsIfNotActing:()=>Gn});var n=r(7294),a=r(3935),i=(r(1193),Math.PI/180);const o="undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},l={_global:o,version:"8.0.4",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(e){}.toString()),dblClickWindow:400,getAngle:e=>l.angleDeg?e*i:e,enableTrace:!1,pointerEventsEnabled:!0,autoDrawEnabled:!0,hitOnDragEnabled:!1,capturePointerEventsEnabled:!1,_mouseListenClick:!1,_touchListenClick:!1,_pointerListenClick:!1,_mouseInDblClickWindow:!1,_touchInDblClickWindow:!1,_pointerInDblClickWindow:!1,pixelRatio:"undefined"!=typeof window&&window.devicePixelRatio||1,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:()=>l.DD.isDragging,isDragReady:()=>!!l.DD.node,document:o.document,_injectGlobal(e){o.Konva=e}},s=e=>{l[e.prototype.getClassName()]=e};l._injectGlobal(l);class u{constructor(e=[1,0,0,1,0,0]){this.dirty=!1,this.m=e&&e.slice()||[1,0,0,1,0,0]}reset(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0}copy(){return new u(this.m)}copyInto(e){e.m[0]=this.m[0],e.m[1]=this.m[1],e.m[2]=this.m[2],e.m[3]=this.m[3],e.m[4]=this.m[4],e.m[5]=this.m[5]}point(e){var t=this.m;return{x:t[0]*e.x+t[2]*e.y+t[4],y:t[1]*e.x+t[3]*e.y+t[5]}}translate(e,t){return this.m[4]+=this.m[0]*e+this.m[2]*t,this.m[5]+=this.m[1]*e+this.m[3]*t,this}scale(e,t){return this.m[0]*=e,this.m[1]*=e,this.m[2]*=t,this.m[3]*=t,this}rotate(e){var t=Math.cos(e),n=Math.sin(e),r=this.m[0]*t+this.m[2]*n,a=this.m[1]*t+this.m[3]*n,i=this.m[0]*-n+this.m[2]*t,o=this.m[1]*-n+this.m[3]*t;return this.m[0]=r,this.m[1]=a,this.m[2]=i,this.m[3]=o,this}getTranslation(){return{x:this.m[4],y:this.m[5]}}skew(e,t){var n=this.m[0]+this.m[2]*t,r=this.m[1]+this.m[3]*t,a=this.m[2]+this.m[0]*e,i=this.m[3]+this.m[1]*e;return this.m[0]=n,this.m[1]=r,this.m[2]=a,this.m[3]=i,this}multiply(e){var t=this.m[0]*e.m[0]+this.m[2]*e.m[1],n=this.m[1]*e.m[0]+this.m[3]*e.m[1],r=this.m[0]*e.m[2]+this.m[2]*e.m[3],a=this.m[1]*e.m[2]+this.m[3]*e.m[3],i=this.m[0]*e.m[4]+this.m[2]*e.m[5]+this.m[4],o=this.m[1]*e.m[4]+this.m[3]*e.m[5]+this.m[5];return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=a,this.m[4]=i,this.m[5]=o,this}invert(){var e=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),t=this.m[3]*e,n=-this.m[1]*e,r=-this.m[2]*e,a=this.m[0]*e,i=e*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),o=e*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=a,this.m[4]=i,this.m[5]=o,this}getMatrix(){return this.m}setAbsolutePosition(e,t){var n=this.m[0],r=this.m[1],a=this.m[2],i=this.m[3],o=this.m[4],l=(n*(t-this.m[5])-r*(e-o))/(n*i-r*a),s=(e-o-a*l)/n;return this.translate(s,l)}decompose(){var e=this.m[0],t=this.m[1],n=this.m[2],r=this.m[3],a=e*r-t*n;let i={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=e||0!=t){var o=Math.sqrt(e*e+t*t);i.rotation=t>0?Math.acos(e/o):-Math.acos(e/o),i.scaleX=o,i.scaleY=a/o,i.skewX=(e*n+t*r)/a,i.skewY=0}else if(0!=n||0!=r){var l=Math.sqrt(n*n+r*r);i.rotation=Math.PI/2-(r>0?Math.acos(-n/l):-Math.acos(n/l)),i.scaleX=a/l,i.scaleY=l,i.skewX=0,i.skewY=(e*n+t*r)/a}return i.rotation=v._getRotation(i.rotation),i}}var c=Math.PI/180,d=180/Math.PI,f="Konva error: ",h={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},p=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,g=[];const m="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||function(e){setTimeout(e,60)},v={_isElement:e=>!(!e||1!=e.nodeType),_isFunction:e=>!!(e&&e.constructor&&e.call&&e.apply),_isPlainObject:e=>!!e&&e.constructor===Object,_isArray:e=>"[object Array]"===Object.prototype.toString.call(e),_isNumber:e=>"[object Number]"===Object.prototype.toString.call(e)&&!isNaN(e)&&isFinite(e),_isString:e=>"[object String]"===Object.prototype.toString.call(e),_isBoolean:e=>"[object Boolean]"===Object.prototype.toString.call(e),isObject:e=>e instanceof Object,isValidSelector(e){if("string"!=typeof e)return!1;var t=e[0];return"#"===t||"."===t||t===t.toUpperCase()},_sign:e=>0===e||e>0?1:-1,requestAnimFrame(e){g.push(e),1===g.length&&m((function(){const e=g;g=[],e.forEach((function(e){e()}))}))},createCanvasElement(){var e=document.createElement("canvas");try{e.style=e.style||{}}catch(e){}return e},createImageElement:()=>document.createElement("img"),_isInDocument(e){for(;e=e.parentNode;)if(e==document)return!0;return!1},_urlToImage(e,t){var n=v.createImageElement();n.onload=function(){t(n)},n.src=e},_rgbToHex:(e,t,n)=>((1<<24)+(e<<16)+(t<<8)+n).toString(16).slice(1),_hexToRgb(e){e=e.replace("#","");var t=parseInt(e,16);return{r:t>>16&255,g:t>>8&255,b:255&t}},getRandomColor(){for(var e=(16777215*Math.random()<<0).toString(16);e.length<6;)e="0"+e;return"#"+e},getRGB(e){var t;return e in h?{r:(t=h[e])[0],g:t[1],b:t[2]}:"#"===e[0]?this._hexToRgb(e.substring(1)):"rgb("===e.substr(0,4)?(t=p.exec(e.replace(/ /g,"")),{r:parseInt(t[1],10),g:parseInt(t[2],10),b:parseInt(t[3],10)}):{r:0,g:0,b:0}},colorToRGBA:e=>(e=e||"black",v._namedColorToRBA(e)||v._hex3ColorToRGBA(e)||v._hex6ColorToRGBA(e)||v._rgbColorToRGBA(e)||v._rgbaColorToRGBA(e)||v._hslColorToRGBA(e)),_namedColorToRBA(e){var t=h[e.toLowerCase()];return t?{r:t[0],g:t[1],b:t[2],a:1}:null},_rgbColorToRGBA(e){if(0===e.indexOf("rgb(")){var t=(e=e.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:1}}},_rgbaColorToRGBA(e){if(0===e.indexOf("rgba(")){var t=(e=e.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:t[3]}}},_hex6ColorToRGBA(e){if("#"===e[0]&&7===e.length)return{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16),a:1}},_hex3ColorToRGBA(e){if("#"===e[0]&&4===e.length)return{r:parseInt(e[1]+e[1],16),g:parseInt(e[2]+e[2],16),b:parseInt(e[3]+e[3],16),a:1}},_hslColorToRGBA(e){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(e)){const[t,...n]=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e),r=Number(n[0])/360,a=Number(n[1])/100,i=Number(n[2])/100;let o,l,s;if(0===a)return s=255*i,{r:Math.round(s),g:Math.round(s),b:Math.round(s),a:1};o=i<.5?i*(1+a):i+a-i*a;const u=2*i-o,c=[0,0,0];for(let e=0;e<3;e++)l=r+1/3*-(e-1),l<0&&l++,l>1&&l--,s=6*l<1?u+6*(o-u)*l:2*l<1?o:3*l<2?u+(o-u)*(2/3-l)*6:u,c[e]=255*s;return{r:Math.round(c[0]),g:Math.round(c[1]),b:Math.round(c[2]),a:1}}},haveIntersection:(e,t)=>!(t.x>e.x+e.width||t.x+t.width<e.x||t.y>e.y+e.height||t.y+t.height<e.y),cloneObject(e){var t={};for(var n in e)this._isPlainObject(e[n])?t[n]=this.cloneObject(e[n]):this._isArray(e[n])?t[n]=this.cloneArray(e[n]):t[n]=e[n];return t},cloneArray:e=>e.slice(0),degToRad:e=>e*c,radToDeg:e=>e*d,_degToRad:e=>(v.warn("Util._degToRad is removed. Please use public Util.degToRad instead."),v.degToRad(e)),_radToDeg:e=>(v.warn("Util._radToDeg is removed. Please use public Util.radToDeg instead."),v.radToDeg(e)),_getRotation:e=>l.angleDeg?v.radToDeg(e):e,_capitalize:e=>e.charAt(0).toUpperCase()+e.slice(1),throw(e){throw new Error(f+e)},error(e){console.error(f+e)},warn(e){l.showWarnings&&console.warn("Konva warning: "+e)},each(e,t){for(var n in e)t(n,e[n])},_inRange:(e,t,n)=>t<=e&&e<n,_getProjectionToSegment(e,t,n,r,a,i){var o,l,s,u=(e-n)*(e-n)+(t-r)*(t-r);if(0==u)o=e,l=t,s=(a-n)*(a-n)+(i-r)*(i-r);else{var c=((a-e)*(n-e)+(i-t)*(r-t))/u;c<0?(o=e,l=t,s=(e-a)*(e-a)+(t-i)*(t-i)):c>1?(o=n,l=r,s=(n-a)*(n-a)+(r-i)*(r-i)):s=((o=e+c*(n-e))-a)*(o-a)+((l=t+c*(r-t))-i)*(l-i)}return[o,l,s]},_getProjectionToLine(e,t,n){var r=v.cloneObject(e),a=Number.MAX_VALUE;return t.forEach((function(i,o){if(n||o!==t.length-1){var l=t[(o+1)%t.length],s=v._getProjectionToSegment(i.x,i.y,l.x,l.y,e.x,e.y),u=s[0],c=s[1],d=s[2];d<a&&(r.x=u,r.y=c,a=d)}})),r},_prepareArrayForTween(e,t,n){var r,a=[],i=[];if(e.length>t.length){var o=t;t=e,e=o}for(r=0;r<e.length;r+=2)a.push({x:e[r],y:e[r+1]});for(r=0;r<t.length;r+=2)i.push({x:t[r],y:t[r+1]});var l=[];return i.forEach((function(e){var t=v._getProjectionToLine(e,a,n);l.push(t.x),l.push(t.y)})),l},_prepareToStringify(e){var t;for(var n in e.visitedByCircularReferenceRemoval=!0,e)if(e.hasOwnProperty(n)&&e[n]&&"object"==typeof e[n])if(t=Object.getOwnPropertyDescriptor(e,n),e[n].visitedByCircularReferenceRemoval||v._isElement(e[n])){if(!t.configurable)return null;delete e[n]}else if(null===v._prepareToStringify(e[n])){if(!t.configurable)return null;delete e[n]}return delete e.visitedByCircularReferenceRemoval,e},_assign(e,t){for(var n in t)e[n]=t[n];return e},_getFirstPointerId:e=>e.touches?e.changedTouches[0].identifier:999};function y(e){return v._isString(e)?'"'+e+'"':"[object Number]"===Object.prototype.toString.call(e)||v._isBoolean(e)?e:Object.prototype.toString.call(e)}function b(e){return e>255?255:e<0?0:Math.round(e)}function _(){if(l.isUnminified)return function(e,t){return v._isNumber(e)||v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a number.'),e}}function w(e){if(l.isUnminified)return function(t,n){let r=v._isNumber(t),a=v._isArray(t)&&t.length==e;return r||a||v.warn(y(t)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+e+")"),t}}function x(){if(l.isUnminified)return function(e,t){return v._isNumber(e)||"auto"===e||v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a number or "auto".'),e}}function S(){if(l.isUnminified)return function(e,t){return v._isString(e)||v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a string.'),e}}function E(){if(l.isUnminified)return function(e,t){const n=v._isString(e),r="[object CanvasGradient]"===Object.prototype.toString.call(e)||e&&e.addColorStop;return n||r||v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a string or a native gradient.'),e}}function k(){if(l.isUnminified)return function(e,t){return!0===e||!1===e||v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a boolean.'),e}}var C="get",P="set";const O={addGetterSetter(e,t,n,r,a){O.addGetter(e,t,n),O.addSetter(e,t,r,a),O.addOverloadedGetterSetter(e,t)},addGetter(e,t,n){var r=C+v._capitalize(t);e.prototype[r]=e.prototype[r]||function(){var e=this.attrs[t];return void 0===e?n:e}},addSetter(e,t,n,r){var a=P+v._capitalize(t);e.prototype[a]||O.overWriteSetter(e,t,n,r)},overWriteSetter(e,t,n,r){var a=P+v._capitalize(t);e.prototype[a]=function(e){return n&&null!=e&&(e=n.call(this,e,t)),this._setAttr(t,e),r&&r.call(this),this}},addComponentsGetterSetter(e,t,n,r,a){var i,o,s=n.length,u=v._capitalize,c=C+u(t),d=P+u(t);e.prototype[c]=function(){var e={};for(i=0;i<s;i++)e[o=n[i]]=this.getAttr(t+u(o));return e};var f=function(e){if(l.isUnminified)return function(t,n){return v.isObject(t)||v.warn(y(t)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+e),t}}(n);e.prototype[d]=function(e){var n,i=this.attrs[t];for(n in r&&(e=r.call(this,e)),f&&f.call(this,e,t),e)e.hasOwnProperty(n)&&this._setAttr(t+u(n),e[n]);return this._fireChangeEvent(t,i,e),a&&a.call(this),this},O.addOverloadedGetterSetter(e,t)},addOverloadedGetterSetter(e,t){var n=v._capitalize(t),r=P+n,a=C+n;e.prototype[t]=function(){return arguments.length?(this[r](arguments[0]),this):this[a]()}},addDeprecatedGetterSetter(e,t,n,r){v.error("Adding deprecated "+t);var a=C+v._capitalize(t),i=t+" property is deprecated and will be removed soon. Look at Konva change log for more information.";e.prototype[a]=function(){v.error(i);var e=this.attrs[t];return void 0===e?n:e},O.addSetter(e,t,r,(function(){v.error(i)})),O.addOverloadedGetterSetter(e,t)},backCompat(e,t){v.each(t,(function(t,n){var r=e.prototype[n],a=C+v._capitalize(t),i=P+v._capitalize(t);function o(){r.apply(this,arguments),v.error('"'+t+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}e.prototype[t]=o,e.prototype[a]=o,e.prototype[i]=o}))},afterSetFilter(){this._filterUpToDate=!1}};function T(e){var t,n,r=[],a=e.length,i=v;for(t=0;t<a;t++)n=e[t],i._isNumber(n)?n=Math.round(1e3*n)/1e3:i._isString(n)||(n+=""),r.push(n);return r}var M,N=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];class R{constructor(e){this.canvas=e,this._context=e._canvas.getContext("2d"),l.enableTrace&&(this.traceArr=[],this._enableTrace())}fillShape(e){e.fillEnabled()&&this._fill(e)}_fill(e){}strokeShape(e){e.hasStroke()&&this._stroke(e)}_stroke(e){}fillStrokeShape(e){e.attrs.fillAfterStrokeEnabled?(this.strokeShape(e),this.fillShape(e)):(this.fillShape(e),this.strokeShape(e))}getTrace(e,t){var n,r,a,i,o=this.traceArr,l=o.length,s="";for(n=0;n<l;n++)(a=(r=o[n]).method)?(i=r.args,s+=a,e?s+="()":v._isArray(i[0])?s+="(["+i.join(",")+"])":(t&&(i=i.map((e=>"number"==typeof e?Math.floor(e):e))),s+="("+i.join(",")+")")):(s+=r.property,e||(s+="="+r.val)),s+=";";return s}clearTrace(){this.traceArr=[]}_trace(e){var t=this.traceArr;t.push(e),t.length>=100&&t.shift()}reset(){var e=this.getCanvas().getPixelRatio();this.setTransform(1*e,0,0,1*e,0,0)}getCanvas(){return this.canvas}clear(e){var t=this.getCanvas();e?this.clearRect(e.x||0,e.y||0,e.width||0,e.height||0):this.clearRect(0,0,t.getWidth()/t.pixelRatio,t.getHeight()/t.pixelRatio)}_applyLineCap(e){var t=e.getLineCap();t&&this.setAttr("lineCap",t)}_applyOpacity(e){var t=e.getAbsoluteOpacity();1!==t&&this.setAttr("globalAlpha",t)}_applyLineJoin(e){var t=e.attrs.lineJoin;t&&this.setAttr("lineJoin",t)}setAttr(e,t){this._context[e]=t}arc(e,t,n,r,a,i){this._context.arc(e,t,n,r,a,i)}arcTo(e,t,n,r,a){this._context.arcTo(e,t,n,r,a)}beginPath(){this._context.beginPath()}bezierCurveTo(e,t,n,r,a,i){this._context.bezierCurveTo(e,t,n,r,a,i)}clearRect(e,t,n,r){this._context.clearRect(e,t,n,r)}clip(){this._context.clip()}closePath(){this._context.closePath()}createImageData(e,t){var n=arguments;return 2===n.length?this._context.createImageData(e,t):1===n.length?this._context.createImageData(e):void 0}createLinearGradient(e,t,n,r){return this._context.createLinearGradient(e,t,n,r)}createPattern(e,t){return this._context.createPattern(e,t)}createRadialGradient(e,t,n,r,a,i){return this._context.createRadialGradient(e,t,n,r,a,i)}drawImage(e,t,n,r,a,i,o,l,s){var u=arguments,c=this._context;3===u.length?c.drawImage(e,t,n):5===u.length?c.drawImage(e,t,n,r,a):9===u.length&&c.drawImage(e,t,n,r,a,i,o,l,s)}ellipse(e,t,n,r,a,i,o,l){this._context.ellipse(e,t,n,r,a,i,o,l)}isPointInPath(e,t){return this._context.isPointInPath(e,t)}fill(e){e?this._context.fill(e):this._context.fill()}fillRect(e,t,n,r){this._context.fillRect(e,t,n,r)}strokeRect(e,t,n,r){this._context.strokeRect(e,t,n,r)}fillText(e,t,n,r){r?this._context.fillText(e,t,n,r):this._context.fillText(e,t,n)}measureText(e){return this._context.measureText(e)}getImageData(e,t,n,r){return this._context.getImageData(e,t,n,r)}lineTo(e,t){this._context.lineTo(e,t)}moveTo(e,t){this._context.moveTo(e,t)}rect(e,t,n,r){this._context.rect(e,t,n,r)}putImageData(e,t,n){this._context.putImageData(e,t,n)}quadraticCurveTo(e,t,n,r){this._context.quadraticCurveTo(e,t,n,r)}restore(){this._context.restore()}rotate(e){this._context.rotate(e)}save(){this._context.save()}scale(e,t){this._context.scale(e,t)}setLineDash(e){this._context.setLineDash?this._context.setLineDash(e):"mozDash"in this._context?this._context.mozDash=e:"webkitLineDash"in this._context&&(this._context.webkitLineDash=e)}getLineDash(){return this._context.getLineDash()}setTransform(e,t,n,r,a,i){this._context.setTransform(e,t,n,r,a,i)}stroke(e){e?this._context.stroke(e):this._context.stroke()}strokeText(e,t,n,r){this._context.strokeText(e,t,n,r)}transform(e,t,n,r,a,i){this._context.transform(e,t,n,r,a,i)}translate(e,t){this._context.translate(e,t)}_enableTrace(){var e,t,n=this,r=N.length,a=this.setAttr,i=function(e){var r,a=n[e];n[e]=function(){return t=T(Array.prototype.slice.call(arguments,0)),r=a.apply(n,arguments),n._trace({method:e,args:t}),r}};for(e=0;e<r;e++)i(N[e]);n.setAttr=function(){a.apply(n,arguments);var e=arguments[0],t=arguments[1];"shadowOffsetX"!==e&&"shadowOffsetY"!==e&&"shadowBlur"!==e||(t/=this.canvas.getPixelRatio()),n._trace({property:e,val:t})}}_applyGlobalCompositeOperation(e){const t=e.attrs.globalCompositeOperation;!t||"source-over"===t||this.setAttr("globalCompositeOperation",t)}}["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(e){Object.defineProperty(R.prototype,e,{get(){return this._context[e]},set(t){this._context[e]=t}})}));class L extends R{_fillColor(e){var t=e.fill();this.setAttr("fillStyle",t),e._fillFunc(this)}_fillPattern(e){this.setAttr("fillStyle",e._getFillPattern()),e._fillFunc(this)}_fillLinearGradient(e){var t=e._getLinearGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))}_fillRadialGradient(e){var t=e._getRadialGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))}_fill(e){var t=e.fill(),n=e.getFillPriority();if(t&&"color"===n)this._fillColor(e);else{var r=e.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(e);else{var a=e.getFillLinearGradientColorStops();if(a&&"linear-gradient"===n)this._fillLinearGradient(e);else{var i=e.getFillRadialGradientColorStops();i&&"radial-gradient"===n?this._fillRadialGradient(e):t?this._fillColor(e):r?this._fillPattern(e):a?this._fillLinearGradient(e):i&&this._fillRadialGradient(e)}}}}_strokeLinearGradient(e){var t=e.getStrokeLinearGradientStartPoint(),n=e.getStrokeLinearGradientEndPoint(),r=e.getStrokeLinearGradientColorStops(),a=this.createLinearGradient(t.x,t.y,n.x,n.y);if(r){for(var i=0;i<r.length;i+=2)a.addColorStop(r[i],r[i+1]);this.setAttr("strokeStyle",a)}}_stroke(e){var t=e.dash(),n=e.getStrokeScaleEnabled();if(e.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(e),t&&e.dashEnabled()&&(this.setLineDash(t),this.setAttr("lineDashOffset",e.dashOffset())),this.setAttr("lineWidth",e.strokeWidth()),e.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),e.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(e):this.setAttr("strokeStyle",e.stroke()),e._strokeFunc(this),n||this.restore()}}_applyShadow(e){var t,n,r,a=null!==(t=e.getShadowRGBA())&&void 0!==t?t:"black",i=null!==(n=e.getShadowBlur())&&void 0!==n?n:5,o=null!==(r=e.getShadowOffset())&&void 0!==r?r:{x:0,y:0},l=e.getAbsoluteScale(),s=this.canvas.getPixelRatio(),u=l.x*s,c=l.y*s;this.setAttr("shadowColor",a),this.setAttr("shadowBlur",i*Math.min(Math.abs(u),Math.abs(c))),this.setAttr("shadowOffsetX",o.x*u),this.setAttr("shadowOffsetY",o.y*c)}}class A extends R{_fill(e){this.save(),this.setAttr("fillStyle",e.colorKey),e._fillFuncHit(this),this.restore()}strokeShape(e){e.hasHitStroke()&&this._stroke(e)}_stroke(e){if(e.hasHitStroke()){var t=e.getStrokeScaleEnabled();if(!t){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(e);var r=e.hitStrokeWidth(),a="auto"===r?e.strokeWidth():r;this.setAttr("lineWidth",a),this.setAttr("strokeStyle",e.colorKey),e._strokeFuncHit(this),t||this.restore()}}}class D{constructor(e){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var t=(e||{}).pixelRatio||l.pixelRatio||function(){if(M)return M;var e=v.createCanvasElement().getContext("2d");return M=(l._global.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=t,this._canvas=v.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}getContext(){return this.context}getPixelRatio(){return this.pixelRatio}setPixelRatio(e){var t=this.pixelRatio;this.pixelRatio=e,this.setSize(this.getWidth()/t,this.getHeight()/t)}setWidth(e){this.width=this._canvas.width=e*this.pixelRatio,this._canvas.style.width=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)}setHeight(e){this.height=this._canvas.height=e*this.pixelRatio,this._canvas.style.height=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)}getWidth(){return this.width}getHeight(){return this.height}setSize(e,t){this.setWidth(e||0),this.setHeight(t||0)}toDataURL(e,t){try{return this._canvas.toDataURL(e,t)}catch(e){try{return this._canvas.toDataURL()}catch(e){return v.error("Unable to get data URL. "+e.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}}}O.addGetterSetter(D,"pixelRatio",void 0,_());class I extends D{constructor(e={width:0,height:0}){super(e),this.context=new L(this),this.setSize(e.width,e.height)}}class z extends D{constructor(e={width:0,height:0}){super(e),this.hitCanvas=!0,this.context=new A(this),this.setSize(e.width,e.height)}}const j={get isDragging(){var e=!1;return j._dragElements.forEach((t=>{"dragging"===t.dragStatus&&(e=!0)})),e},justDragged:!1,get node(){var e;return j._dragElements.forEach((t=>{e=t.node})),e},_dragElements:new Map,_drag(e){const t=[];j._dragElements.forEach(((n,r)=>{const{node:a}=n,i=a.getStage();i.setPointersPositions(e),void 0===n.pointerId&&(n.pointerId=v._getFirstPointerId(e));const o=i._changedPointerPositions.find((e=>e.id===n.pointerId));if(o){if("dragging"!==n.dragStatus){var l=a.dragDistance();if(Math.max(Math.abs(o.x-n.startPointerPos.x),Math.abs(o.y-n.startPointerPos.y))<l)return;if(a.startDrag({evt:e}),!a.isDragging())return}a._setDragPosition(e,n),t.push(a)}})),t.forEach((t=>{t.fire("dragmove",{type:"dragmove",target:t,evt:e},!0)}))},_endDragBefore(e){j._dragElements.forEach((t=>{const{node:n}=t,r=n.getStage();if(e&&r.setPointersPositions(e),!r._changedPointerPositions.find((e=>e.id===t.pointerId)))return;"dragging"!==t.dragStatus&&"stopped"!==t.dragStatus||(j.justDragged=!0,l._mouseListenClick=!1,l._touchListenClick=!1,l._pointerListenClick=!1,t.dragStatus="stopped");const a=t.node.getLayer()||t.node instanceof l.Stage&&t.node;a&&a.batchDraw()}))},_endDragAfter(e){j._dragElements.forEach(((t,n)=>{"stopped"===t.dragStatus&&t.node.fire("dragend",{type:"dragend",target:t.node,evt:e},!0),"dragging"!==t.dragStatus&&j._dragElements.delete(n)}))}};l.isBrowser&&(window.addEventListener("mouseup",j._endDragBefore,!0),window.addEventListener("touchend",j._endDragBefore,!0),window.addEventListener("mousemove",j._drag),window.addEventListener("touchmove",j._drag),window.addEventListener("mouseup",j._endDragAfter,!1),window.addEventListener("touchend",j._endDragAfter,!1));var F="absoluteOpacity",G="allEventListeners",B="absoluteTransform",U="absoluteScale",H="canvas",W="listening",X="mouseenter",V="mouseleave",Y="Shape",Q=" ",q="stage",$="transform",K="visible",J=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(Q);let Z=1;class ee{constructor(e){this._id=Z++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(e),this._shouldFireChangeEvents=!0}hasChildren(){return!1}_clearCache(e){e!==$&&e!==B||!this._cache.get(e)?e?this._cache.delete(e):this._cache.clear():this._cache.get(e).dirty=!0}_getCache(e,t){var n=this._cache.get(e);return(void 0===n||(e===$||e===B)&&!0===n.dirty)&&(n=t.call(this),this._cache.set(e,n)),n}_calculate(e,t,n){if(!this._attachedDepsListeners.get(e)){const n=t.map((e=>e+"Change.konva")).join(Q);this.on(n,(()=>{this._clearCache(e)})),this._attachedDepsListeners.set(e,!0)}return this._getCache(e,n)}_getCanvasCache(){return this._cache.get(H)}_clearSelfAndDescendantCache(e){this._clearCache(e),e===B&&this.fire("absoluteTransformChange")}clearCache(){return this._cache.delete(H),this._clearSelfAndDescendantCache(),this._requestDraw(),this}cache(e){var t=e||{},n={};void 0!==t.x&&void 0!==t.y&&void 0!==t.width&&void 0!==t.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var r=Math.ceil(t.width||n.width),a=Math.ceil(t.height||n.height),i=t.pixelRatio,o=void 0===t.x?n.x:t.x,l=void 0===t.y?n.y:t.y,s=t.offset||0,u=t.drawBorder||!1,c=t.hitCanvasPixelRatio||1;if(r&&a){o-=s,l-=s;var d=new I({pixelRatio:i,width:r+=2*s,height:a+=2*s}),f=new I({pixelRatio:i,width:0,height:0}),h=new z({pixelRatio:c,width:r,height:a}),p=d.getContext(),g=h.getContext();return h.isCache=!0,d.isCache=!0,this._cache.delete(H),this._filterUpToDate=!1,!1===t.imageSmoothingEnabled&&(d.getContext()._context.imageSmoothingEnabled=!1,f.getContext()._context.imageSmoothingEnabled=!1),p.save(),g.save(),p.translate(-o,-l),g.translate(-o,-l),this._isUnderCache=!0,this._clearSelfAndDescendantCache(F),this._clearSelfAndDescendantCache(U),this.drawScene(d,this),this.drawHit(h,this),this._isUnderCache=!1,p.restore(),g.restore(),u&&(p.save(),p.beginPath(),p.rect(0,0,r,a),p.closePath(),p.setAttr("strokeStyle","red"),p.setAttr("lineWidth",5),p.stroke(),p.restore()),this._cache.set(H,{scene:d,filter:f,hit:h,x:o,y:l}),this._requestDraw(),this}v.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")}isCached(){return this._cache.has(H)}getClientRect(e){throw new Error('abstract "getClientRect" method call')}_transformedRect(e,t){var n,r,a,i,o=[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}],l=this.getAbsoluteTransform(t);return o.forEach((function(e){var t=l.point(e);void 0===n&&(n=a=t.x,r=i=t.y),n=Math.min(n,t.x),r=Math.min(r,t.y),a=Math.max(a,t.x),i=Math.max(i,t.y)})),{x:n,y:r,width:a-n,height:i-r}}_drawCachedSceneCanvas(e){e.save(),e._applyOpacity(this),e._applyGlobalCompositeOperation(this);const t=this._getCanvasCache();e.translate(t.x,t.y);var n=this._getCachedSceneCanvas(),r=n.pixelRatio;e.drawImage(n._canvas,0,0,n.width/r,n.height/r),e.restore()}_drawCachedHitCanvas(e){var t=this._getCanvasCache(),n=t.hit;e.save(),e.translate(t.x,t.y),e.drawImage(n._canvas,0,0,n.width/n.pixelRatio,n.height/n.pixelRatio),e.restore()}_getCachedSceneCanvas(){var e,t,n,r,a=this.filters(),i=this._getCanvasCache(),o=i.scene,l=i.filter,s=l.getContext();if(a){if(!this._filterUpToDate){var u=o.pixelRatio;l.setSize(o.width/o.pixelRatio,o.height/o.pixelRatio);try{for(e=a.length,s.clear(),s.drawImage(o._canvas,0,0,o.getWidth()/u,o.getHeight()/u),t=s.getImageData(0,0,l.getWidth(),l.getHeight()),n=0;n<e;n++)"function"==typeof(r=a[n])?(r.call(this,t),s.putImageData(t,0,0)):v.error("Filter should be type of function, but got "+typeof r+" instead. Please check correct filters")}catch(e){v.error("Unable to apply filter. "+e.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return l}return o}on(e,t){if(this._cache&&this._cache.delete(G),3===arguments.length)return this._delegate.apply(this,arguments);var n,r,a,i,o=e.split(Q),l=o.length;for(n=0;n<l;n++)a=(r=o[n].split("."))[0],i=r[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:i,handler:t});return this}off(e,t){var n,r,a,i,o,l=(e||"").split(Q),s=l.length;if(this._cache&&this._cache.delete(G),!e)for(r in this.eventListeners)this._off(r);for(n=0;n<s;n++)if(i=(a=l[n].split("."))[0],o=a[1],i)this.eventListeners[i]&&this._off(i,o,t);else for(r in this.eventListeners)this._off(r,o,t);return this}dispatchEvent(e){var t={target:this,type:e.type,evt:e};return this.fire(e.type,t),this}addEventListener(e,t){return this.on(e,(function(e){t.call(this,e.evt)})),this}removeEventListener(e){return this.off(e),this}_delegate(e,t,n){var r=this;this.on(e,(function(e){for(var a=e.target.findAncestors(t,!0,r),i=0;i<a.length;i++)(e=v.cloneObject(e)).currentTarget=a[i],n.call(a[i],e)}))}remove(){return this.isDragging()&&this.stopDrag(),j._dragElements.delete(this._id),this._remove(),this}_clearCaches(){this._clearSelfAndDescendantCache(B),this._clearSelfAndDescendantCache(F),this._clearSelfAndDescendantCache(U),this._clearSelfAndDescendantCache(q),this._clearSelfAndDescendantCache(K),this._clearSelfAndDescendantCache(W)}_remove(){this._clearCaches();var e=this.getParent();e&&e.children&&(e.children.splice(this.index,1),e._setChildrenIndices(),this.parent=null)}destroy(){return this.remove(),this}getAttr(e){var t="get"+v._capitalize(e);return v._isFunction(this[t])?this[t]():this.attrs[e]}getAncestors(){for(var e=this.getParent(),t=[];e;)t.push(e),e=e.getParent();return t}getAttrs(){return this.attrs||{}}setAttrs(e){return this._batchTransformChanges((()=>{var t,n;if(!e)return this;for(t in e)"children"!==t&&(n="set"+v._capitalize(t),v._isFunction(this[n])?this[n](e[t]):this._setAttr(t,e[t]))})),this}isListening(){return this._getCache(W,this._isListening)}_isListening(e){if(!this.listening())return!1;const t=this.getParent();return!t||t===e||this===e||t._isListening(e)}isVisible(){return this._getCache(K,this._isVisible)}_isVisible(e){if(!this.visible())return!1;const t=this.getParent();return!t||t===e||this===e||t._isVisible(e)}shouldDrawHit(e,t=!1){if(e)return this._isVisible(e)&&this._isListening(e);var n=this.getLayer(),r=!1;j._dragElements.forEach((e=>{"dragging"===e.dragStatus&&("Stage"===e.node.nodeType||e.node.getLayer()===n)&&(r=!0)}));var a=!t&&!l.hitOnDragEnabled&&r;return this.isListening()&&this.isVisible()&&!a}show(){return this.visible(!0),this}hide(){return this.visible(!1),this}getZIndex(){return this.index||0}getAbsoluteZIndex(){var e,t,n,r,a=this.getDepth(),i=this,o=0;return"Stage"!==i.nodeType&&function l(s){for(e=[],t=s.length,n=0;n<t;n++)r=s[n],o++,r.nodeType!==Y&&(e=e.concat(r.getChildren().slice())),r._id===i._id&&(n=t);e.length>0&&e[0].getDepth()<=a&&l(e)}(i.getStage().getChildren()),o}getDepth(){for(var e=0,t=this.parent;t;)e++,t=t.parent;return e}_batchTransformChanges(e){this._batchingTransformChange=!0,e(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache($),this._clearSelfAndDescendantCache(B)),this._needClearTransformCache=!1}setPosition(e){return this._batchTransformChanges((()=>{this.x(e.x),this.y(e.y)})),this}getPosition(){return{x:this.x(),y:this.y()}}getRelativePointerPosition(){if(!this.getStage())return null;var e=this.getStage().getPointerPosition();if(!e)return null;var t=this.getAbsoluteTransform().copy();return t.invert(),t.point(e)}getAbsolutePosition(e){let t=!1,n=this.parent;for(;n;){if(n.isCached()){t=!0;break}n=n.parent}t&&!e&&(e=!0);var r=this.getAbsoluteTransform(e).getMatrix(),a=new u,i=this.offset();return a.m=r.slice(),a.translate(i.x,i.y),a.getTranslation()}setAbsolutePosition(e){var t=this._clearTransform();this.attrs.x=t.x,this.attrs.y=t.y,delete t.x,delete t.y,this._clearCache($);var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(e.x,e.y),e={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(t),this.setPosition({x:e.x,y:e.y}),this._clearCache($),this._clearSelfAndDescendantCache(B),this}_setTransform(e){var t;for(t in e)this.attrs[t]=e[t]}_clearTransform(){var e={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,e}move(e){var t=e.x,n=e.y,r=this.x(),a=this.y();return void 0!==t&&(r+=t),void 0!==n&&(a+=n),this.setPosition({x:r,y:a}),this}_eachAncestorReverse(e,t){var n,r,a=[],i=this.getParent();if(!t||t._id!==this._id){for(a.unshift(this);i&&(!t||i._id!==t._id);)a.unshift(i),i=i.parent;for(n=a.length,r=0;r<n;r++)e(a[r])}}rotate(e){return this.rotation(this.rotation()+e),this}moveToTop(){if(!this.parent)return v.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0}moveUp(){if(!this.parent)return v.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)}moveDown(){if(!this.parent)return v.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)}moveToBottom(){if(!this.parent)return v.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}setZIndex(e){if(!this.parent)return v.warn("Node has no parent. zIndex parameter is ignored."),this;(e<0||e>=this.parent.children.length)&&v.warn("Unexpected value "+e+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var t=this.index;return this.parent.children.splice(t,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this}getAbsoluteOpacity(){return this._getCache(F,this._getAbsoluteOpacity)}_getAbsoluteOpacity(){var e=this.opacity(),t=this.getParent();return t&&!t._isUnderCache&&(e*=t.getAbsoluteOpacity()),e}moveTo(e){return this.getParent()!==e&&(this._remove(),e.add(this)),this}toObject(){var e,t,n,r,a={},i=this.getAttrs();for(e in a.attrs={},i)t=i[e],v.isObject(t)&&!v._isPlainObject(t)&&!v._isArray(t)||(n="function"==typeof this[e]&&this[e],delete i[e],r=n?n.call(this):null,i[e]=t,r!==t&&(a.attrs[e]=t));return a.className=this.getClassName(),v._prepareToStringify(a)}toJSON(){return JSON.stringify(this.toObject())}getParent(){return this.parent}findAncestors(e,t,n){var r=[];t&&this._isMatch(e)&&r.push(this);for(var a=this.parent;a;){if(a===n)return r;a._isMatch(e)&&r.push(a),a=a.parent}return r}isAncestorOf(e){return!1}findAncestor(e,t,n){return this.findAncestors(e,t,n)[0]}_isMatch(e){if(!e)return!1;if("function"==typeof e)return e(this);var t,n,r=e.replace(/ /g,"").split(","),a=r.length;for(t=0;t<a;t++)if(n=r[t],v.isValidSelector(n)||(v.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),v.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),v.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1}getLayer(){var e=this.getParent();return e?e.getLayer():null}getStage(){return this._getCache(q,this._getStage)}_getStage(){var e=this.getParent();return e?e.getStage():void 0}fire(e,t={},n){return t.target=t.target||this,n?this._fireAndBubble(e,t):this._fire(e,t),this}getAbsoluteTransform(e){return e?this._getAbsoluteTransform(e):this._getCache(B,this._getAbsoluteTransform)}_getAbsoluteTransform(e){var t;if(e)return t=new u,this._eachAncestorReverse((function(e){var n=e.transformsEnabled();"all"===n?t.multiply(e.getTransform()):"position"===n&&t.translate(e.x()-e.offsetX(),e.y()-e.offsetY())}),e),t;t=this._cache.get(B)||new u,this.parent?this.parent.getAbsoluteTransform().copyInto(t):t.reset();var n=this.transformsEnabled();if("all"===n)t.multiply(this.getTransform());else if("position"===n){const e=this.attrs.x||0,n=this.attrs.y||0,r=this.attrs.offsetX||0,a=this.attrs.offsetY||0;t.translate(e-r,n-a)}return t.dirty=!1,t}getAbsoluteScale(e){for(var t=this;t;)t._isUnderCache&&(e=t),t=t.getParent();const n=this.getAbsoluteTransform(e).decompose();return{x:n.scaleX,y:n.scaleY}}getAbsoluteRotation(){return this.getAbsoluteTransform().decompose().rotation}getTransform(){return this._getCache($,this._getTransform)}_getTransform(){var e,t,n=this._cache.get($)||new u;n.reset();var r=this.x(),a=this.y(),i=l.getAngle(this.rotation()),o=null!==(e=this.attrs.scaleX)&&void 0!==e?e:1,s=null!==(t=this.attrs.scaleY)&&void 0!==t?t:1,c=this.attrs.skewX||0,d=this.attrs.skewY||0,f=this.attrs.offsetX||0,h=this.attrs.offsetY||0;return 0===r&&0===a||n.translate(r,a),0!==i&&n.rotate(i),0===c&&0===d||n.skew(c,d),1===o&&1===s||n.scale(o,s),0===f&&0===h||n.translate(-1*f,-1*h),n.dirty=!1,n}clone(e){var t,n,r,a,i,o=v.cloneObject(this.attrs);for(t in e)o[t]=e[t];var l=new this.constructor(o);for(t in this.eventListeners)for(r=(n=this.eventListeners[t]).length,a=0;a<r;a++)(i=n[a]).name.indexOf("konva")<0&&(l.eventListeners[t]||(l.eventListeners[t]=[]),l.eventListeners[t].push(i));return l}_toKonvaCanvas(e){e=e||{};var t=this.getClientRect(),n=this.getStage(),r=void 0!==e.x?e.x:t.x,a=void 0!==e.y?e.y:t.y,i=e.pixelRatio||1,o=new I({width:e.width||t.width||(n?n.width():0),height:e.height||t.height||(n?n.height():0),pixelRatio:i}),l=o.getContext();return l.save(),(r||a)&&l.translate(-1*r,-1*a),this.drawScene(o),l.restore(),o}toCanvas(e){return this._toKonvaCanvas(e)._canvas}toDataURL(e){var t=(e=e||{}).mimeType||null,n=e.quality||null,r=this._toKonvaCanvas(e).toDataURL(t,n);return e.callback&&e.callback(r),r}toImage(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var t=e.callback;delete e.callback,v._urlToImage(this.toDataURL(e),(function(e){t(e)}))}setSize(e){return this.width(e.width),this.height(e.height),this}getSize(){return{width:this.width(),height:this.height()}}getClassName(){return this.className||this.nodeType}getType(){return this.nodeType}getDragDistance(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():l.dragDistance}_off(e,t,n){var r,a,i,o=this.eventListeners[e];for(r=0;r<o.length;r++)if(a=o[r].name,i=o[r].handler,!("konva"===a&&"konva"!==t||t&&a!==t||n&&n!==i)){if(o.splice(r,1),0===o.length){delete this.eventListeners[e];break}r--}}_fireChangeEvent(e,t,n){this._fire(e+"Change",{oldVal:t,newVal:n})}addName(e){if(!this.hasName(e)){var t=this.name(),n=t?t+" "+e:e;this.name(n)}return this}hasName(e){if(!e)return!1;const t=this.name();return!!t&&-1!==(t||"").split(/\s/g).indexOf(e)}removeName(e){var t=(this.name()||"").split(/\s/g),n=t.indexOf(e);return-1!==n&&(t.splice(n,1),this.name(t.join(" "))),this}setAttr(e,t){var n=this["set"+v._capitalize(e)];return v._isFunction(n)?n.call(this,t):this._setAttr(e,t),this}_requestDraw(){if(l.autoDrawEnabled){const e=this.getLayer()||this.getStage();null==e||e.batchDraw()}}_setAttr(e,t){var n=this.attrs[e];(n!==t||v.isObject(t))&&(null==t?delete this.attrs[e]:this.attrs[e]=t,this._shouldFireChangeEvents&&this._fireChangeEvent(e,n,t),this._requestDraw())}_setComponentAttr(e,t,n){var r;void 0!==n&&((r=this.attrs[e])||(this.attrs[e]=this.getAttr(e)),this.attrs[e][t]=n,this._fireChangeEvent(e,r,n))}_fireAndBubble(e,t,n){if(t&&this.nodeType===Y&&(t.target=this),e!==X&&e!==V||!(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n)){this._fire(e,t);var r=(e===X||e===V)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(t&&!t.cancelBubble||!t)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,e,t,n):this._fireAndBubble.call(this.parent,e,t))}}_getProtoListeners(e){let t=this._cache.get(G);if(!t){t={};let e=Object.getPrototypeOf(this);for(;e;)if(e.eventListeners){for(var n in e.eventListeners){const r=e.eventListeners[n],a=t[n]||[];t[n]=r.concat(a)}e=Object.getPrototypeOf(e)}else e=Object.getPrototypeOf(e);this._cache.set(G,t)}return t[e]}_fire(e,t){(t=t||{}).currentTarget=this,t.type=e;const n=this._getProtoListeners(e);if(n)for(var r=0;r<n.length;r++)n[r].handler.call(this,t);const a=this.eventListeners[e];if(a)for(r=0;r<a.length;r++)a[r].handler.call(this,t)}draw(){return this.drawScene(),this.drawHit(),this}_createDragElement(e){var t=e?e.pointerId:void 0,n=this.getStage(),r=this.getAbsolutePosition(),a=n._getPointerById(t)||n._changedPointerPositions[0]||r;j._dragElements.set(this._id,{node:this,startPointerPos:a,offset:{x:a.x-r.x,y:a.y-r.y},dragStatus:"ready",pointerId:t})}startDrag(e,t=!0){j._dragElements.has(this._id)||this._createDragElement(e),j._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:e&&e.evt},t)}_setDragPosition(e,t){const n=this.getStage()._getPointerById(t.pointerId);if(n){var r={x:n.x-t.offset.x,y:n.y-t.offset.y},a=this.dragBoundFunc();if(void 0!==a){const t=a.call(this,r,e);t?r=t:v.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===r.x&&this._lastPos.y===r.y||(this.setAbsolutePosition(r),this._requestDraw()),this._lastPos=r}}stopDrag(e){const t=j._dragElements.get(this._id);t&&(t.dragStatus="stopped"),j._endDragBefore(e),j._endDragAfter(e)}setDraggable(e){this._setAttr("draggable",e),this._dragChange()}isDragging(){const e=j._dragElements.get(this._id);return!!e&&"dragging"===e.dragStatus}_listenDrag(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(e){if((void 0===e.evt.button||l.dragButtons.indexOf(e.evt.button)>=0)&&!this.isDragging()){var t=!1;j._dragElements.forEach((e=>{this.isAncestorOf(e.node)&&(t=!0)})),t||this._createDragElement(e)}}))}_dragChange(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;const e=j._dragElements.get(this._id),t=e&&"dragging"===e.dragStatus,n=e&&"ready"===e.dragStatus;t?this.stopDrag():n&&j._dragElements.delete(this._id)}}_dragCleanup(){this.off("mousedown.konva"),this.off("touchstart.konva")}isClientRectOnScreen(e={x:0,y:0}){const t=this.getStage();if(!t)return!1;const n={x:-e.x,y:-e.y,width:t.width()+e.x,height:t.height()+e.y};return v.haveIntersection(n,this.getClientRect())}static create(e,t){return v._isString(e)&&(e=JSON.parse(e)),this._createNode(e,t)}static _createNode(e,t){var n,r,a,i=ee.prototype.getClassName.call(e),o=e.children;if(t&&(e.attrs.container=t),l[i]||(v.warn('Can not find a node with class name "'+i+'". Fallback to "Shape".'),i="Shape"),n=new(0,l[i])(e.attrs),o)for(r=o.length,a=0;a<r;a++)n.add(ee._createNode(o[a]));return n}}ee.prototype.nodeType="Node",ee.prototype._attrsAffectingSize=[],ee.prototype.eventListeners={},ee.prototype.on.call(ee.prototype,J,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache($),this._clearSelfAndDescendantCache(B))})),ee.prototype.on.call(ee.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(K)})),ee.prototype.on.call(ee.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(W)})),ee.prototype.on.call(ee.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(F)}));const te=O.addGetterSetter;te(ee,"zIndex"),te(ee,"absolutePosition"),te(ee,"position"),te(ee,"x",0,_()),te(ee,"y",0,_()),te(ee,"globalCompositeOperation","source-over",S()),te(ee,"opacity",1,_()),te(ee,"name","",S()),te(ee,"id","",S()),te(ee,"rotation",0,_()),O.addComponentsGetterSetter(ee,"scale",["x","y"]),te(ee,"scaleX",1,_()),te(ee,"scaleY",1,_()),O.addComponentsGetterSetter(ee,"skew",["x","y"]),te(ee,"skewX",0,_()),te(ee,"skewY",0,_()),O.addComponentsGetterSetter(ee,"offset",["x","y"]),te(ee,"offsetX",0,_()),te(ee,"offsetY",0,_()),te(ee,"dragDistance",null,_()),te(ee,"width",0,_()),te(ee,"height",0,_()),te(ee,"listening",!0,k()),te(ee,"preventDefault",!0,k()),te(ee,"filters",null,(function(e){return this._filterUpToDate=!1,e})),te(ee,"visible",!0,k()),te(ee,"transformsEnabled","all",S()),te(ee,"size"),te(ee,"dragBoundFunc"),te(ee,"draggable",!1,k()),O.backCompat(ee,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"});class ne extends ee{constructor(){super(...arguments),this.children=[]}getChildren(e){if(!e)return this.children||[];const t=this.children||[];var n=[];return t.forEach((function(t){e(t)&&n.push(t)})),n}hasChildren(){return this.getChildren().length>0}removeChildren(){return this.getChildren().forEach((e=>{e.parent=null,e.index=0,e.remove()})),this.children=[],this}destroyChildren(){return this.getChildren().forEach((e=>{e.parent=null,e.index=0,e.destroy()})),this.children=[],this}add(...e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}var n=e[0];return n.getParent()?(n.moveTo(this),this):(this._validateAdd(n),n.index=this.getChildren().length,n.parent=this,n._clearCaches(),this.getChildren().push(n),this._fire("add",{child:n}),this._requestDraw(),this)}destroy(){return this.hasChildren()&&this.destroyChildren(),super.destroy(),this}find(e){return this._generalFind(e,!1)}findOne(e){var t=this._generalFind(e,!0);return t.length>0?t[0]:void 0}_generalFind(e,t){var n=[];return this._descendants((r=>{const a=r._isMatch(e);return a&&n.push(r),!(!a||!t)})),n}_descendants(e){let t=!1;const n=this.getChildren();for(const r of n){if(t=e(r),t)return!0;if(r.hasChildren()&&(t=r._descendants(e),t))return!0}return!1}toObject(){var e=ee.prototype.toObject.call(this);return e.children=[],this.getChildren().forEach((t=>{e.children.push(t.toObject())})),e}isAncestorOf(e){for(var t=e.getParent();t;){if(t._id===this._id)return!0;t=t.getParent()}return!1}clone(e){var t=ee.prototype.clone.call(this,e);return this.getChildren().forEach((function(e){t.add(e.clone())})),t}getAllIntersections(e){var t=[];return this.find("Shape").forEach((function(n){n.isVisible()&&n.intersects(e)&&t.push(n)})),t}_clearSelfAndDescendantCache(e){var t;super._clearSelfAndDescendantCache(e),this.isCached()||null===(t=this.children)||void 0===t||t.forEach((function(t){t._clearSelfAndDescendantCache(e)}))}_setChildrenIndices(){var e;null===(e=this.children)||void 0===e||e.forEach((function(e,t){e.index=t})),this._requestDraw()}drawScene(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas(),a=r&&r.getContext(),i=this._getCanvasCache(),o=i&&i.scene,l=r&&r.isCache;if(!this.isVisible()&&!l)return this;if(o){a.save();var s=this.getAbsoluteTransform(t).getMatrix();a.transform(s[0],s[1],s[2],s[3],s[4],s[5]),this._drawCachedSceneCanvas(a),a.restore()}else this._drawChildren("drawScene",r,t);return this}drawHit(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),r=e||n&&n.hitCanvas,a=r&&r.getContext(),i=this._getCanvasCache();if(i&&i.hit){a.save();var o=this.getAbsoluteTransform(t).getMatrix();a.transform(o[0],o[1],o[2],o[3],o[4],o[5]),this._drawCachedHitCanvas(a),a.restore()}else this._drawChildren("drawHit",r,t);return this}_drawChildren(e,t,n){var r,a=t&&t.getContext(),i=this.clipWidth(),o=this.clipHeight(),l=this.clipFunc(),s=i&&o||l;const u=n===this;if(s){a.save();var c=this.getAbsoluteTransform(n),d=c.getMatrix();if(a.transform(d[0],d[1],d[2],d[3],d[4],d[5]),a.beginPath(),l)l.call(this,a,this);else{var f=this.clipX(),h=this.clipY();a.rect(f,h,i,o)}a.clip(),d=c.copy().invert().getMatrix(),a.transform(d[0],d[1],d[2],d[3],d[4],d[5])}var p=!u&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===e;p&&(a.save(),a._applyGlobalCompositeOperation(this)),null===(r=this.children)||void 0===r||r.forEach((function(r){r[e](t,n)})),p&&a.restore(),s&&a.restore()}getClientRect(e){var t,n,r,a,i,o,l=(e=e||{}).skipTransform,s=e.relativeTo,u=this;null===(t=this.children)||void 0===t||t.forEach((function(t){if(t.visible()){var o=t.getClientRect({relativeTo:u,skipShadow:e.skipShadow,skipStroke:e.skipStroke});0===o.width&&0===o.height||(void 0===n?(n=o.x,r=o.y,a=o.x+o.width,i=o.y+o.height):(n=Math.min(n,o.x),r=Math.min(r,o.y),a=Math.max(a,o.x+o.width),i=Math.max(i,o.y+o.height)))}}));for(var c=this.find("Shape"),d=!1,f=0;f<c.length;f++)if(c[f]._isVisible(this)){d=!0;break}return o=d&&void 0!==n?{x:n,y:r,width:a-n,height:i-r}:{x:0,y:0,width:0,height:0},l?o:this._transformedRect(o,s)}}O.addComponentsGetterSetter(ne,"clip",["x","y","width","height"]),O.addGetterSetter(ne,"clipX",void 0,_()),O.addGetterSetter(ne,"clipY",void 0,_()),O.addGetterSetter(ne,"clipWidth",void 0,_()),O.addGetterSetter(ne,"clipHeight",void 0,_()),O.addGetterSetter(ne,"clipFunc");const re=new Map,ae=void 0!==l._global.PointerEvent;function ie(e){return re.get(e)}function oe(e){return{evt:e,pointerId:e.pointerId}}function le(e,t){return re.get(e)===t}function se(e,t){ue(e),t.getStage()&&(re.set(e,t),ae&&t._fire("gotpointercapture",oe(new PointerEvent("gotpointercapture"))))}function ue(e,t){const n=re.get(e);if(!n)return;const r=n.getStage();r&&r.content,re.delete(e),ae&&n._fire("lostpointercapture",oe(new PointerEvent("lostpointercapture")))}var ce="mouseleave",de="mouseover",fe="mouseenter",he="mousemove",pe="mousedown",ge="mouseup",me="pointermove",ve="pointerdown",ye="pointerup",be="pointercancel",_e="pointerout",we="pointerleave",xe="pointerover",Se="pointerenter",Ee="contextmenu",ke="touchstart",Ce="touchend",Pe="touchmove",Oe="touchcancel",Te="wheel",Me=[[fe,"_pointerenter"],[pe,"_pointerdown"],[he,"_pointermove"],[ge,"_pointerup"],[ce,"_pointerleave"],[ke,"_pointerdown"],[Pe,"_pointermove"],[Ce,"_pointerup"],[Oe,"_pointercancel"],[de,"_pointerover"],[Te,"_wheel"],[Ee,"_contextmenu"],[ve,"_pointerdown"],[me,"_pointermove"],[ye,"_pointerup"],[be,"_pointercancel"],["lostpointercapture","_lostpointercapture"]];const Ne={mouse:{[_e]:"mouseout",[we]:ce,[xe]:de,[Se]:fe,[me]:he,[ve]:pe,[ye]:ge,[be]:"mousecancel",pointerclick:"click",pointerdblclick:"dblclick"},touch:{[_e]:"touchout",[we]:"touchleave",[xe]:"touchover",[Se]:"touchenter",[me]:Pe,[ve]:ke,[ye]:Ce,[be]:Oe,pointerclick:"tap",pointerdblclick:"dbltap"},pointer:{[_e]:_e,[we]:we,[xe]:xe,[Se]:Se,[me]:me,[ve]:ve,[ye]:ye,[be]:be,pointerclick:"pointerclick",pointerdblclick:"pointerdblclick"}},Re=e=>e.indexOf("pointer")>=0?"pointer":e.indexOf("touch")>=0?"touch":"mouse",Le=e=>{const t=Re(e);return"pointer"===t?l.pointerEventsEnabled&&Ne.pointer:"touch"===t?Ne.touch:"mouse"===t?Ne.mouse:void 0};function Ae(e={}){return(e.clipFunc||e.clipWidth||e.clipHeight)&&v.warn("Stage does not support clipping. Please use clip for Layers or Groups."),e}const De=[];class Ie extends ne{constructor(e){super(Ae(e)),this._pointerPositions=[],this._changedPointerPositions=[],this._buildDOM(),this._bindContentEvents(),De.push(this),this.on("widthChange.konva heightChange.konva",this._resizeDOM),this.on("visibleChange.konva",this._checkVisibility),this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(()=>{Ae(this.attrs)})),this._checkVisibility()}_validateAdd(e){const t="Layer"===e.getType(),n="FastLayer"===e.getType();t||n||v.throw("You may only add layers to the stage.")}_checkVisibility(){if(!this.content)return;const e=this.visible()?"":"none";this.content.style.display=e}setContainer(e){if("string"==typeof e){if("."===e.charAt(0)){var t=e.slice(1);e=document.getElementsByClassName(t)[0]}else{var n;n="#"!==e.charAt(0)?e:e.slice(1),e=document.getElementById(n)}if(!e)throw"Can not find container in document with id "+n}return this._setAttr("container",e),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),e.appendChild(this.content)),this}shouldDrawHit(){return!0}clear(){var e,t=this.children,n=t.length;for(e=0;e<n;e++)t[e].clear();return this}clone(e){return e||(e={}),e.container="undefined"!=typeof document&&document.createElement("div"),ne.prototype.clone.call(this,e)}destroy(){super.destroy();var e=this.content;e&&v._isInDocument(e)&&this.container().removeChild(e);var t=De.indexOf(this);return t>-1&&De.splice(t,1),this}getPointerPosition(){const e=this._pointerPositions[0]||this._changedPointerPositions[0];return e?{x:e.x,y:e.y}:(v.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)}_getPointerById(e){return this._pointerPositions.find((t=>t.id===e))}getPointersPositions(){return this._pointerPositions}getStage(){return this}getContent(){return this.content}_toKonvaCanvas(e){(e=e||{}).x=e.x||0,e.y=e.y||0,e.width=e.width||this.width(),e.height=e.height||this.height();var t=new I({width:e.width,height:e.height,pixelRatio:e.pixelRatio||1}),n=t.getContext()._context,r=this.children;return(e.x||e.y)&&n.translate(-1*e.x,-1*e.y),r.forEach((function(t){if(t.isVisible()){var r=t._toKonvaCanvas(e);n.drawImage(r._canvas,e.x,e.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),t}getIntersection(e){if(!e)return null;var t,n=this.children;for(t=n.length-1;t>=0;t--){const r=n[t].getIntersection(e);if(r)return r}return null}_resizeDOM(){var e=this.width(),t=this.height();this.content&&(this.content.style.width=e+"px",this.content.style.height=t+"px"),this.bufferCanvas.setSize(e,t),this.bufferHitCanvas.setSize(e,t),this.children.forEach((n=>{n.setSize({width:e,height:t}),n.draw()}))}add(e,...t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}super.add(e);var r=this.children.length;return r>5&&v.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),e.setSize({width:this.width(),height:this.height()}),e.draw(),l.isBrowser&&this.content.appendChild(e.canvas._canvas),this}getParent(){return null}getLayer(){return null}hasPointerCapture(e){return le(e,this)}setPointerCapture(e){se(e,this)}releaseCapture(e){ue(e)}getLayers(){return this.children}_bindContentEvents(){l.isBrowser&&Me.forEach((([e,t])=>{this.content.addEventListener(e,(e=>{this[t](e)}))}))}_pointerenter(e){this.setPointersPositions(e);const t=Le(e.type);this._fire(t.pointerenter,{evt:e,target:this,currentTarget:this})}_pointerover(e){this.setPointersPositions(e);const t=Le(e.type);this._fire(t.pointerover,{evt:e,target:this,currentTarget:this})}_getTargetShape(e){let t=this[e+"targetShape"];return t&&!t.getStage()&&(t=null),t}_pointerleave(e){const t=Le(e.type),n=Re(e.type);if(t){this.setPointersPositions(e);var r=this._getTargetShape(n),a=!j.isDragging||l.hitOnDragEnabled;r&&a?(r._fireAndBubble(t.pointerout,{evt:e}),r._fireAndBubble(t.pointerleave,{evt:e}),this._fire(t.pointerleave,{evt:e,target:this,currentTarget:this}),this[n+"targetShape"]=null):a&&(this._fire(t.pointerleave,{evt:e,target:this,currentTarget:this}),this._fire(t.pointerout,{evt:e,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[]}}_pointerdown(e){const t=Le(e.type),n=Re(e.type);if(t){this.setPointersPositions(e);var r=!1;this._changedPointerPositions.forEach((a=>{var i=this.getIntersection(a);if(j.justDragged=!1,l["_"+n+"ListenClick"]=!0,!i||!i.isListening())return;l.capturePointerEventsEnabled&&i.setPointerCapture(a.id),this[n+"ClickStartShape"]=i,i._fireAndBubble(t.pointerdown,{evt:e,pointerId:a.id}),r=!0;const o=e.type.indexOf("touch")>=0;i.preventDefault()&&e.cancelable&&o&&e.preventDefault()})),r||this._fire(t.pointerdown,{evt:e,target:this,currentTarget:this,pointerId:this._pointerPositions[0].id})}}_pointermove(e){const t=Le(e.type),n=Re(e.type);if(!t)return;if(j.isDragging&&j.node.preventDefault()&&e.cancelable&&e.preventDefault(),this.setPointersPositions(e),j.isDragging&&!l.hitOnDragEnabled)return;var r={};let a=!1;var i=this._getTargetShape(n);this._changedPointerPositions.forEach((o=>{const l=ie(o.id)||this.getIntersection(o),s=o.id,u={evt:e,pointerId:s};var c=i!==l;if(c&&i&&(i._fireAndBubble(t.pointerout,u,l),i._fireAndBubble(t.pointerleave,u,l)),l){if(r[l._id])return;r[l._id]=!0}l&&l.isListening()?(a=!0,c&&(l._fireAndBubble(t.pointerover,u,i),l._fireAndBubble(t.pointerenter,u,i),this[n+"targetShape"]=l),l._fireAndBubble(t.pointermove,u)):i&&(this._fire(t.pointerover,{evt:e,target:this,currentTarget:this,pointerId:s}),this[n+"targetShape"]=null)})),a||this._fire(t.pointermove,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})}_pointerup(e){const t=Le(e.type),n=Re(e.type);if(!t)return;this.setPointersPositions(e);const r=this[n+"ClickStartShape"],a=this[n+"ClickEndShape"];var i={};let o=!1;this._changedPointerPositions.forEach((s=>{const u=ie(s.id)||this.getIntersection(s);if(u){if(u.releaseCapture(s.id),i[u._id])return;i[u._id]=!0}const c=s.id,d={evt:e,pointerId:c};let f=!1;l["_"+n+"InDblClickWindow"]?(f=!0,clearTimeout(this[n+"DblTimeout"])):j.justDragged||(l["_"+n+"InDblClickWindow"]=!0,clearTimeout(this[n+"DblTimeout"])),this[n+"DblTimeout"]=setTimeout((function(){l["_"+n+"InDblClickWindow"]=!1}),l.dblClickWindow),u&&u.isListening()?(o=!0,this[n+"ClickEndShape"]=u,u._fireAndBubble(t.pointerup,d),l["_"+n+"ListenClick"]&&r&&r===u&&(u._fireAndBubble(t.pointerclick,d),f&&a&&a===u&&u._fireAndBubble(t.pointerdblclick,d))):(this[n+"ClickEndShape"]=null,l["_"+n+"ListenClick"]&&this._fire(t.pointerclick,{evt:e,target:this,currentTarget:this,pointerId:c}),f&&this._fire(t.pointerdblclick,{evt:e,target:this,currentTarget:this,pointerId:c}))})),o||this._fire(t.pointerup,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),l["_"+n+"ListenClick"]=!1,e.cancelable&&e.preventDefault()}_contextmenu(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(Ee,{evt:e}):this._fire(Ee,{evt:e,target:this,currentTarget:this})}_wheel(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble(Te,{evt:e}):this._fire(Te,{evt:e,target:this,currentTarget:this})}_pointercancel(e){this.setPointersPositions(e);const t=ie(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble(ye,oe(e)),ue(e.pointerId)}_lostpointercapture(e){ue(e.pointerId)}setPointersPositions(e){var t=this._getContentPosition(),n=null,r=null;void 0!==(e=e||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],Array.prototype.forEach.call(e.touches,(e=>{this._pointerPositions.push({id:e.identifier,x:(e.clientX-t.left)/t.scaleX,y:(e.clientY-t.top)/t.scaleY})})),Array.prototype.forEach.call(e.changedTouches||e.touches,(e=>{this._changedPointerPositions.push({id:e.identifier,x:(e.clientX-t.left)/t.scaleX,y:(e.clientY-t.top)/t.scaleY})}))):(n=(e.clientX-t.left)/t.scaleX,r=(e.clientY-t.top)/t.scaleY,this.pointerPos={x:n,y:r},this._pointerPositions=[{x:n,y:r,id:v._getFirstPointerId(e)}],this._changedPointerPositions=[{x:n,y:r,id:v._getFirstPointerId(e)}])}_setPointerPosition(e){v.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(e)}_getContentPosition(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var e=this.content.getBoundingClientRect();return{top:e.top,left:e.left,scaleX:e.width/this.content.clientWidth||1,scaleY:e.height/this.content.clientHeight||1}}_buildDOM(){if(this.bufferCanvas=new I({width:this.width(),height:this.height()}),this.bufferHitCanvas=new z({pixelRatio:1,width:this.width(),height:this.height()}),l.isBrowser){var e=this.container();if(!e)throw"Stage has no container. A container is required.";e.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),e.appendChild(this.content),this._resizeDOM()}}cache(){return v.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this}clearCache(){return this}batchDraw(){return this.getChildren().forEach((function(e){e.batchDraw()})),this}}Ie.prototype.nodeType="Stage",s(Ie),O.addGetterSetter(Ie,"container");var ze="hasShadow",je="shadowRGBA",Fe="patternImage",Ge="linearGradient",Be="radialGradient";let Ue;function He(){return Ue||(Ue=v.createCanvasElement().getContext("2d"),Ue)}const We={};class Xe extends ee{constructor(e){let t;for(super(e);t=v.getRandomColor(),!t||t in We;);this.colorKey=t,We[t]=this}getContext(){return v.warn("shape.getContext() method is deprecated. Please don not use it."),this.getLayer().getContext()}getCanvas(){return v.warn("shape.getCanvas() method is deprecated. Please don not use it."),this.getLayer().getCanvas()}getSceneFunc(){return this.attrs.sceneFunc||this._sceneFunc}getHitFunc(){return this.attrs.hitFunc||this._hitFunc}hasShadow(){return this._getCache(ze,this._hasShadow)}_hasShadow(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())}_getFillPattern(){return this._getCache(Fe,this.__getFillPattern)}__getFillPattern(){if(this.fillPatternImage()){const e=He().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");if(e&&e.setTransform){const t=new u;t.translate(this.fillPatternX(),this.fillPatternY()),t.rotate(l.getAngle(this.fillPatternRotation())),t.scale(this.fillPatternScaleX(),this.fillPatternScaleY()),t.translate(-1*this.fillPatternOffsetX(),-1*this.fillPatternOffsetY());const n=t.getMatrix();e.setTransform({a:n[0],b:n[1],c:n[2],d:n[3],e:n[4],f:n[5]})}return e}}_getLinearGradient(){return this._getCache(Ge,this.__getLinearGradient)}__getLinearGradient(){var e=this.fillLinearGradientColorStops();if(e){for(var t=He(),n=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),a=t.createLinearGradient(n.x,n.y,r.x,r.y),i=0;i<e.length;i+=2)a.addColorStop(e[i],e[i+1]);return a}}_getRadialGradient(){return this._getCache(Be,this.__getRadialGradient)}__getRadialGradient(){var e=this.fillRadialGradientColorStops();if(e){for(var t=He(),n=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),a=t.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),i=0;i<e.length;i+=2)a.addColorStop(e[i],e[i+1]);return a}}getShadowRGBA(){return this._getCache(je,this._getShadowRGBA)}_getShadowRGBA(){if(this.hasShadow()){var e=v.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.shadowOpacity()||1)+")"}}hasFill(){return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(()=>this.fillEnabled()&&!!(this.fill()||this.fillPatternImage()||this.fillLinearGradientColorStops()||this.fillRadialGradientColorStops())))}hasStroke(){return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(()=>this.strokeEnabled()&&this.strokeWidth()&&!(!this.stroke()&&!this.strokeLinearGradientColorStops())))}hasHitStroke(){const e=this.hitStrokeWidth();return"auto"===e?this.hasStroke():this.strokeEnabled()&&!!e}intersects(e){var t=this.getStage().bufferHitCanvas;return t.getContext().clear(),this.drawHit(t,null,!0),t.context.getImageData(Math.round(e.x),Math.round(e.y),1,1).data[3]>0}destroy(){return ee.prototype.destroy.call(this),delete We[this.colorKey],delete this.colorKey,this}_useBufferCanvas(e){var t;if(!this.getStage())return!1;if(null!==(t=this.attrs.perfectDrawEnabled)&&void 0!==t&&!t)return!1;const n=e||this.hasFill(),r=this.hasStroke(),a=1!==this.getAbsoluteOpacity();if(n&&r&&a)return!0;const i=this.hasShadow(),o=this.shadowForStrokeEnabled();return!!(n&&r&&i&&o)}setStrokeHitEnabled(e){v.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),e?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)}getStrokeHitEnabled(){return 0!==this.hitStrokeWidth()}getSelfRect(){var e=this.size();return{x:this._centroid?-e.width/2:0,y:this._centroid?-e.height/2:0,width:e.width,height:e.height}}getClientRect(e={}){const t=e.skipTransform,n=e.relativeTo,r=this.getSelfRect(),a=!e.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,i=r.width+a,o=r.height+a,l=!e.skipShadow&&this.hasShadow(),s=l?this.shadowOffsetX():0,u=l?this.shadowOffsetY():0,c=i+Math.abs(s),d=o+Math.abs(u),f=l&&this.shadowBlur()||0,h=c+2*f,p=d+2*f;let g=0;Math.round(a/2)!==a/2&&(g=1);const m={width:h+g,height:p+g,x:-Math.round(a/2+f)+Math.min(s,0)+r.x,y:-Math.round(a/2+f)+Math.min(u,0)+r.y};return t?m:this._transformedRect(m,n)}drawScene(e,t){var n,r,a=this.getLayer(),i=e||a.getCanvas(),o=i.getContext(),l=this._getCanvasCache(),s=this.getSceneFunc(),u=this.hasShadow(),c=i.isCache,d=t===this;if(!this.isVisible()&&!d)return this;if(l){o.save();var f=this.getAbsoluteTransform(t).getMatrix();return o.transform(f[0],f[1],f[2],f[3],f[4],f[5]),this._drawCachedSceneCanvas(o),o.restore(),this}if(!s)return this;if(o.save(),this._useBufferCanvas()&&!c){(r=(n=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var h=this.getAbsoluteTransform(t).getMatrix();r.transform(h[0],h[1],h[2],h[3],h[4],h[5]),s.call(this,r,this),r.restore();var p=n.pixelRatio;u&&o._applyShadow(this),o._applyOpacity(this),o._applyGlobalCompositeOperation(this),o.drawImage(n._canvas,0,0,n.width/p,n.height/p)}else o._applyLineJoin(this),d||(h=this.getAbsoluteTransform(t).getMatrix(),o.transform(h[0],h[1],h[2],h[3],h[4],h[5]),o._applyOpacity(this),o._applyGlobalCompositeOperation(this)),u&&o._applyShadow(this),s.call(this,o,this);return o.restore(),this}drawHit(e,t,n=!1){if(!this.shouldDrawHit(t,n))return this;var r=this.getLayer(),a=e||r.hitCanvas,i=a&&a.getContext(),o=this.hitFunc()||this.sceneFunc(),l=this._getCanvasCache(),s=l&&l.hit;if(this.colorKey||v.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()"),s){i.save();var u=this.getAbsoluteTransform(t).getMatrix();return i.transform(u[0],u[1],u[2],u[3],u[4],u[5]),this._drawCachedHitCanvas(i),i.restore(),this}if(!o)return this;if(i.save(),i._applyLineJoin(this),this!==t){var c=this.getAbsoluteTransform(t).getMatrix();i.transform(c[0],c[1],c[2],c[3],c[4],c[5])}return o.call(this,i,this),i.restore(),this}drawHitFromCache(e=0){var t,n,r,a,i,o=this._getCanvasCache(),l=this._getCachedSceneCanvas(),s=o.hit,u=s.getContext(),c=s.getWidth(),d=s.getHeight();u.clear(),u.drawImage(l._canvas,0,0,c,d);try{for(r=(n=(t=u.getImageData(0,0,c,d)).data).length,a=v._hexToRgb(this.colorKey),i=0;i<r;i+=4)n[i+3]>e?(n[i]=a.r,n[i+1]=a.g,n[i+2]=a.b,n[i+3]=255):n[i+3]=0;u.putImageData(t,0,0)}catch(e){v.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this}hasPointerCapture(e){return le(e,this)}setPointerCapture(e){se(e,this)}releaseCapture(e){ue(e)}}Xe.prototype._fillFunc=function(e){e.fill()},Xe.prototype._strokeFunc=function(e){e.stroke()},Xe.prototype._fillFuncHit=function(e){e.fill()},Xe.prototype._strokeFuncHit=function(e){e.stroke()},Xe.prototype._centroid=!1,Xe.prototype.nodeType="Shape",s(Xe),Xe.prototype.eventListeners={},Xe.prototype.on.call(Xe.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(ze)})),Xe.prototype.on.call(Xe.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(je)})),Xe.prototype.on.call(Xe.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetX.konva fillPatternOffsetY.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotation.konva",(function(){this._clearCache(Fe)})),Xe.prototype.on.call(Xe.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(Ge)})),Xe.prototype.on.call(Xe.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(Be)})),O.addGetterSetter(Xe,"stroke",void 0,E()),O.addGetterSetter(Xe,"strokeWidth",2,_()),O.addGetterSetter(Xe,"fillAfterStrokeEnabled",!1),O.addGetterSetter(Xe,"hitStrokeWidth","auto",x()),O.addGetterSetter(Xe,"strokeHitEnabled",!0,k()),O.addGetterSetter(Xe,"perfectDrawEnabled",!0,k()),O.addGetterSetter(Xe,"shadowForStrokeEnabled",!0,k()),O.addGetterSetter(Xe,"lineJoin"),O.addGetterSetter(Xe,"lineCap"),O.addGetterSetter(Xe,"sceneFunc"),O.addGetterSetter(Xe,"hitFunc"),O.addGetterSetter(Xe,"dash"),O.addGetterSetter(Xe,"dashOffset",0,_()),O.addGetterSetter(Xe,"shadowColor",void 0,S()),O.addGetterSetter(Xe,"shadowBlur",0,_()),O.addGetterSetter(Xe,"shadowOpacity",1,_()),O.addComponentsGetterSetter(Xe,"shadowOffset",["x","y"]),O.addGetterSetter(Xe,"shadowOffsetX",0,_()),O.addGetterSetter(Xe,"shadowOffsetY",0,_()),O.addGetterSetter(Xe,"fillPatternImage"),O.addGetterSetter(Xe,"fill",void 0,E()),O.addGetterSetter(Xe,"fillPatternX",0,_()),O.addGetterSetter(Xe,"fillPatternY",0,_()),O.addGetterSetter(Xe,"fillLinearGradientColorStops"),O.addGetterSetter(Xe,"strokeLinearGradientColorStops"),O.addGetterSetter(Xe,"fillRadialGradientStartRadius",0),O.addGetterSetter(Xe,"fillRadialGradientEndRadius",0),O.addGetterSetter(Xe,"fillRadialGradientColorStops"),O.addGetterSetter(Xe,"fillPatternRepeat","repeat"),O.addGetterSetter(Xe,"fillEnabled",!0),O.addGetterSetter(Xe,"strokeEnabled",!0),O.addGetterSetter(Xe,"shadowEnabled",!0),O.addGetterSetter(Xe,"dashEnabled",!0),O.addGetterSetter(Xe,"strokeScaleEnabled",!0),O.addGetterSetter(Xe,"fillPriority","color"),O.addComponentsGetterSetter(Xe,"fillPatternOffset",["x","y"]),O.addGetterSetter(Xe,"fillPatternOffsetX",0,_()),O.addGetterSetter(Xe,"fillPatternOffsetY",0,_()),O.addComponentsGetterSetter(Xe,"fillPatternScale",["x","y"]),O.addGetterSetter(Xe,"fillPatternScaleX",1,_()),O.addGetterSetter(Xe,"fillPatternScaleY",1,_()),O.addComponentsGetterSetter(Xe,"fillLinearGradientStartPoint",["x","y"]),O.addComponentsGetterSetter(Xe,"strokeLinearGradientStartPoint",["x","y"]),O.addGetterSetter(Xe,"fillLinearGradientStartPointX",0),O.addGetterSetter(Xe,"strokeLinearGradientStartPointX",0),O.addGetterSetter(Xe,"fillLinearGradientStartPointY",0),O.addGetterSetter(Xe,"strokeLinearGradientStartPointY",0),O.addComponentsGetterSetter(Xe,"fillLinearGradientEndPoint",["x","y"]),O.addComponentsGetterSetter(Xe,"strokeLinearGradientEndPoint",["x","y"]),O.addGetterSetter(Xe,"fillLinearGradientEndPointX",0),O.addGetterSetter(Xe,"strokeLinearGradientEndPointX",0),O.addGetterSetter(Xe,"fillLinearGradientEndPointY",0),O.addGetterSetter(Xe,"strokeLinearGradientEndPointY",0),O.addComponentsGetterSetter(Xe,"fillRadialGradientStartPoint",["x","y"]),O.addGetterSetter(Xe,"fillRadialGradientStartPointX",0),O.addGetterSetter(Xe,"fillRadialGradientStartPointY",0),O.addComponentsGetterSetter(Xe,"fillRadialGradientEndPoint",["x","y"]),O.addGetterSetter(Xe,"fillRadialGradientEndPointX",0),O.addGetterSetter(Xe,"fillRadialGradientEndPointY",0),O.addGetterSetter(Xe,"fillPatternRotation",0),O.backCompat(Xe,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"});var Ve=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],Ye=Ve.length;class Qe extends ne{constructor(e){super(e),this.canvas=new I,this.hitCanvas=new z({pixelRatio:1}),this._waitingForDraw=!1,this.on("visibleChange.konva",this._checkVisibility),this._checkVisibility(),this.on("imageSmoothingEnabledChange.konva",this._setSmoothEnabled),this._setSmoothEnabled()}createPNGStream(){return this.canvas._canvas.createPNGStream()}getCanvas(){return this.canvas}getNativeCanvasElement(){return this.canvas._canvas}getHitCanvas(){return this.hitCanvas}getContext(){return this.getCanvas().getContext()}clear(e){return this.getContext().clear(e),this.getHitCanvas().getContext().clear(e),this}setZIndex(e){super.setZIndex(e);var t=this.getStage();return t&&t.content&&(t.content.removeChild(this.getNativeCanvasElement()),e<t.children.length-1?t.content.insertBefore(this.getNativeCanvasElement(),t.children[e+1].getCanvas()._canvas):t.content.appendChild(this.getNativeCanvasElement())),this}moveToTop(){ee.prototype.moveToTop.call(this);var e=this.getStage();return e&&e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.appendChild(this.getNativeCanvasElement())),!0}moveUp(){if(!ee.prototype.moveUp.call(this))return!1;var e=this.getStage();return!(!e||!e.content||(e.content.removeChild(this.getNativeCanvasElement()),this.index<e.children.length-1?e.content.insertBefore(this.getNativeCanvasElement(),e.children[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getNativeCanvasElement()),0))}moveDown(){if(ee.prototype.moveDown.call(this)){var e=this.getStage();if(e){var t=e.children;e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.insertBefore(this.getNativeCanvasElement(),t[this.index+1].getCanvas()._canvas))}return!0}return!1}moveToBottom(){if(ee.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var t=e.children;e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.insertBefore(this.getNativeCanvasElement(),t[1].getCanvas()._canvas))}return!0}return!1}getLayer(){return this}remove(){var e=this.getNativeCanvasElement();return ee.prototype.remove.call(this),e&&e.parentNode&&v._isInDocument(e)&&e.parentNode.removeChild(e),this}getStage(){return this.parent}setSize({width:e,height:t}){return this.canvas.setSize(e,t),this.hitCanvas.setSize(e,t),this._setSmoothEnabled(),this}_validateAdd(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&v.throw("You may only add groups and shapes to a layer.")}_toKonvaCanvas(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.x(),e.y=void 0!==e.y?e.y:this.y(),ee.prototype._toKonvaCanvas.call(this,e)}_checkVisibility(){const e=this.visible();this.canvas._canvas.style.display=e?"block":"none"}_setSmoothEnabled(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()}getWidth(){if(this.parent)return this.parent.width()}setWidth(){v.warn('Can not change width of layer. Use "stage.width(value)" function instead.')}getHeight(){if(this.parent)return this.parent.height()}setHeight(){v.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}batchDraw(){return this._waitingForDraw||(this._waitingForDraw=!0,v.requestAnimFrame((()=>{this.draw(),this._waitingForDraw=!1}))),this}getIntersection(e){if(!this.isListening()||!this.isVisible())return null;for(var t=1,n=!1;;){for(let r=0;r<Ye;r++){const a=Ve[r],i=this._getIntersection({x:e.x+a.x*t,y:e.y+a.y*t}),o=i.shape;if(o)return o;if(n=!!i.antialiased,!i.antialiased)break}if(!n)return null;t+=1}}_getIntersection(e){const t=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(e.x*t),Math.round(e.y*t),1,1).data,r=n[3];if(255===r){const e=v._rgbToHex(n[0],n[1],n[2]),t=We["#"+e];return t?{shape:t}:{antialiased:!0}}return r>0?{antialiased:!0}:{}}drawScene(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),ne.prototype.drawScene.call(this,r,t),this._fire("draw",{node:this}),this}drawHit(e,t){var n=this.getLayer(),r=e||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),ne.prototype.drawHit.call(this,r,t),this}enableHitGraph(){return this.hitGraphEnabled(!0),this}disableHitGraph(){return this.hitGraphEnabled(!1),this}setHitGraphEnabled(e){v.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(e)}getHitGraphEnabled(e){return v.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()}toggleHitCanvas(){if(this.parent&&this.parent.content){var e=this.parent;this.hitCanvas._canvas.parentNode?e.content.removeChild(this.hitCanvas._canvas):e.content.appendChild(this.hitCanvas._canvas)}}}Qe.prototype.nodeType="Layer",s(Qe),O.addGetterSetter(Qe,"imageSmoothingEnabled",!0),O.addGetterSetter(Qe,"clearBeforeDraw",!0),O.addGetterSetter(Qe,"hitGraphEnabled",!0,k());class qe extends Qe{constructor(e){super(e),this.listening(!1),v.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.')}}qe.prototype.nodeType="FastLayer",s(qe);class $e extends ne{_validateAdd(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&v.throw("You may only add groups and shapes to groups.")}}$e.prototype.nodeType="Group",s($e);var Ke=o.performance&&o.performance.now?function(){return o.performance.now()}:function(){return(new Date).getTime()};class Je{constructor(e,t){this.id=Je.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:Ke(),frameRate:0},this.func=e,this.setLayers(t)}setLayers(e){var t;return t=e?e.length>0?e:[e]:[],this.layers=t,this}getLayers(){return this.layers}addLayer(e){var t,n=this.layers,r=n.length;for(t=0;t<r;t++)if(n[t]._id===e._id)return!1;return this.layers.push(e),!0}isRunning(){var e,t=Je.animations,n=t.length;for(e=0;e<n;e++)if(t[e].id===this.id)return!0;return!1}start(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=Ke(),Je._addAnimation(this),this}stop(){return Je._removeAnimation(this),this}_updateFrameObject(e){this.frame.timeDiff=e-this.frame.lastTime,this.frame.lastTime=e,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}static _addAnimation(e){this.animations.push(e),this._handleAnimation()}static _removeAnimation(e){var t,n=e.id,r=this.animations,a=r.length;for(t=0;t<a;t++)if(r[t].id===n){this.animations.splice(t,1);break}}static _runFrames(){var e,t,n,r,a,i,o,l,s={},u=this.animations;for(r=0;r<u.length;r++)if(t=(e=u[r]).layers,n=e.func,e._updateFrameObject(Ke()),i=t.length,!n||!1!==n.call(e,e.frame))for(a=0;a<i;a++)void 0!==(o=t[a])._id&&(s[o._id]=o);for(l in s)s.hasOwnProperty(l)&&s[l].batchDraw()}static _animationLoop(){var e=Je;e.animations.length?(e._runFrames(),v.requestAnimFrame(e._animationLoop)):e.animRunning=!1}static _handleAnimation(){this.animRunning||(this.animRunning=!0,v.requestAnimFrame(this._animationLoop))}}Je.animations=[],Je.animIdCounter=0,Je.animRunning=!1;var Ze={node:1,duration:1,easing:1,onFinish:1,yoyo:1},et=0,tt=["fill","stroke","shadowColor"];class nt{constructor(e,t,n,r,a,i,o){this.prop=e,this.propFunc=t,this.begin=r,this._pos=r,this.duration=i,this._change=0,this.prevPos=0,this.yoyo=o,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=a-this.begin,this.pause()}fire(e){var t=this[e];t&&t()}setTime(e){e>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():e<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=e,this.update())}getTime(){return this._time}setPosition(e){this.prevPos=this._pos,this.propFunc(e),this._pos=e}getPosition(e){return void 0===e&&(e=this._time),this.func(e,this.begin,this._change,this.duration)}play(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")}reverse(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")}seek(e){this.pause(),this._time=e,this.update(),this.fire("onSeek")}reset(){this.pause(),this._time=0,this.update(),this.fire("onReset")}finish(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")}update(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")}onEnterFrame(){var e=this.getTimer()-this._startTime;2===this.state?this.setTime(e):3===this.state&&this.setTime(this.duration-e)}pause(){this.state=1,this.fire("onPause")}getTimer(){return(new Date).getTime()}}class rt{constructor(e){var t,n,r=this,a=e.node,i=a._id,o=e.easing||at.Linear,s=!!e.yoyo;t=void 0===e.duration?.3:0===e.duration?.001:e.duration,this.node=a,this._id=et++;var u=a.getLayer()||(a instanceof l.Stage?a.getLayers():null);for(n in u||v.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new Je((function(){r.tween.onEnterFrame()}),u),this.tween=new nt(n,(function(e){r._tweenFunc(e)}),o,0,1,1e3*t,s),this._addListeners(),rt.attrs[i]||(rt.attrs[i]={}),rt.attrs[i][this._id]||(rt.attrs[i][this._id]={}),rt.tweens[i]||(rt.tweens[i]={}),e)void 0===Ze[n]&&this._addAttr(n,e[n]);this.reset(),this.onFinish=e.onFinish,this.onReset=e.onReset,this.onUpdate=e.onUpdate}_addAttr(e,t){var n,r,a,i,o,l,s,u,c=this.node,d=c._id;if((a=rt.tweens[d][e])&&delete rt.attrs[d][a][e],n=c.getAttr(e),v._isArray(t))if(r=[],o=Math.max(t.length,n.length),"points"===e&&t.length!==n.length&&(t.length>n.length?(s=n,n=v._prepareArrayForTween(n,t,c.closed())):(l=t,t=v._prepareArrayForTween(t,n,c.closed()))),0===e.indexOf("fill"))for(i=0;i<o;i++)if(i%2==0)r.push(t[i]-n[i]);else{var f=v.colorToRGBA(n[i]);u=v.colorToRGBA(t[i]),n[i]=f,r.push({r:u.r-f.r,g:u.g-f.g,b:u.b-f.b,a:u.a-f.a})}else for(i=0;i<o;i++)r.push(t[i]-n[i]);else-1!==tt.indexOf(e)?(n=v.colorToRGBA(n),r={r:(u=v.colorToRGBA(t)).r-n.r,g:u.g-n.g,b:u.b-n.b,a:u.a-n.a}):r=t-n;rt.attrs[d][this._id][e]={start:n,diff:r,end:t,trueEnd:l,trueStart:s},rt.tweens[d][e]=this._id}_tweenFunc(e){var t,n,r,a,i,o,l,s,u=this.node,c=rt.attrs[u._id][this._id];for(t in c){if(r=(n=c[t]).start,a=n.diff,s=n.end,v._isArray(r))if(i=[],l=Math.max(r.length,s.length),0===t.indexOf("fill"))for(o=0;o<l;o++)o%2==0?i.push((r[o]||0)+a[o]*e):i.push("rgba("+Math.round(r[o].r+a[o].r*e)+","+Math.round(r[o].g+a[o].g*e)+","+Math.round(r[o].b+a[o].b*e)+","+(r[o].a+a[o].a*e)+")");else for(o=0;o<l;o++)i.push((r[o]||0)+a[o]*e);else i=-1!==tt.indexOf(t)?"rgba("+Math.round(r.r+a.r*e)+","+Math.round(r.g+a.g*e)+","+Math.round(r.b+a.b*e)+","+(r.a+a.a*e)+")":r+a*e;u.setAttr(t,i)}}_addListeners(){this.tween.onPlay=()=>{this.anim.start()},this.tween.onReverse=()=>{this.anim.start()},this.tween.onPause=()=>{this.anim.stop()},this.tween.onFinish=()=>{var e=this.node,t=rt.attrs[e._id][this._id];t.points&&t.points.trueEnd&&e.setAttr("points",t.points.trueEnd),this.onFinish&&this.onFinish.call(this)},this.tween.onReset=()=>{var e=this.node,t=rt.attrs[e._id][this._id];t.points&&t.points.trueStart&&e.points(t.points.trueStart),this.onReset&&this.onReset()},this.tween.onUpdate=()=>{this.onUpdate&&this.onUpdate.call(this)}}play(){return this.tween.play(),this}reverse(){return this.tween.reverse(),this}reset(){return this.tween.reset(),this}seek(e){return this.tween.seek(1e3*e),this}pause(){return this.tween.pause(),this}finish(){return this.tween.finish(),this}destroy(){var e,t=this.node._id,n=this._id,r=rt.tweens[t];for(e in this.pause(),r)delete rt.tweens[t][e];delete rt.attrs[t][n]}}rt.attrs={},rt.tweens={},ee.prototype.to=function(e){var t=e.onFinish;e.node=this,e.onFinish=function(){this.destroy(),t&&t()},new rt(e).play()};const at={BackEaseIn(e,t,n,r){var a=1.70158;return n*(e/=r)*e*((a+1)*e-a)+t},BackEaseOut(e,t,n,r){var a=1.70158;return n*((e=e/r-1)*e*((a+1)*e+a)+1)+t},BackEaseInOut(e,t,n,r){var a=1.70158;return(e/=r/2)<1?n/2*(e*e*((1+(a*=1.525))*e-a))+t:n/2*((e-=2)*e*((1+(a*=1.525))*e+a)+2)+t},ElasticEaseIn(e,t,n,r,a,i){var o=0;return 0===e?t:1==(e/=r)?t+n:(i||(i=.3*r),!a||a<Math.abs(n)?(a=n,o=i/4):o=i/(2*Math.PI)*Math.asin(n/a),-a*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/i)+t)},ElasticEaseOut(e,t,n,r,a,i){var o=0;return 0===e?t:1==(e/=r)?t+n:(i||(i=.3*r),!a||a<Math.abs(n)?(a=n,o=i/4):o=i/(2*Math.PI)*Math.asin(n/a),a*Math.pow(2,-10*e)*Math.sin((e*r-o)*(2*Math.PI)/i)+n+t)},ElasticEaseInOut(e,t,n,r,a,i){var o=0;return 0===e?t:2==(e/=r/2)?t+n:(i||(i=r*(.3*1.5)),!a||a<Math.abs(n)?(a=n,o=i/4):o=i/(2*Math.PI)*Math.asin(n/a),e<1?a*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/i)*-.5+t:a*Math.pow(2,-10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/i)*.5+n+t)},BounceEaseOut:(e,t,n,r)=>(e/=r)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t,BounceEaseIn:(e,t,n,r)=>n-at.BounceEaseOut(r-e,0,n,r)+t,BounceEaseInOut:(e,t,n,r)=>e<r/2?.5*at.BounceEaseIn(2*e,0,n,r)+t:.5*at.BounceEaseOut(2*e-r,0,n,r)+.5*n+t,EaseIn:(e,t,n,r)=>n*(e/=r)*e+t,EaseOut:(e,t,n,r)=>-n*(e/=r)*(e-2)+t,EaseInOut:(e,t,n,r)=>(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t,StrongEaseIn:(e,t,n,r)=>n*(e/=r)*e*e*e*e+t,StrongEaseOut:(e,t,n,r)=>n*((e=e/r-1)*e*e*e*e+1)+t,StrongEaseInOut:(e,t,n,r)=>(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t,Linear:(e,t,n,r)=>n*e/r+t},it=v._assign(l,{Util:v,Transform:u,Node:ee,Container:ne,Stage:Ie,stages:De,Layer:Qe,FastLayer:qe,Group:$e,DD:j,Shape:Xe,shapes:We,Animation:Je,Tween:rt,Easings:at,Context:R,Canvas:D});class ot extends Xe{_sceneFunc(e){var t=l.getAngle(this.angle()),n=this.clockwise();e.beginPath(),e.arc(0,0,this.outerRadius(),0,t,n),e.arc(0,0,this.innerRadius(),t,0,!n),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}}function lt(e,t,n,r,a,i,o){var l=Math.sqrt(Math.pow(n-e,2)+Math.pow(r-t,2)),s=Math.sqrt(Math.pow(a-n,2)+Math.pow(i-r,2)),u=o*l/(l+s),c=o*s/(l+s);return[n-u*(a-e),r-u*(i-t),n+c*(a-e),r+c*(i-t)]}function st(e,t){var n,r,a=e.length,i=[];for(n=2;n<a-2;n+=2)r=lt(e[n-2],e[n-1],e[n],e[n+1],e[n+2],e[n+3],t),isNaN(r[0])||(i.push(r[0]),i.push(r[1]),i.push(e[n]),i.push(e[n+1]),i.push(r[2]),i.push(r[3]));return i}ot.prototype._centroid=!0,ot.prototype.className="Arc",ot.prototype._attrsAffectingSize=["innerRadius","outerRadius"],s(ot),O.addGetterSetter(ot,"innerRadius",0,_()),O.addGetterSetter(ot,"outerRadius",0,_()),O.addGetterSetter(ot,"angle",0,_()),O.addGetterSetter(ot,"clockwise",!1,k());class ut extends Xe{constructor(e){super(e),this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")}))}_sceneFunc(e){var t,n,r,a=this.points(),i=a.length,o=this.tension(),l=this.closed(),s=this.bezier();if(i){if(e.beginPath(),e.moveTo(a[0],a[1]),0!==o&&i>4){for(n=(t=this.getTensionPoints()).length,r=l?0:4,l||e.quadraticCurveTo(t[0],t[1],t[2],t[3]);r<n-2;)e.bezierCurveTo(t[r++],t[r++],t[r++],t[r++],t[r++],t[r++]);l||e.quadraticCurveTo(t[n-2],t[n-1],a[i-2],a[i-1])}else if(s)for(r=2;r<i;)e.bezierCurveTo(a[r++],a[r++],a[r++],a[r++],a[r++],a[r++]);else for(r=2;r<i;r+=2)e.lineTo(a[r],a[r+1]);l?(e.closePath(),e.fillStrokeShape(this)):e.strokeShape(this)}}getTensionPoints(){return this._getCache("tensionPoints",this._getTensionPoints)}_getTensionPoints(){return this.closed()?this._getTensionPointsClosed():st(this.points(),this.tension())}_getTensionPointsClosed(){var e=this.points(),t=e.length,n=this.tension(),r=lt(e[t-2],e[t-1],e[0],e[1],e[2],e[3],n),a=lt(e[t-4],e[t-3],e[t-2],e[t-1],e[0],e[1],n),i=st(e,n);return[r[2],r[3]].concat(i).concat([a[0],a[1],e[t-2],e[t-1],a[2],a[3],r[0],r[1],e[0],e[1]])}getWidth(){return this.getSelfRect().width}getHeight(){return this.getSelfRect().height}getSelfRect(){var e=this.points();if(e.length<4)return{x:e[0]||0,y:e[1]||0,width:0,height:0};for(var t,n,r=(e=0!==this.tension()?[e[0],e[1],...this._getTensionPoints(),e[e.length-2],e[e.length-1]]:this.points())[0],a=e[0],i=e[1],o=e[1],l=0;l<e.length/2;l++)t=e[2*l],n=e[2*l+1],r=Math.min(r,t),a=Math.max(a,t),i=Math.min(i,n),o=Math.max(o,n);return{x:r,y:i,width:a-r,height:o-i}}}ut.prototype.className="Line",ut.prototype._attrsAffectingSize=["points","bezier","tension"],s(ut),O.addGetterSetter(ut,"closed",!1),O.addGetterSetter(ut,"bezier",!1),O.addGetterSetter(ut,"tension",0,_()),O.addGetterSetter(ut,"points",[],function(){if(l.isUnminified)return function(e,t){return v._isArray(e)?e.forEach((function(e){v._isNumber(e)||v.warn('"'+t+'" attribute has non numeric element '+e+". Make sure that all elements are numbers.")})):v.warn(y(e)+' is a not valid value for "'+t+'" attribute. The value should be a array of numbers.'),e}}());class ct extends Xe{constructor(e){super(e),this.dataArray=[],this.pathLength=0,this.dataArray=ct.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength;this.on("dataChange.konva",(function(){this.dataArray=ct.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength}))}_sceneFunc(e){var t=this.dataArray;e.beginPath();for(var n=!1,r=0;r<t.length;r++){var a=t[r].command,i=t[r].points;switch(a){case"L":e.lineTo(i[0],i[1]);break;case"M":e.moveTo(i[0],i[1]);break;case"C":e.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case"Q":e.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case"A":var o=i[0],l=i[1],s=i[2],u=i[3],c=i[4],d=i[5],f=i[6],h=i[7],p=s>u?s:u,g=s>u?1:s/u,m=s>u?u/s:1;e.translate(o,l),e.rotate(f),e.scale(g,m),e.arc(0,0,p,c,c+d,1-h),e.scale(1/g,1/m),e.rotate(-f),e.translate(-o,-l);break;case"z":n=!0,e.closePath()}}n||this.hasFill()?e.fillStrokeShape(this):e.strokeShape(this)}getSelfRect(){var e=[];this.dataArray.forEach((function(t){if("A"===t.command){var n=t.points[4],r=t.points[5],a=t.points[4]+r,i=Math.PI/180;if(Math.abs(n-a)<i&&(i=Math.abs(n-a)),r<0)for(let r=n-i;r>a;r-=i){const n=ct.getPointOnEllipticalArc(t.points[0],t.points[1],t.points[2],t.points[3],r,0);e.push(n.x,n.y)}else for(let r=n+i;r<a;r+=i){const n=ct.getPointOnEllipticalArc(t.points[0],t.points[1],t.points[2],t.points[3],r,0);e.push(n.x,n.y)}}else if("C"===t.command)for(let n=0;n<=1;n+=.01){const r=ct.getPointOnCubicBezier(n,t.start.x,t.start.y,t.points[0],t.points[1],t.points[2],t.points[3],t.points[4],t.points[5]);e.push(r.x,r.y)}else e=e.concat(t.points)}));for(var t,n,r=e[0],a=e[0],i=e[1],o=e[1],l=0;l<e.length/2;l++)t=e[2*l],n=e[2*l+1],isNaN(t)||(r=Math.min(r,t),a=Math.max(a,t)),isNaN(n)||(i=Math.min(i,n),o=Math.max(o,n));return{x:Math.round(r),y:Math.round(i),width:Math.round(a-r),height:Math.round(o-i)}}getLength(){return this.pathLength}getPointAtLength(e){var t,n=0,r=this.dataArray.length;if(!r)return null;for(;n<r&&e>this.dataArray[n].pathLength;)e-=this.dataArray[n].pathLength,++n;if(n===r)return{x:(t=this.dataArray[n-1].points.slice(-2))[0],y:t[1]};if(e<.01)return{x:(t=this.dataArray[n].points.slice(0,2))[0],y:t[1]};var a=this.dataArray[n],i=a.points;switch(a.command){case"L":return ct.getPointOnLine(e,a.start.x,a.start.y,i[0],i[1]);case"C":return ct.getPointOnCubicBezier(e/a.pathLength,a.start.x,a.start.y,i[0],i[1],i[2],i[3],i[4],i[5]);case"Q":return ct.getPointOnQuadraticBezier(e/a.pathLength,a.start.x,a.start.y,i[0],i[1],i[2],i[3]);case"A":var o=i[0],l=i[1],s=i[2],u=i[3],c=i[4],d=i[5],f=i[6];return c+=d*e/a.pathLength,ct.getPointOnEllipticalArc(o,l,s,u,c,f)}return null}static getLineLength(e,t,n,r){return Math.sqrt((n-e)*(n-e)+(r-t)*(r-t))}static getPointOnLine(e,t,n,r,a,i,o){void 0===i&&(i=t),void 0===o&&(o=n);var l=(a-n)/(r-t+1e-8),s=Math.sqrt(e*e/(1+l*l));r<t&&(s*=-1);var u,c=l*s;if(r===t)u={x:i,y:o+c};else if((o-n)/(i-t+1e-8)===l)u={x:i+s,y:o+c};else{var d,f,h=this.getLineLength(t,n,r,a),p=(i-t)*(r-t)+(o-n)*(a-n);d=t+(p/=h*h)*(r-t),f=n+p*(a-n);var g=this.getLineLength(i,o,d,f),m=Math.sqrt(e*e-g*g);s=Math.sqrt(m*m/(1+l*l)),r<t&&(s*=-1),u={x:d+s,y:f+(c=l*s)}}return u}static getPointOnCubicBezier(e,t,n,r,a,i,o,l,s){function u(e){return e*e*e}function c(e){return 3*e*e*(1-e)}function d(e){return 3*e*(1-e)*(1-e)}function f(e){return(1-e)*(1-e)*(1-e)}return{x:l*u(e)+i*c(e)+r*d(e)+t*f(e),y:s*u(e)+o*c(e)+a*d(e)+n*f(e)}}static getPointOnQuadraticBezier(e,t,n,r,a,i,o){function l(e){return e*e}function s(e){return 2*e*(1-e)}function u(e){return(1-e)*(1-e)}return{x:i*l(e)+r*s(e)+t*u(e),y:o*l(e)+a*s(e)+n*u(e)}}static getPointOnEllipticalArc(e,t,n,r,a,i){var o=Math.cos(i),l=Math.sin(i),s=n*Math.cos(a),u=r*Math.sin(a);return{x:e+(s*o-u*l),y:t+(s*l+u*o)}}static parsePathData(e){if(!e)return[];var t=e,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];t=t.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)t=t.replace(new RegExp(n[r],"g"),"|"+n[r]);var a,i=t.split("|"),o=[],l=[],s=0,u=0,c=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<i.length;r++){var d=i[r],f=d.charAt(0);for(d=d.slice(1),l.length=0;a=c.exec(d);)l.push(a[0]);for(var h=[],p=0,g=l.length;p<g;p++)if("00"!==l[p]){var m=parseFloat(l[p]);isNaN(m)?h.push(0):h.push(m)}else h.push(0,0);for(;h.length>0&&!isNaN(h[0]);){var v,y,b,_,w,x,S,E,k,C,P=null,O=[],T=s,M=u;switch(f){case"l":s+=h.shift(),u+=h.shift(),P="L",O.push(s,u);break;case"L":s=h.shift(),u=h.shift(),O.push(s,u);break;case"m":var N=h.shift(),R=h.shift();if(s+=N,u+=R,P="M",o.length>2&&"z"===o[o.length-1].command)for(var L=o.length-2;L>=0;L--)if("M"===o[L].command){s=o[L].points[0]+N,u=o[L].points[1]+R;break}O.push(s,u),f="l";break;case"M":s=h.shift(),u=h.shift(),P="M",O.push(s,u),f="L";break;case"h":s+=h.shift(),P="L",O.push(s,u);break;case"H":s=h.shift(),P="L",O.push(s,u);break;case"v":u+=h.shift(),P="L",O.push(s,u);break;case"V":u=h.shift(),P="L",O.push(s,u);break;case"C":O.push(h.shift(),h.shift(),h.shift(),h.shift()),s=h.shift(),u=h.shift(),O.push(s,u);break;case"c":O.push(s+h.shift(),u+h.shift(),s+h.shift(),u+h.shift()),s+=h.shift(),u+=h.shift(),P="C",O.push(s,u);break;case"S":y=s,b=u,"C"===(v=o[o.length-1]).command&&(y=s+(s-v.points[2]),b=u+(u-v.points[3])),O.push(y,b,h.shift(),h.shift()),s=h.shift(),u=h.shift(),P="C",O.push(s,u);break;case"s":y=s,b=u,"C"===(v=o[o.length-1]).command&&(y=s+(s-v.points[2]),b=u+(u-v.points[3])),O.push(y,b,s+h.shift(),u+h.shift()),s+=h.shift(),u+=h.shift(),P="C",O.push(s,u);break;case"Q":O.push(h.shift(),h.shift()),s=h.shift(),u=h.shift(),O.push(s,u);break;case"q":O.push(s+h.shift(),u+h.shift()),s+=h.shift(),u+=h.shift(),P="Q",O.push(s,u);break;case"T":y=s,b=u,"Q"===(v=o[o.length-1]).command&&(y=s+(s-v.points[0]),b=u+(u-v.points[1])),s=h.shift(),u=h.shift(),P="Q",O.push(y,b,s,u);break;case"t":y=s,b=u,"Q"===(v=o[o.length-1]).command&&(y=s+(s-v.points[0]),b=u+(u-v.points[1])),s+=h.shift(),u+=h.shift(),P="Q",O.push(y,b,s,u);break;case"A":_=h.shift(),w=h.shift(),x=h.shift(),S=h.shift(),E=h.shift(),k=s,C=u,s=h.shift(),u=h.shift(),P="A",O=this.convertEndpointToCenterParameterization(k,C,s,u,S,E,_,w,x);break;case"a":_=h.shift(),w=h.shift(),x=h.shift(),S=h.shift(),E=h.shift(),k=s,C=u,s+=h.shift(),u+=h.shift(),P="A",O=this.convertEndpointToCenterParameterization(k,C,s,u,S,E,_,w,x)}o.push({command:P||f,points:O,start:{x:T,y:M},pathLength:this.calcLength(T,M,P||f,O)})}"z"!==f&&"Z"!==f||o.push({command:"z",points:[],start:void 0,pathLength:0})}return o}static calcLength(e,t,n,r){var a,i,o,l,s=ct;switch(n){case"L":return s.getLineLength(e,t,r[0],r[1]);case"C":for(a=0,i=s.getPointOnCubicBezier(0,e,t,r[0],r[1],r[2],r[3],r[4],r[5]),l=.01;l<=1;l+=.01)o=s.getPointOnCubicBezier(l,e,t,r[0],r[1],r[2],r[3],r[4],r[5]),a+=s.getLineLength(i.x,i.y,o.x,o.y),i=o;return a;case"Q":for(a=0,i=s.getPointOnQuadraticBezier(0,e,t,r[0],r[1],r[2],r[3]),l=.01;l<=1;l+=.01)o=s.getPointOnQuadraticBezier(l,e,t,r[0],r[1],r[2],r[3]),a+=s.getLineLength(i.x,i.y,o.x,o.y),i=o;return a;case"A":a=0;var u=r[4],c=r[5],d=r[4]+c,f=Math.PI/180;if(Math.abs(u-d)<f&&(f=Math.abs(u-d)),i=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],u,0),c<0)for(l=u-f;l>d;l-=f)o=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],l,0),a+=s.getLineLength(i.x,i.y,o.x,o.y),i=o;else for(l=u+f;l<d;l+=f)o=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],l,0),a+=s.getLineLength(i.x,i.y,o.x,o.y),i=o;return o=s.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),a+s.getLineLength(i.x,i.y,o.x,o.y)}return 0}static convertEndpointToCenterParameterization(e,t,n,r,a,i,o,l,s){var u=s*(Math.PI/180),c=Math.cos(u)*(e-n)/2+Math.sin(u)*(t-r)/2,d=-1*Math.sin(u)*(e-n)/2+Math.cos(u)*(t-r)/2,f=c*c/(o*o)+d*d/(l*l);f>1&&(o*=Math.sqrt(f),l*=Math.sqrt(f));var h=Math.sqrt((o*o*(l*l)-o*o*(d*d)-l*l*(c*c))/(o*o*(d*d)+l*l*(c*c)));a===i&&(h*=-1),isNaN(h)&&(h=0);var p=h*o*d/l,g=h*-l*c/o,m=(e+n)/2+Math.cos(u)*p-Math.sin(u)*g,v=(t+r)/2+Math.sin(u)*p+Math.cos(u)*g,y=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])},b=function(e,t){return(e[0]*t[0]+e[1]*t[1])/(y(e)*y(t))},_=function(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(b(e,t))},w=_([1,0],[(c-p)/o,(d-g)/l]),x=[(c-p)/o,(d-g)/l],S=[(-1*c-p)/o,(-1*d-g)/l],E=_(x,S);return b(x,S)<=-1&&(E=Math.PI),b(x,S)>=1&&(E=0),0===i&&E>0&&(E-=2*Math.PI),1===i&&E<0&&(E+=2*Math.PI),[m,v,o,l,w,E,u,i]}}ct.prototype.className="Path",ct.prototype._attrsAffectingSize=["data"],s(ct),O.addGetterSetter(ct,"data");class dt extends ut{_sceneFunc(e){super._sceneFunc(e);var t=2*Math.PI,n=this.points(),r=n,a=0!==this.tension()&&n.length>4;a&&(r=this.getTensionPoints());var i,o,l=this.pointerLength(),s=n.length;if(a){const e=[r[r.length-4],r[r.length-3],r[r.length-2],r[r.length-1],n[s-2],n[s-1]],t=ct.calcLength(r[r.length-4],r[r.length-3],"C",e),a=ct.getPointOnQuadraticBezier(Math.min(1,1-l/t),e[0],e[1],e[2],e[3],e[4],e[5]);i=n[s-2]-a.x,o=n[s-1]-a.y}else i=n[s-2]-n[s-4],o=n[s-1]-n[s-3];var u=(Math.atan2(o,i)+t)%t,c=this.pointerWidth();this.pointerAtEnding()&&(e.save(),e.beginPath(),e.translate(n[s-2],n[s-1]),e.rotate(u),e.moveTo(0,0),e.lineTo(-l,c/2),e.lineTo(-l,-c/2),e.closePath(),e.restore()),this.pointerAtBeginning()&&(e.save(),e.translate(n[0],n[1]),a?(i=(r[0]+r[2])/2-n[0],o=(r[1]+r[3])/2-n[1]):(i=n[2]-n[0],o=n[3]-n[1]),e.rotate((Math.atan2(-o,-i)+t)%t),e.moveTo(0,0),e.lineTo(-l,c/2),e.lineTo(-l,-c/2),e.closePath(),e.restore());var d=this.dashEnabled();d&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),d&&(this.attrs.dashEnabled=!0)}getSelfRect(){const e=super.getSelfRect(),t=this.pointerWidth()/2;return{x:e.x-t,y:e.y-t,width:e.width+2*t,height:e.height+2*t}}}dt.prototype.className="Arrow",s(dt),O.addGetterSetter(dt,"pointerLength",10,_()),O.addGetterSetter(dt,"pointerWidth",10,_()),O.addGetterSetter(dt,"pointerAtBeginning",!1),O.addGetterSetter(dt,"pointerAtEnding",!0);class ft extends Xe{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius()!==e/2&&this.radius(e/2)}setHeight(e){this.radius()!==e/2&&this.radius(e/2)}}ft.prototype._centroid=!0,ft.prototype.className="Circle",ft.prototype._attrsAffectingSize=["radius"],s(ft),O.addGetterSetter(ft,"radius",0,_());class ht extends Xe{_sceneFunc(e){var t=this.radiusX(),n=this.radiusY();e.beginPath(),e.save(),t!==n&&e.scale(1,n/t),e.arc(0,0,t,0,2*Math.PI,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radiusX()}getHeight(){return 2*this.radiusY()}setWidth(e){this.radiusX(e/2)}setHeight(e){this.radiusY(e/2)}}ht.prototype.className="Ellipse",ht.prototype._centroid=!0,ht.prototype._attrsAffectingSize=["radiusX","radiusY"],s(ht),O.addComponentsGetterSetter(ht,"radius",["x","y"]),O.addGetterSetter(ht,"radiusX",0,_()),O.addGetterSetter(ht,"radiusY",0,_());class pt extends Xe{constructor(e){super(e),this.on("imageChange.konva",(()=>{this._setImageLoad()})),this._setImageLoad()}_setImageLoad(){const e=this.image();e&&e.addEventListener&&e.addEventListener("load",(()=>{this._requestDraw()}))}_useBufferCanvas(){return super._useBufferCanvas(!0)}_sceneFunc(e){const t=this.getWidth(),n=this.getHeight(),r=this.attrs.image;let a;if(r){const e=this.attrs.cropWidth,i=this.attrs.cropHeight;a=e&&i?[r,this.cropX(),this.cropY(),e,i,0,0,t,n]:[r,0,0,t,n]}(this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)),r&&e.drawImage.apply(e,a)}_hitFunc(e){var t=this.width(),n=this.height();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)}getWidth(){var e,t;return null!==(e=this.attrs.width)&&void 0!==e?e:null===(t=this.image())||void 0===t?void 0:t.width}getHeight(){var e,t;return null!==(e=this.attrs.height)&&void 0!==e?e:null===(t=this.image())||void 0===t?void 0:t.height}static fromURL(e,t){var n=v.createImageElement();n.onload=function(){var e=new pt({image:n});t(e)},n.crossOrigin="Anonymous",n.src=e}}pt.prototype.className="Image",s(pt),O.addGetterSetter(pt,"image"),O.addComponentsGetterSetter(pt,"crop",["x","y","width","height"]),O.addGetterSetter(pt,"cropX",0,_()),O.addGetterSetter(pt,"cropY",0,_()),O.addGetterSetter(pt,"cropWidth",0,_()),O.addGetterSetter(pt,"cropHeight",0,_());var gt=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width","height"],mt="up",vt="right",yt="down",bt="left",_t=gt.length;class wt extends $e{constructor(e){super(e),this.on("add.konva",(function(e){this._addListeners(e.child),this._sync()}))}getText(){return this.find("Text")[0]}getTag(){return this.find("Tag")[0]}_addListeners(e){var t,n=this,r=function(){n._sync()};for(t=0;t<_t;t++)e.on(gt[t]+"Change.konva",r)}getWidth(){return this.getText().width()}getHeight(){return this.getText().height()}_sync(){var e,t,n,r,a,i,o,l=this.getText(),s=this.getTag();if(l&&s){switch(e=l.width(),t=l.height(),n=s.pointerDirection(),r=s.pointerWidth(),o=s.pointerHeight(),a=0,i=0,n){case mt:a=e/2,i=-1*o;break;case vt:a=e+r,i=t/2;break;case yt:a=e/2,i=t+o;break;case bt:a=-1*r,i=t/2}s.setAttrs({x:-1*a,y:-1*i,width:e,height:t}),l.setAttrs({x:-1*a,y:-1*i})}}}wt.prototype.className="Label",s(wt);class xt extends Xe{_sceneFunc(e){var t=this.width(),n=this.height(),r=this.pointerDirection(),a=this.pointerWidth(),i=this.pointerHeight(),o=this.cornerRadius();let l=0,s=0,u=0,c=0;"number"==typeof o?l=s=u=c=Math.min(o,t/2,n/2):(l=Math.min(o[0]||0,t/2,n/2),s=Math.min(o[1]||0,t/2,n/2),c=Math.min(o[2]||0,t/2,n/2),u=Math.min(o[3]||0,t/2,n/2)),e.beginPath(),e.moveTo(l,0),r===mt&&(e.lineTo((t-a)/2,0),e.lineTo(t/2,-1*i),e.lineTo((t+a)/2,0)),e.lineTo(t-s,0),e.arc(t-s,s,s,3*Math.PI/2,0,!1),r===vt&&(e.lineTo(t,(n-i)/2),e.lineTo(t+a,n/2),e.lineTo(t,(n+i)/2)),e.lineTo(t,n-c),e.arc(t-c,n-c,c,0,Math.PI/2,!1),r===yt&&(e.lineTo((t+a)/2,n),e.lineTo(t/2,n+i),e.lineTo((t-a)/2,n)),e.lineTo(u,n),e.arc(u,n-u,u,Math.PI/2,Math.PI,!1),r===bt&&(e.lineTo(0,(n+i)/2),e.lineTo(-1*a,n/2),e.lineTo(0,(n-i)/2)),e.lineTo(0,l),e.arc(l,l,l,Math.PI,3*Math.PI/2,!1),e.closePath(),e.fillStrokeShape(this)}getSelfRect(){var e=0,t=0,n=this.pointerWidth(),r=this.pointerHeight(),a=this.pointerDirection(),i=this.width(),o=this.height();return a===mt?(t-=r,o+=r):a===yt?o+=r:a===bt?(e-=1.5*n,i+=n):a===vt&&(i+=1.5*n),{x:e,y:t,width:i,height:o}}}xt.prototype.className="Tag",s(xt),O.addGetterSetter(xt,"pointerDirection","none"),O.addGetterSetter(xt,"pointerWidth",0,_()),O.addGetterSetter(xt,"pointerHeight",0,_()),O.addGetterSetter(xt,"cornerRadius",0,w(4));class St extends Xe{_sceneFunc(e){var t=this.cornerRadius(),n=this.width(),r=this.height();if(e.beginPath(),t){let a=0,i=0,o=0,l=0;"number"==typeof t?a=i=o=l=Math.min(t,n/2,r/2):(a=Math.min(t[0]||0,n/2,r/2),i=Math.min(t[1]||0,n/2,r/2),l=Math.min(t[2]||0,n/2,r/2),o=Math.min(t[3]||0,n/2,r/2)),e.moveTo(a,0),e.lineTo(n-i,0),e.arc(n-i,i,i,3*Math.PI/2,0,!1),e.lineTo(n,r-l),e.arc(n-l,r-l,l,0,Math.PI/2,!1),e.lineTo(o,r),e.arc(o,r-o,o,Math.PI/2,Math.PI,!1),e.lineTo(0,a),e.arc(a,a,a,Math.PI,3*Math.PI/2,!1)}else e.rect(0,0,n,r);e.closePath(),e.fillStrokeShape(this)}}St.prototype.className="Rect",s(St),O.addGetterSetter(St,"cornerRadius",0,w(4));class Et extends Xe{_sceneFunc(e){const t=this._getPoints();e.beginPath(),e.moveTo(t[0].x,t[0].y);for(var n=1;n<t.length;n++)e.lineTo(t[n].x,t[n].y);e.closePath(),e.fillStrokeShape(this)}_getPoints(){const e=this.attrs.sides,t=this.attrs.radius||0,n=[];for(var r=0;r<e;r++)n.push({x:t*Math.sin(2*r*Math.PI/e),y:-1*t*Math.cos(2*r*Math.PI/e)});return n}getSelfRect(){const e=this._getPoints();var t=e[0].x,n=e[0].y,r=e[0].x,a=e[0].y;return e.forEach((e=>{t=Math.min(t,e.x),n=Math.max(n,e.x),r=Math.min(r,e.y),a=Math.max(a,e.y)})),{x:t,y:r,width:n-t,height:a-r}}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius(e/2)}setHeight(e){this.radius(e/2)}}Et.prototype.className="RegularPolygon",Et.prototype._centroid=!0,Et.prototype._attrsAffectingSize=["radius"],s(Et),O.addGetterSetter(Et,"radius",0,_()),O.addGetterSetter(Et,"sides",0,_());var kt=2*Math.PI;class Ct extends Xe{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.innerRadius(),0,kt,!1),e.moveTo(this.outerRadius(),0),e.arc(0,0,this.outerRadius(),kt,0,!0),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}}Ct.prototype.className="Ring",Ct.prototype._centroid=!0,Ct.prototype._attrsAffectingSize=["innerRadius","outerRadius"],s(Ct),O.addGetterSetter(Ct,"innerRadius",0,_()),O.addGetterSetter(Ct,"outerRadius",0,_());class Pt extends Xe{constructor(e){super(e),this._updated=!0,this.anim=new Je((()=>{var e=this._updated;return this._updated=!1,e})),this.on("animationChange.konva",(function(){this.frameIndex(0)})),this.on("frameIndexChange.konva",(function(){this._updated=!0})),this.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}))}_sceneFunc(e){var t=this.animation(),n=this.frameIndex(),r=4*n,a=this.animations()[t],i=this.frameOffsets(),o=a[r+0],l=a[r+1],s=a[r+2],u=a[r+3],c=this.image();if((this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,s,u),e.closePath(),e.fillStrokeShape(this)),c)if(i){var d=i[t],f=2*n;e.drawImage(c,o,l,s,u,d[f+0],d[f+1],s,u)}else e.drawImage(c,o,l,s,u,0,0,s,u)}_hitFunc(e){var t=this.animation(),n=this.frameIndex(),r=4*n,a=this.animations()[t],i=this.frameOffsets(),o=a[r+2],l=a[r+3];if(e.beginPath(),i){var s=i[t],u=2*n;e.rect(s[u+0],s[u+1],o,l)}else e.rect(0,0,o,l);e.closePath(),e.fillShape(this)}_useBufferCanvas(){return super._useBufferCanvas(!0)}_setInterval(){var e=this;this.interval=setInterval((function(){e._updateIndex()}),1e3/this.frameRate())}start(){if(!this.isRunning()){var e=this.getLayer();this.anim.setLayers(e),this._setInterval(),this.anim.start()}}stop(){this.anim.stop(),clearInterval(this.interval)}isRunning(){return this.anim.isRunning()}_updateIndex(){var e=this.frameIndex(),t=this.animation();e<this.animations()[t].length/4-1?this.frameIndex(e+1):this.frameIndex(0)}}Pt.prototype.className="Sprite",s(Pt),O.addGetterSetter(Pt,"animation"),O.addGetterSetter(Pt,"animations"),O.addGetterSetter(Pt,"frameOffsets"),O.addGetterSetter(Pt,"image"),O.addGetterSetter(Pt,"frameIndex",0,_()),O.addGetterSetter(Pt,"frameRate",17,_()),O.backCompat(Pt,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"});class Ot extends Xe{_sceneFunc(e){var t=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();e.beginPath(),e.moveTo(0,0-n);for(var a=1;a<2*r;a++){var i=a%2==0?n:t,o=i*Math.sin(a*Math.PI/r),l=-1*i*Math.cos(a*Math.PI/r);e.lineTo(o,l)}e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}}function Tt(e){return Array.from(e)}Ot.prototype.className="Star",Ot.prototype._centroid=!0,Ot.prototype._attrsAffectingSize=["innerRadius","outerRadius"],s(Ot),O.addGetterSetter(Ot,"numPoints",5,_()),O.addGetterSetter(Ot,"innerRadius",0,_()),O.addGetterSetter(Ot,"outerRadius",0,_());var Mt,Nt="auto",Rt="justify",Lt="left",At="middle",Dt="normal",It=" ",zt=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],jt=zt.length;function Ft(){return Mt||(Mt=v.createCanvasElement().getContext("2d"))}class Gt extends Xe{constructor(e){super(function(e){return(e=e||{}).fillLinearGradientColorStops||e.fillRadialGradientColorStops||e.fillPatternImage||(e.fill=e.fill||"black"),e}(e)),this._partialTextX=0,this._partialTextY=0;for(var t=0;t<jt;t++)this.on(zt[t]+"Change.konva",this._setTextData);this._setTextData()}_sceneFunc(e){var t=this.textArr,n=t.length;if(this.text()){var r,a=this.padding(),i=this.fontSize(),o=this.lineHeight()*i,l=this.verticalAlign(),s=0,u=this.align(),c=this.getWidth(),d=this.letterSpacing(),f=this.fill(),h=this.textDecoration(),p=-1!==h.indexOf("underline"),g=-1!==h.indexOf("line-through"),m=0,v=(m=o/2,0),y=0;for(e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",At),e.setAttr("textAlign",Lt),l===At?s=(this.getHeight()-n*o-2*a)/2:"bottom"===l&&(s=this.getHeight()-n*o-2*a),e.translate(a,s+a),r=0;r<n;r++){v=0,y=0;var b,_,w,x=t[r],S=x.text,E=x.width,k=r!==n-1;if(e.save(),"right"===u?v+=c-E-2*a:"center"===u&&(v+=(c-E-2*a)/2),p&&(e.save(),e.beginPath(),e.moveTo(v,m+y+Math.round(i/2)),_=0==(b=S.split(" ").length-1),w=u===Rt&&k&&!_?c-2*a:E,e.lineTo(v+Math.round(w),m+y+Math.round(i/2)),e.lineWidth=i/15,e.strokeStyle=f,e.stroke(),e.restore()),g&&(e.save(),e.beginPath(),e.moveTo(v,m+y),_=0==(b=S.split(" ").length-1),w=u===Rt&&k&&!_?c-2*a:E,e.lineTo(v+Math.round(w),m+y),e.lineWidth=i/15,e.strokeStyle=f,e.stroke(),e.restore()),0!==d||u===Rt){b=S.split(" ").length-1;for(var C=Tt(S),P=0;P<C.length;P++){var O=C[P];" "===O&&r!==n-1&&u===Rt&&(v+=(c-2*a-E)/b),this._partialTextX=v,this._partialTextY=m+y,this._partialText=O,e.fillStrokeShape(this),v+=this.measureSize(O).width+d}}else this._partialTextX=v,this._partialTextY=m+y,this._partialText=S,e.fillStrokeShape(this);e.restore(),n>1&&(m+=o)}}}_hitFunc(e){var t=this.getWidth(),n=this.getHeight();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)}setText(e){var t=v._isString(e)?e:null==e?"":e+"";return this._setAttr("text",t),this}getWidth(){return this.attrs.width===Nt||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width}getHeight(){return this.attrs.height===Nt||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height}getTextWidth(){return this.textWidth}getTextHeight(){return v.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}measureSize(e){var t,n=Ft(),r=this.fontSize();return n.save(),n.font=this._getContextFont(),t=n.measureText(e),n.restore(),{width:t.width,height:r}}_getContextFont(){return this.fontStyle()+It+this.fontVariant()+It+(this.fontSize()+"px ")+this.fontFamily().split(",").map((e=>{const t=(e=e.trim()).indexOf(" ")>=0,n=e.indexOf('"')>=0||e.indexOf("'")>=0;return t&&!n&&(e=`"${e}"`),e})).join(", ")}_addTextLine(e){this.align()===Rt&&(e=e.trim());var t=this._getTextWidth(e);return this.textArr.push({text:e,width:t})}_getTextWidth(e){var t=this.letterSpacing(),n=e.length;return Ft().measureText(e).width+(n?t*(n-1):0)}_setTextData(){var e=this.text().split("\n"),t=+this.fontSize(),n=0,r=this.lineHeight()*t,a=this.attrs.width,i=this.attrs.height,o=a!==Nt&&void 0!==a,l=i!==Nt&&void 0!==i,s=this.padding(),u=a-2*s,c=i-2*s,d=0,f=this.wrap(),h="none"!==f,p="char"!==f&&h,g=this.ellipsis();this.textArr=[],Ft().font=this._getContextFont();for(var m=g?this._getTextWidth("…"):0,v=0,y=e.length;v<y;++v){var b=e[v],_=this._getTextWidth(b);if(o&&_>u)for(;b.length>0;){for(var w=0,x=b.length,S="",E=0;w<x;){var k=w+x>>>1,C=b.slice(0,k+1),P=this._getTextWidth(C)+m;P<=u?(w=k+1,S=C,E=P):x=k}if(!S)break;if(p){var O,T=b[S.length];(O=(T===It||"-"===T)&&E<=u?S.length:Math.max(S.lastIndexOf(It),S.lastIndexOf("-"))+1)>0&&(w=O,S=S.slice(0,w),E=this._getTextWidth(S))}if(S=S.trimRight(),this._addTextLine(S),n=Math.max(n,E),d+=r,!h||l&&d+r>c){var M=this.textArr[this.textArr.length-1];M&&g&&(this._getTextWidth(M.text+"…")<u||(M.text=M.text.slice(0,M.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(M.text+"…"));break}if((b=(b=b.slice(w)).trimLeft()).length>0&&(_=this._getTextWidth(b))<=u){this._addTextLine(b),d+=r,n=Math.max(n,_);break}}else this._addTextLine(b),d+=r,n=Math.max(n,_);if(l&&d+r>c)break}this.textHeight=t,this.textWidth=n}getStrokeScaleEnabled(){return!0}}Gt.prototype._fillFunc=function(e){e.fillText(this._partialText,this._partialTextX,this._partialTextY)},Gt.prototype._strokeFunc=function(e){e.strokeText(this._partialText,this._partialTextX,this._partialTextY)},Gt.prototype.className="Text",Gt.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight","letterSpacing"],s(Gt),O.overWriteSetter(Gt,"width",x()),O.overWriteSetter(Gt,"height",x()),O.addGetterSetter(Gt,"fontFamily","Arial"),O.addGetterSetter(Gt,"fontSize",12,_()),O.addGetterSetter(Gt,"fontStyle",Dt),O.addGetterSetter(Gt,"fontVariant",Dt),O.addGetterSetter(Gt,"padding",0,_()),O.addGetterSetter(Gt,"align",Lt),O.addGetterSetter(Gt,"verticalAlign","top"),O.addGetterSetter(Gt,"lineHeight",1,_()),O.addGetterSetter(Gt,"wrap","word"),O.addGetterSetter(Gt,"ellipsis",!1,k()),O.addGetterSetter(Gt,"letterSpacing",0,_()),O.addGetterSetter(Gt,"text","",S()),O.addGetterSetter(Gt,"textDecoration","");var Bt="normal";function Ut(e){e.fillText(this.partialText,0,0)}function Ht(e){e.strokeText(this.partialText,0,0)}class Wt extends Xe{constructor(e){super(e),this.dummyCanvas=v.createCanvasElement(),this.dataArray=[],this.dataArray=ct.parsePathData(this.attrs.data),this.on("dataChange.konva",(function(){this.dataArray=ct.parsePathData(this.attrs.data),this._setTextData()})),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva",this._setTextData),this._setTextData()}_sceneFunc(e){e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",this.textBaseline()),e.setAttr("textAlign","left"),e.save();var t=this.textDecoration(),n=this.fill(),r=this.fontSize(),a=this.glyphInfo;"underline"===t&&e.beginPath();for(var i=0;i<a.length;i++){e.save();var o=a[i].p0;e.translate(o.x,o.y),e.rotate(a[i].rotation),this.partialText=a[i].text,e.fillStrokeShape(this),"underline"===t&&(0===i&&e.moveTo(0,r/2+1),e.lineTo(r,r/2+1)),e.restore()}"underline"===t&&(e.strokeStyle=n,e.lineWidth=r/20,e.stroke()),e.restore()}_hitFunc(e){e.beginPath();var t=this.glyphInfo;if(t.length>=1){var n=t[0].p0;e.moveTo(n.x,n.y)}for(var r=0;r<t.length;r++){var a=t[r].p1;e.lineTo(a.x,a.y)}e.setAttr("lineWidth",this.fontSize()),e.setAttr("strokeStyle",this.colorKey),e.stroke()}getTextWidth(){return this.textWidth}getTextHeight(){return v.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}setText(e){return Gt.prototype.setText.call(this,e)}_getContextFont(){return Gt.prototype._getContextFont.call(this)}_getTextSize(e){var t=this.dummyCanvas.getContext("2d");t.save(),t.font=this._getContextFont();var n=t.measureText(e);return t.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}}_setTextData(){var e=this,t=this._getTextSize(this.attrs.text),n=this.letterSpacing(),r=this.align(),a=this.kerningFunc();this.textWidth=t.width,this.textHeight=t.height;var i=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var o=0,l=0;l<e.dataArray.length;l++)e.dataArray[l].pathLength>0&&(o+=e.dataArray[l].pathLength);var s=0;"center"===r&&(s=Math.max(0,o/2-i/2)),"right"===r&&(s=Math.max(0,o-i));for(var u,c,d,f=Tt(this.text()),h=this.text().split(" ").length-1,p=-1,g=0,m=function(){g=0;for(var t=e.dataArray,n=p+1;n<t.length;n++){if(t[n].pathLength>0)return p=n,t[n];"M"===t[n].command&&(u={x:t[n].points[0],y:t[n].points[1]})}return{}},v=function(t){var a=e._getTextSize(t).width+n;" "===t&&"justify"===r&&(a+=(o-i)/h);var l=0,s=0;for(c=void 0;Math.abs(a-l)/a>.01&&s<20;){s++;for(var f=l;void 0===d;)(d=m())&&f+d.pathLength<a&&(f+=d.pathLength,d=void 0);if(d==={}||void 0===u)return;var p=!1;switch(d.command){case"L":ct.getLineLength(u.x,u.y,d.points[0],d.points[1])>a?c=ct.getPointOnLine(a,u.x,u.y,d.points[0],d.points[1],u.x,u.y):d=void 0;break;case"A":var v=d.points[4],y=d.points[5],b=d.points[4]+y;0===g?g=v+1e-8:a>l?g+=Math.PI/180*y/Math.abs(y):g-=Math.PI/360*y/Math.abs(y),(y<0&&g<b||y>=0&&g>b)&&(g=b,p=!0),c=ct.getPointOnEllipticalArc(d.points[0],d.points[1],d.points[2],d.points[3],g,d.points[6]);break;case"C":0===g?g=a>d.pathLength?1e-8:a/d.pathLength:a>l?g+=(a-l)/d.pathLength/2:g=Math.max(g-(l-a)/d.pathLength/2,0),g>1&&(g=1,p=!0),c=ct.getPointOnCubicBezier(g,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3],d.points[4],d.points[5]);break;case"Q":0===g?g=a/d.pathLength:a>l?g+=(a-l)/d.pathLength:g-=(l-a)/d.pathLength,g>1&&(g=1,p=!0),c=ct.getPointOnQuadraticBezier(g,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3])}void 0!==c&&(l=ct.getLineLength(u.x,u.y,c.x,c.y)),p&&(p=!1,d=void 0)}},y=s/(e._getTextSize("C").width+n)-1,b=0;b<y&&(v("C"),void 0!==u&&void 0!==c);b++)u=c;for(var _=0;_<f.length&&(v(f[_]),void 0!==u&&void 0!==c);_++){var w=ct.getLineLength(u.x,u.y,c.x,c.y),x=0;if(a)try{x=a(f[_-1],f[_])*this.fontSize()}catch(e){x=0}u.x+=x,c.x+=x,this.textWidth+=x;var S=ct.getPointOnLine(x+w/2,u.x,u.y,c.x,c.y),E=Math.atan2(c.y-u.y,c.x-u.x);this.glyphInfo.push({transposeX:S.x,transposeY:S.y,text:f[_],rotation:E,p0:u,p1:c}),u=c}}getSelfRect(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var e=[];this.glyphInfo.forEach((function(t){e.push(t.p0.x),e.push(t.p0.y),e.push(t.p1.x),e.push(t.p1.y)}));for(var t,n,r=e[0]||0,a=e[0]||0,i=e[1]||0,o=e[1]||0,l=0;l<e.length/2;l++)t=e[2*l],n=e[2*l+1],r=Math.min(r,t),a=Math.max(a,t),i=Math.min(i,n),o=Math.max(o,n);var s=this.fontSize();return{x:r-s/2,y:i-s/2,width:a-r+s,height:o-i+s}}}Wt.prototype._fillFunc=Ut,Wt.prototype._strokeFunc=Ht,Wt.prototype._fillFuncHit=Ut,Wt.prototype._strokeFuncHit=Ht,Wt.prototype.className="TextPath",Wt.prototype._attrsAffectingSize=["text","fontSize","data"],s(Wt),O.addGetterSetter(Wt,"data"),O.addGetterSetter(Wt,"fontFamily","Arial"),O.addGetterSetter(Wt,"fontSize",12,_()),O.addGetterSetter(Wt,"fontStyle",Bt),O.addGetterSetter(Wt,"align","left"),O.addGetterSetter(Wt,"letterSpacing",0,_()),O.addGetterSetter(Wt,"textBaseline","middle"),O.addGetterSetter(Wt,"fontVariant",Bt),O.addGetterSetter(Wt,"text",""),O.addGetterSetter(Wt,"textDecoration",null),O.addGetterSetter(Wt,"kerningFunc",null);var Xt=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((e=>e+".tr-konva")).join(" "),Vt="nodesRect",Yt=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((e=>e+".tr-konva")).join(" "),Qt={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};const qt="ontouchstart"in l._global;var $t=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function Kt(e,t,n){const r=n.x+(e.x-n.x)*Math.cos(t)-(e.y-n.y)*Math.sin(t),a=n.y+(e.x-n.x)*Math.sin(t)+(e.y-n.y)*Math.cos(t);return Object.assign(Object.assign({},e),{rotation:e.rotation+t,x:r,y:a})}class Jt extends $e{constructor(e){super(e),this._transforming=!1,this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(Xt,this.update),this.getNode()&&this.update()}attachTo(e){return this.setNode(e),this}setNode(e){return v.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([e])}getNode(){return this._nodes&&this._nodes[0]}setNodes(e=[]){return this._nodes&&this._nodes.length&&this.detach(),this._nodes=e,1===e.length?this.rotation(e[0].getAbsoluteRotation()):this.rotation(0),this._nodes.forEach((e=>{const t=e._attrsAffectingSize.map((e=>e+"Change.tr-konva")).join(" "),n=()=>{1===this.nodes().length&&this.rotation(this.nodes()[0].getAbsoluteRotation()),this._resetTransformCache(),this._transforming||this.isDragging()||this.update()};e.on(t,n),e.on(Yt,n),e.on("absoluteTransformChange.tr-konva",n),e.on("xChange.tr-konva yChange.tr-konva",n),this._proxyDrag(e)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this}_proxyDrag(e){let t;e.on("dragstart.tr-konva",(n=>{t=e.getAbsolutePosition(),this.isDragging()||e===this.findOne(".back")||this.startDrag(n,!1)})),e.on("dragmove.tr-konva",(n=>{if(!t)return;const r=e.getAbsolutePosition(),a=r.x-t.x,i=r.y-t.y;this.nodes().forEach((t=>{if(t===e)return;if(t.isDragging())return;const r=t.getAbsolutePosition();t.setAbsolutePosition({x:r.x+a,y:r.y+i}),t.startDrag(n)})),t=null}))}getNodes(){return this._nodes||[]}getActiveAnchor(){return this._movingAnchorName}detach(){this._nodes&&this._nodes.forEach((e=>{e.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()}_resetTransformCache(){this._clearCache(Vt),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}_getNodeRect(){return this._getCache(Vt,this.__getNodeRect)}__getNodeShape(e,t=this.rotation(),n){var r=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),a=e.getAbsoluteScale(n),i=e.getAbsolutePosition(n),o=r.x*a.x-e.offsetX()*a.x,s=r.y*a.y-e.offsetY()*a.y;const u=(l.getAngle(e.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return Kt({x:i.x+o*Math.cos(u)+s*Math.sin(-u),y:i.y+s*Math.cos(u)+o*Math.sin(u),width:r.width*a.x,height:r.height*a.y,rotation:u},-l.getAngle(t),{x:0,y:0})}__getNodeRect(){if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};const e=[];this.nodes().map((t=>{const n=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()});var r=[{x:n.x,y:n.y},{x:n.x+n.width,y:n.y},{x:n.x+n.width,y:n.y+n.height},{x:n.x,y:n.y+n.height}],a=t.getAbsoluteTransform();r.forEach((function(t){var n=a.point(t);e.push(n)}))}));const t=new u;var n,r,a,i;t.rotate(-l.getAngle(this.rotation())),e.forEach((function(e){var o=t.point(e);void 0===n&&(n=a=o.x,r=i=o.y),n=Math.min(n,o.x),r=Math.min(r,o.y),a=Math.max(a,o.x),i=Math.max(i,o.y)})),t.invert();const o=t.point({x:n,y:r});return{x:o.x,y:o.y,width:a-n,height:i-r,rotation:l.getAngle(this.rotation())}}getX(){return this._getNodeRect().x}getY(){return this._getNodeRect().y}getWidth(){return this._getNodeRect().width}getHeight(){return this._getNodeRect().height}_createElements(){this._createBack(),$t.forEach(function(e){this._createAnchor(e)}.bind(this)),this._createAnchor("rotater")}_createAnchor(e){var t=new St({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:qt?10:"auto"}),n=this;t.on("mousedown touchstart",(function(e){n._handleMouseDown(e)})),t.on("dragstart",(e=>{t.stopDrag(),e.cancelBubble=!0})),t.on("dragend",(e=>{e.cancelBubble=!0})),t.on("mouseenter",(()=>{var n=l.getAngle(this.rotation()),r=function(e,t){if("rotater"===e)return"crosshair";t+=v.degToRad(Qt[e]||0);var n=(v.radToDeg(t)%360+360)%360;return v._inRange(n,337.5,360)||v._inRange(n,0,22.5)?"ns-resize":v._inRange(n,22.5,67.5)?"nesw-resize":v._inRange(n,67.5,112.5)?"ew-resize":v._inRange(n,112.5,157.5)?"nwse-resize":v._inRange(n,157.5,202.5)?"ns-resize":v._inRange(n,202.5,247.5)?"nesw-resize":v._inRange(n,247.5,292.5)?"ew-resize":v._inRange(n,292.5,337.5)?"nwse-resize":(v.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(e,n);t.getStage().content&&(t.getStage().content.style.cursor=r),this._cursorChange=!0})),t.on("mouseout",(()=>{t.getStage().content&&(t.getStage().content.style.cursor=""),this._cursorChange=!1})),this.add(t)}_createBack(){var e=new Xe({name:"back",width:0,height:0,draggable:!0,sceneFunc(e){var t=this.getParent(),n=t.padding();e.beginPath(),e.rect(-n,-n,this.width()+2*n,this.height()+2*n),e.moveTo(this.width()/2,-n),t.rotateEnabled()&&e.lineTo(this.width()/2,-t.rotateAnchorOffset()*v._sign(this.height())-n),e.fillStrokeShape(this)},hitFunc:(e,t)=>{if(this.shouldOverdrawWholeArea()){var n=this.padding();e.beginPath(),e.rect(-n,-n,t.width()+2*n,t.height()+2*n),e.fillStrokeShape(t)}}});this.add(e),this._proxyDrag(e),e.on("dragstart",(e=>{e.cancelBubble=!0})),e.on("dragmove",(e=>{e.cancelBubble=!0})),e.on("dragend",(e=>{e.cancelBubble=!0}))}_handleMouseDown(e){this._movingAnchorName=e.target.name().split(" ")[0];var t=this._getNodeRect(),n=t.width,r=t.height,a=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=Math.abs(r/a),this.cos=Math.abs(n/a),"undefined"!=typeof window&&(window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0)),this._transforming=!0;var i=e.target.getAbsolutePosition(),o=e.target.getStage().getPointerPosition();this._anchorDragOffset={x:o.x-i.x,y:o.y-i.y},this._fire("transformstart",{evt:e,target:this.getNode()}),this._nodes.forEach((t=>{t._fire("transformstart",{evt:e,target:t})}))}_handleMouseMove(e){var t,n,r,a=this.findOne("."+this._movingAnchorName),i=a.getStage();i.setPointersPositions(e);const o=i.getPointerPosition();var s={x:o.x-this._anchorDragOffset.x,y:o.y-this._anchorDragOffset.y};const u=a.getAbsolutePosition();a.setAbsolutePosition(s);const c=a.getAbsolutePosition();if(u.x!==c.x||u.y!==c.y)if("rotater"!==this._movingAnchorName){var d=this.keepRatio()||e.shiftKey,f=this.centeredScaling()||e.altKey;if("top-left"===this._movingAnchorName){if(d){var h=f?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(h.x-a.x(),2)+Math.pow(h.y-a.y(),2));var p=this.findOne(".top-left").x()>h.x?-1:1,g=this.findOne(".top-left").y()>h.y?-1:1;t=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-left").x(h.x-t),this.findOne(".top-left").y(h.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(a.y());else if("top-right"===this._movingAnchorName){d&&(h=f?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},r=Math.sqrt(Math.pow(a.x()-h.x,2)+Math.pow(h.y-a.y(),2)),p=this.findOne(".top-right").x()<h.x?-1:1,g=this.findOne(".top-right").y()>h.y?-1:1,t=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-right").x(h.x+t),this.findOne(".top-right").y(h.y-n));var m=a.position();this.findOne(".top-left").y(m.y),this.findOne(".bottom-right").x(m.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(a.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(a.x()):"bottom-left"===this._movingAnchorName?(d&&(h=f?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},r=Math.sqrt(Math.pow(h.x-a.x(),2)+Math.pow(a.y()-h.y,2)),p=h.x<a.x()?-1:1,g=a.y()<h.y?-1:1,t=r*this.cos*p,n=r*this.sin*g,a.x(h.x-t),a.y(h.y+n)),m=a.position(),this.findOne(".top-left").x(m.x),this.findOne(".bottom-right").y(m.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(a.y()):"bottom-right"===this._movingAnchorName?d&&(h=f?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},r=Math.sqrt(Math.pow(a.x()-h.x,2)+Math.pow(a.y()-h.y,2)),p=this.findOne(".bottom-right").x()<h.x?-1:1,g=this.findOne(".bottom-right").y()<h.y?-1:1,t=r*this.cos*p,n=r*this.sin*g,this.findOne(".bottom-right").x(h.x+t),this.findOne(".bottom-right").y(h.y+n)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(f=this.centeredScaling()||e.altKey){var v=this.findOne(".top-left"),y=this.findOne(".bottom-right"),b=v.x(),_=v.y(),w=this.getWidth()-y.x(),x=this.getHeight()-y.y();y.move({x:-b,y:-_}),v.move({x:w,y:x})}var S=this.findOne(".top-left").getAbsolutePosition();t=S.x,n=S.y;var E=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),k=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:t,y:n,width:E,height:k,rotation:l.getAngle(this.rotation())},e)}else{var C=this._getNodeRect();t=a.x()-C.width/2,n=-a.y()+C.height/2;let r=Math.atan2(-n,t)+Math.PI/2;C.height<0&&(r-=Math.PI);const i=l.getAngle(this.rotation())+r,o=l.getAngle(this.rotationSnapTolerance()),s=function(e,t){return Kt(e,t,function(e){return{x:e.x+e.width/2*Math.cos(e.rotation)+e.height/2*Math.sin(-e.rotation),y:e.y+e.height/2*Math.cos(e.rotation)+e.width/2*Math.sin(e.rotation)}}(e))}(C,function(e,t,n){let r=t;for(let a=0;a<e.length;a++){const i=l.getAngle(e[a]),o=Math.abs(i-t)%(2*Math.PI);Math.min(o,2*Math.PI-o)<n&&(r=i)}return r}(this.rotationSnaps(),i,o)-C.rotation);this._fitNodesInto(s,e)}}_handleMouseUp(e){this._removeEvents(e)}getAbsoluteTransform(){return this.getTransform()}_removeEvents(e){if(this._transforming){this._transforming=!1,"undefined"!=typeof window&&(window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0));var t=this.getNode();this._fire("transformend",{evt:e,target:t}),t&&this._nodes.forEach((t=>{t._fire("transformend",{evt:e,target:t})})),this._movingAnchorName=null}}_fitNodesInto(e,t){var n=this._getNodeRect();if(v._inRange(e.width,2*-this.padding()-1,1))return void this.update();if(v._inRange(e.height,2*-this.padding()-1,1))return void this.update();const r=this.flipEnabled();var a=new u;if(a.rotate(l.getAngle(this.rotation())),this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("left")>=0){const t=a.point({x:2*-this.padding(),y:0});if(e.x+=t.x,e.y+=t.y,e.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,!r)return void this.update()}else if(this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("right")>=0){const t=a.point({x:2*this.padding(),y:0});if(this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.width+=2*this.padding(),!r)return void this.update()}if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("top")>=0){const t=a.point({x:0,y:2*-this.padding()});if(e.x+=t.x,e.y+=t.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.height+=2*this.padding(),!r)return void this.update()}else if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("bottom")>=0){const t=a.point({x:0,y:2*this.padding()});if(this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.height+=2*this.padding(),!r)return void this.update()}if(this.boundBoxFunc()){const t=this.boundBoxFunc()(n,e);t?e=t:v.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}const i=1e7,o=new u;o.translate(n.x,n.y),o.rotate(n.rotation),o.scale(n.width/i,n.height/i);const s=new u;s.translate(e.x,e.y),s.rotate(e.rotation),s.scale(e.width/i,e.height/i);const c=s.multiply(o.invert());this._nodes.forEach((e=>{var n;const r=e.getParent().getAbsoluteTransform(),a=e.getTransform().copy();a.translate(e.offsetX(),e.offsetY());const i=new u;i.multiply(r.copy().invert()).multiply(c).multiply(r).multiply(a);const o=i.decompose();e.setAttrs(o),this._fire("transform",{evt:t,target:e}),e._fire("transform",{evt:t,target:e}),null===(n=e.getLayer())||void 0===n||n.batchDraw()})),this.rotation(v._getRotation(e.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}forceUpdate(){this._resetTransformCache(),this.update()}_batchChangeChild(e,t){this.findOne(e).setAttrs(t)}update(){var e,t=this._getNodeRect();this.rotation(v._getRotation(t.rotation));var n=t.width,r=t.height,a=this.enabledAnchors(),i=this.resizeEnabled(),o=this.padding(),l=this.anchorSize();this.find("._anchor").forEach((e=>{e.setAttrs({width:l,height:l,offsetX:l/2,offsetY:l/2,stroke:this.anchorStroke(),strokeWidth:this.anchorStrokeWidth(),fill:this.anchorFill(),cornerRadius:this.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:l/2+o,offsetY:l/2+o,visible:i&&a.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:n/2,y:0,offsetY:l/2+o,visible:i&&a.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:n,y:0,offsetX:l/2-o,offsetY:l/2+o,visible:i&&a.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:r/2,offsetX:l/2+o,visible:i&&a.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:n,y:r/2,offsetX:l/2-o,visible:i&&a.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:r,offsetX:l/2+o,offsetY:l/2-o,visible:i&&a.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:n/2,y:r,offsetY:l/2-o,visible:i&&a.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:n,y:r,offsetX:l/2-o,offsetY:l/2-o,visible:i&&a.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:n/2,y:-this.rotateAnchorOffset()*v._sign(r)-o,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:n,height:r,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),null===(e=this.getLayer())||void 0===e||e.batchDraw()}isTransforming(){return this._transforming}stopTransform(){if(this._transforming){this._removeEvents();var e=this.findOne("."+this._movingAnchorName);e&&e.stopDrag()}}destroy(){return this.getStage()&&this._cursorChange&&this.getStage().content&&(this.getStage().content.style.cursor=""),$e.prototype.destroy.call(this),this.detach(),this._removeEvents(),this}toObject(){return ee.prototype.toObject.call(this)}}Jt.prototype.className="Transformer",s(Jt),O.addGetterSetter(Jt,"enabledAnchors",$t,(function(e){return e instanceof Array||v.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach((function(e){-1===$t.indexOf(e)&&v.warn("Unknown anchor name: "+e+". Available names are: "+$t.join(", "))})),e||[]})),O.addGetterSetter(Jt,"flipEnabled",!0,k()),O.addGetterSetter(Jt,"resizeEnabled",!0),O.addGetterSetter(Jt,"anchorSize",10,_()),O.addGetterSetter(Jt,"rotateEnabled",!0),O.addGetterSetter(Jt,"rotationSnaps",[]),O.addGetterSetter(Jt,"rotateAnchorOffset",50,_()),O.addGetterSetter(Jt,"rotationSnapTolerance",5,_()),O.addGetterSetter(Jt,"borderEnabled",!0),O.addGetterSetter(Jt,"anchorStroke","rgb(0, 161, 255)"),O.addGetterSetter(Jt,"anchorStrokeWidth",1,_()),O.addGetterSetter(Jt,"anchorFill","white"),O.addGetterSetter(Jt,"anchorCornerRadius",0,_()),O.addGetterSetter(Jt,"borderStroke","rgb(0, 161, 255)"),O.addGetterSetter(Jt,"borderStrokeWidth",1,_()),O.addGetterSetter(Jt,"borderDash"),O.addGetterSetter(Jt,"keepRatio",!0),O.addGetterSetter(Jt,"centeredScaling",!1),O.addGetterSetter(Jt,"ignoreStroke",!1),O.addGetterSetter(Jt,"padding",0,_()),O.addGetterSetter(Jt,"node"),O.addGetterSetter(Jt,"nodes"),O.addGetterSetter(Jt,"boundBoxFunc"),O.addGetterSetter(Jt,"shouldOverdrawWholeArea",!1),O.backCompat(Jt,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"});class Zt extends Xe{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.radius(),0,l.getAngle(this.angle()),this.clockwise()),e.lineTo(0,0),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius(e/2)}setHeight(e){this.radius(e/2)}}function en(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}Zt.prototype.className="Wedge",Zt.prototype._centroid=!0,Zt.prototype._attrsAffectingSize=["radius"],s(Zt),O.addGetterSetter(Zt,"radius",0,_()),O.addGetterSetter(Zt,"angle",0,_()),O.addGetterSetter(Zt,"clockwise",!1),O.backCompat(Zt,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"});var tn=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],nn=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function rn(e,t,n,r,a){var i=n-t,o=a-r;return 0===i?r+o/2:0===o?r:o*((e-t)/i)+r}function an(e,t,n){var r=4*(n*e.width+t),a=[];return a.push(e.data[r++],e.data[r++],e.data[r++],e.data[r++]),a}function on(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)+Math.pow(e[2]-t[2],2))}O.addGetterSetter(ee,"blurRadius",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"brightness",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"contrast",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"embossStrength",.5,_(),O.afterSetFilter),O.addGetterSetter(ee,"embossWhiteLevel",.5,_(),O.afterSetFilter),O.addGetterSetter(ee,"embossDirection","top-left",null,O.afterSetFilter),O.addGetterSetter(ee,"embossBlend",!1,null,O.afterSetFilter),O.addGetterSetter(ee,"enhance",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"hue",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"saturation",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"luminance",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"hue",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"saturation",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"value",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"kaleidoscopePower",2,_(),O.afterSetFilter),O.addGetterSetter(ee,"kaleidoscopeAngle",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"threshold",0,_(),O.afterSetFilter),O.addGetterSetter(ee,"noise",.2,_(),O.afterSetFilter),O.addGetterSetter(ee,"pixelSize",8,_(),O.afterSetFilter),O.addGetterSetter(ee,"levels",.5,_(),O.afterSetFilter),O.addGetterSetter(ee,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),O.addGetterSetter(ee,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),O.addGetterSetter(ee,"blue",0,b,O.afterSetFilter),O.addGetterSetter(ee,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),O.addGetterSetter(ee,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),O.addGetterSetter(ee,"blue",0,b,O.afterSetFilter),O.addGetterSetter(ee,"alpha",1,(function(e){return this._filterUpToDate=!1,e>1?1:e<0?0:e})),O.addGetterSetter(ee,"threshold",.5,_(),O.afterSetFilter),it.Util._assign(it,{Arc:ot,Arrow:dt,Circle:ft,Ellipse:ht,Image:pt,Label:wt,Tag:xt,Line:ut,Path:ct,Rect:St,RegularPolygon:Et,Ring:Ct,Sprite:Pt,Star:Ot,Text:Gt,TextPath:Wt,Transformer:Jt,Wedge:Zt,Filters:{Blur:function(e){var t=Math.round(this.blurRadius());t>0&&function(e,t){var n,r,a,i,o,l,s,u,c,d,f,h,p,g,m,v,y,b,_,w,x,S,E,k,C=e.data,P=e.width,O=e.height,T=t+t+1,M=P-1,N=O-1,R=t+1,L=R*(R+1)/2,A=new en,D=null,I=A,z=null,j=null,F=tn[t],G=nn[t];for(a=1;a<T;a++)I=I.next=new en,a===R&&(D=I);for(I.next=A,s=l=0,r=0;r<O;r++){for(v=y=b=_=u=c=d=f=0,h=R*(w=C[l]),p=R*(x=C[l+1]),g=R*(S=C[l+2]),m=R*(E=C[l+3]),u+=L*w,c+=L*x,d+=L*S,f+=L*E,I=A,a=0;a<R;a++)I.r=w,I.g=x,I.b=S,I.a=E,I=I.next;for(a=1;a<R;a++)i=l+((M<a?M:a)<<2),u+=(I.r=w=C[i])*(k=R-a),c+=(I.g=x=C[i+1])*k,d+=(I.b=S=C[i+2])*k,f+=(I.a=E=C[i+3])*k,v+=w,y+=x,b+=S,_+=E,I=I.next;for(z=A,j=D,n=0;n<P;n++)C[l+3]=E=f*F>>G,0!==E?(E=255/E,C[l]=(u*F>>G)*E,C[l+1]=(c*F>>G)*E,C[l+2]=(d*F>>G)*E):C[l]=C[l+1]=C[l+2]=0,u-=h,c-=p,d-=g,f-=m,h-=z.r,p-=z.g,g-=z.b,m-=z.a,i=s+((i=n+t+1)<M?i:M)<<2,u+=v+=z.r=C[i],c+=y+=z.g=C[i+1],d+=b+=z.b=C[i+2],f+=_+=z.a=C[i+3],z=z.next,h+=w=j.r,p+=x=j.g,g+=S=j.b,m+=E=j.a,v-=w,y-=x,b-=S,_-=E,j=j.next,l+=4;s+=P}for(n=0;n<P;n++){for(y=b=_=v=c=d=f=u=0,h=R*(w=C[l=n<<2]),p=R*(x=C[l+1]),g=R*(S=C[l+2]),m=R*(E=C[l+3]),u+=L*w,c+=L*x,d+=L*S,f+=L*E,I=A,a=0;a<R;a++)I.r=w,I.g=x,I.b=S,I.a=E,I=I.next;for(o=P,a=1;a<=t;a++)l=o+n<<2,u+=(I.r=w=C[l])*(k=R-a),c+=(I.g=x=C[l+1])*k,d+=(I.b=S=C[l+2])*k,f+=(I.a=E=C[l+3])*k,v+=w,y+=x,b+=S,_+=E,I=I.next,a<N&&(o+=P);for(l=n,z=A,j=D,r=0;r<O;r++)C[3+(i=l<<2)]=E=f*F>>G,E>0?(E=255/E,C[i]=(u*F>>G)*E,C[i+1]=(c*F>>G)*E,C[i+2]=(d*F>>G)*E):C[i]=C[i+1]=C[i+2]=0,u-=h,c-=p,d-=g,f-=m,h-=z.r,p-=z.g,g-=z.b,m-=z.a,i=n+((i=r+R)<N?i:N)*P<<2,u+=v+=z.r=C[i],c+=y+=z.g=C[i+1],d+=b+=z.b=C[i+2],f+=_+=z.a=C[i+3],z=z.next,h+=w=j.r,p+=x=j.g,g+=S=j.b,m+=E=j.a,v-=w,y-=x,b-=S,_-=E,j=j.next,l+=P}}(e,t)},Brighten:function(e){var t,n=255*this.brightness(),r=e.data,a=r.length;for(t=0;t<a;t+=4)r[t]+=n,r[t+1]+=n,r[t+2]+=n},Contrast:function(e){var t,n=Math.pow((this.contrast()+100)/100,2),r=e.data,a=r.length,i=150,o=150,l=150;for(t=0;t<a;t+=4)i=r[t],o=r[t+1],l=r[t+2],i/=255,i-=.5,i*=n,i+=.5,o/=255,o-=.5,o*=n,o+=.5,l/=255,l-=.5,l*=n,l+=.5,i=(i*=255)<0?0:i>255?255:i,o=(o*=255)<0?0:o>255?255:o,l=(l*=255)<0?0:l>255?255:l,r[t]=i,r[t+1]=o,r[t+2]=l},Emboss:function(e){var t=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),a=this.embossBlend(),i=0,o=0,l=e.data,s=e.width,u=e.height,c=4*s,d=u;switch(r){case"top-left":i=-1,o=-1;break;case"top":i=-1,o=0;break;case"top-right":i=-1,o=1;break;case"right":i=0,o=1;break;case"bottom-right":i=1,o=1;break;case"bottom":i=1,o=0;break;case"bottom-left":i=1,o=-1;break;case"left":i=0,o=-1;break;default:v.error("Unknown emboss direction: "+r)}do{var f=(d-1)*c,h=i;d+h<1&&(h=0),d+h>u&&(h=0);var p=(d-1+h)*s*4,g=s;do{var m=f+4*(g-1),y=o;g+y<1&&(y=0),g+y>s&&(y=0);var b=p+4*(g-1+y),_=l[m]-l[b],w=l[m+1]-l[b+1],x=l[m+2]-l[b+2],S=_,E=S>0?S:-S;if((w>0?w:-w)>E&&(S=w),(x>0?x:-x)>E&&(S=x),S*=t,a){var k=l[m]+S,C=l[m+1]+S,P=l[m+2]+S;l[m]=k>255?255:k<0?0:k,l[m+1]=C>255?255:C<0?0:C,l[m+2]=P>255?255:P<0?0:P}else{var O=n-S;O<0?O=0:O>255&&(O=255),l[m]=l[m+1]=l[m+2]=O}}while(--g)}while(--d)},Enhance:function(e){var t,n,r,a,i=e.data,o=i.length,l=i[0],s=l,u=i[1],c=u,d=i[2],f=d,h=this.enhance();if(0!==h){for(a=0;a<o;a+=4)(t=i[a+0])<l?l=t:t>s&&(s=t),(n=i[a+1])<u?u=n:n>c&&(c=n),(r=i[a+2])<d?d=r:r>f&&(f=r);var p,g,m,v,y,b,_,w,x;for(s===l&&(s=255,l=0),c===u&&(c=255,u=0),f===d&&(f=255,d=0),h>0?(g=s+h*(255-s),m=l-h*(l-0),y=c+h*(255-c),b=u-h*(u-0),w=f+h*(255-f),x=d-h*(d-0)):(g=s+h*(s-(p=.5*(s+l))),m=l+h*(l-p),y=c+h*(c-(v=.5*(c+u))),b=u+h*(u-v),w=f+h*(f-(_=.5*(f+d))),x=d+h*(d-_)),a=0;a<o;a+=4)i[a+0]=rn(i[a+0],l,s,m,g),i[a+1]=rn(i[a+1],u,c,b,y),i[a+2]=rn(i[a+2],d,f,x,w)}},Grayscale:function(e){var t,n,r=e.data,a=r.length;for(t=0;t<a;t+=4)n=.34*r[t]+.5*r[t+1]+.16*r[t+2],r[t]=n,r[t+1]=n,r[t+2]=n},HSL:function(e){var t,n,r,a,i,o=e.data,l=o.length,s=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,c=127*this.luminance(),d=1*s*Math.cos(u*Math.PI/180),f=1*s*Math.sin(u*Math.PI/180),h=.299+.701*d+.167*f,p=.587-.587*d+.33*f,g=.114-.114*d-.497*f,m=.299-.299*d-.328*f,v=.587+.413*d+.035*f,y=.114-.114*d+.293*f,b=.299-.3*d+1.25*f,_=.587-.586*d-1.05*f,w=.114+.886*d-.2*f;for(t=0;t<l;t+=4)n=o[t+0],r=o[t+1],a=o[t+2],i=o[t+3],o[t+0]=h*n+p*r+g*a+c,o[t+1]=m*n+v*r+y*a+c,o[t+2]=b*n+_*r+w*a+c,o[t+3]=i},HSV:function(e){var t,n,r,a,i,o=e.data,l=o.length,s=Math.pow(2,this.value()),u=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,d=s*u*Math.cos(c*Math.PI/180),f=s*u*Math.sin(c*Math.PI/180),h=.299*s+.701*d+.167*f,p=.587*s-.587*d+.33*f,g=.114*s-.114*d-.497*f,m=.299*s-.299*d-.328*f,v=.587*s+.413*d+.035*f,y=.114*s-.114*d+.293*f,b=.299*s-.3*d+1.25*f,_=.587*s-.586*d-1.05*f,w=.114*s+.886*d-.2*f;for(t=0;t<l;t+=4)n=o[t+0],r=o[t+1],a=o[t+2],i=o[t+3],o[t+0]=h*n+p*r+g*a,o[t+1]=m*n+v*r+y*a,o[t+2]=b*n+_*r+w*a,o[t+3]=i},Invert:function(e){var t,n=e.data,r=n.length;for(t=0;t<r;t+=4)n[t]=255-n[t],n[t+1]=255-n[t+1],n[t+2]=255-n[t+2]},Kaleidoscope:function(e){var t,n,r,a,i,o,l,s,u,c=e.width,d=e.height,f=Math.round(this.kaleidoscopePower()),h=Math.round(this.kaleidoscopeAngle()),p=Math.floor(c*(h%360)/360);if(!(f<1)){var g=v.createCanvasElement();g.width=c,g.height=d;var m=g.getContext("2d").getImageData(0,0,c,d);!function(e,t,n){var r,a,i,o,l=e.data,s=t.data,u=e.width,c=e.height,d=n.polarCenterX||u/2,f=n.polarCenterY||c/2,h=0,p=0,g=0,m=0,v=Math.sqrt(d*d+f*f);a=u-d,i=c-f,v=(o=Math.sqrt(a*a+i*i))>v?o:v;var y,b,_,w,x=c,S=u,E=360/S*Math.PI/180;for(b=0;b<S;b+=1)for(_=Math.sin(b*E),w=Math.cos(b*E),y=0;y<x;y+=1)a=Math.floor(d+v*y/x*w),h=l[0+(r=4*((i=Math.floor(f+v*y/x*_))*u+a))],p=l[r+1],g=l[r+2],m=l[r+3],s[0+(r=4*(b+y*u))]=h,s[r+1]=p,s[r+2]=g,s[r+3]=m}(e,m,{polarCenterX:c/2,polarCenterY:d/2});for(var y=c/Math.pow(2,f);y<=8;)y*=2,f-=1;var b=y=Math.ceil(y),_=0,w=b,x=1;for(p+y>c&&(_=b,w=0,x=-1),n=0;n<d;n+=1)for(t=_;t!==w;t+=x)s=4*(c*n+Math.round(t+p)%c),a=m.data[s+0],i=m.data[s+1],o=m.data[s+2],l=m.data[s+3],u=4*(c*n+t),m.data[u+0]=a,m.data[u+1]=i,m.data[u+2]=o,m.data[u+3]=l;for(n=0;n<d;n+=1)for(b=Math.floor(y),r=0;r<f;r+=1){for(t=0;t<b+1;t+=1)s=4*(c*n+t),a=m.data[s+0],i=m.data[s+1],o=m.data[s+2],l=m.data[s+3],u=4*(c*n+2*b-t-1),m.data[u+0]=a,m.data[u+1]=i,m.data[u+2]=o,m.data[u+3]=l;b*=2}!function(e,t,n){var r,a,i,o,l,s,u=e.data,c=t.data,d=e.width,f=e.height,h=n.polarCenterX||d/2,p=n.polarCenterY||f/2,g=0,m=0,v=0,y=0,b=Math.sqrt(h*h+p*p);a=d-h,i=f-p,b=(s=Math.sqrt(a*a+i*i))>b?s:b;var _,w,x,S=f,E=d,k=n.polarRotation||0;for(a=0;a<d;a+=1)for(i=0;i<f;i+=1)o=a-h,l=i-p,_=Math.sqrt(o*o+l*l)*S/b,w=(w=(180*Math.atan2(l,o)/Math.PI+360+k)%360)*E/360,x=Math.floor(w),g=u[0+(r=4*(Math.floor(_)*d+x))],m=u[r+1],v=u[r+2],y=u[r+3],c[0+(r=4*(i*d+a))]=g,c[r+1]=m,c[r+2]=v,c[r+3]=y}(m,e,{polarRotation:0})}},Mask:function(e){var t=function(e,t){var n=an(e,0,0),r=an(e,e.width-1,0),a=an(e,0,e.height-1),i=an(e,e.width-1,e.height-1),o=t||10;if(on(n,r)<o&&on(r,i)<o&&on(i,a)<o&&on(a,n)<o){for(var l=function(e){for(var t=[0,0,0],n=0;n<e.length;n++)t[0]+=e[n][0],t[1]+=e[n][1],t[2]+=e[n][2];return t[0]/=e.length,t[1]/=e.length,t[2]/=e.length,t}([r,n,i,a]),s=[],u=0;u<e.width*e.height;u++){var c=on(l,[e.data[4*u],e.data[4*u+1],e.data[4*u+2]]);s[u]=c<o?0:255}return s}}(e,this.threshold());return t&&function(e,t){for(var n=0;n<e.width*e.height;n++)e.data[4*n+3]=t[n]}(e,t=function(e,t,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),o=[],l=0;l<n;l++)for(var s=0;s<t;s++){for(var u=l*t+s,c=0,d=0;d<a;d++)for(var f=0;f<a;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<t){var g=r[d*a+f];c+=e[h*t+p]*g}}o[u]=c}return o}(t=function(e,t,n){for(var r=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),o=[],l=0;l<n;l++)for(var s=0;s<t;s++){for(var u=l*t+s,c=0,d=0;d<a;d++)for(var f=0;f<a;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<t){var g=r[d*a+f];c+=e[h*t+p]*g}}o[u]=c>=1020?255:0}return o}(t=function(e,t,n){for(var r=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(r.length)),i=Math.floor(a/2),o=[],l=0;l<n;l++)for(var s=0;s<t;s++){for(var u=l*t+s,c=0,d=0;d<a;d++)for(var f=0;f<a;f++){var h=l+d-i,p=s+f-i;if(h>=0&&h<n&&p>=0&&p<t){var g=r[d*a+f];c+=e[h*t+p]*g}}o[u]=2040===c?255:0}return o}(t,e.width,e.height),e.width,e.height),e.width,e.height)),e},Noise:function(e){var t,n=255*this.noise(),r=e.data,a=r.length,i=n/2;for(t=0;t<a;t+=4)r[t+0]+=i-2*i*Math.random(),r[t+1]+=i-2*i*Math.random(),r[t+2]+=i-2*i*Math.random()},Pixelate:function(e){var t,n,r,a,i,o,l,s,u,c,d,f,h,p,g=Math.ceil(this.pixelSize()),m=e.width,y=e.height,b=Math.ceil(m/g),_=Math.ceil(y/g),w=e.data;if(g<=0)v.error("pixelSize value can not be <= 0");else for(f=0;f<b;f+=1)for(h=0;h<_;h+=1){for(a=0,i=0,o=0,l=0,u=(s=f*g)+g,d=(c=h*g)+g,p=0,t=s;t<u;t+=1)if(!(t>=m))for(n=c;n<d;n+=1)n>=y||(a+=w[0+(r=4*(m*n+t))],i+=w[r+1],o+=w[r+2],l+=w[r+3],p+=1);for(a/=p,i/=p,o/=p,l/=p,t=s;t<u;t+=1)if(!(t>=m))for(n=c;n<d;n+=1)n>=y||(w[0+(r=4*(m*n+t))]=a,w[r+1]=i,w[r+2]=o,w[r+3]=l)}},Posterize:function(e){var t,n=Math.round(254*this.levels())+1,r=e.data,a=r.length,i=255/n;for(t=0;t<a;t+=1)r[t]=Math.floor(r[t]/i)*i},RGB:function(e){var t,n,r=e.data,a=r.length,i=this.red(),o=this.green(),l=this.blue();for(t=0;t<a;t+=4)n=(.34*r[t]+.5*r[t+1]+.16*r[t+2])/255,r[t]=n*i,r[t+1]=n*o,r[t+2]=n*l,r[t+3]=r[t+3]},RGBA:function(e){var t,n,r=e.data,a=r.length,i=this.red(),o=this.green(),l=this.blue(),s=this.alpha();for(t=0;t<a;t+=4)n=1-s,r[t]=i*s+r[t]*n,r[t+1]=o*s+r[t+1]*n,r[t+2]=l*s+r[t+2]*n},Sepia:function(e){var t,n,r,a,i=e.data,o=i.length;for(t=0;t<o;t+=4)n=i[t+0],r=i[t+1],a=i[t+2],i[t+0]=Math.min(255,.393*n+.769*r+.189*a),i[t+1]=Math.min(255,.349*n+.686*r+.168*a),i[t+2]=Math.min(255,.272*n+.534*r+.131*a)},Solarize:function(e){var t=e.data,n=e.width,r=4*n,a=e.height;do{var i=(a-1)*r,o=n;do{var l=i+4*(o-1),s=t[l],u=t[l+1],c=t[l+2];s>127&&(s=255-s),u>127&&(u=255-u),c>127&&(c=255-c),t[l]=s,t[l+1]=u,t[l+2]=c}while(--o)}while(--a)},Threshold:function(e){var t,n=255*this.threshold(),r=e.data,a=r.length;for(t=0;t<a;t+=1)r[t]=r[t]<n?0:255}}});const ln=it;var sn=r(6525),un=r.n(sn),cn={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},dn=!1,fn=!1,hn=".react-konva-event",pn="ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n",gn='ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n',mn={};function vn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:mn;if(t===n&&console.error("same props"),!dn&&"zIndex"in t&&(console.warn(gn),dn=!0),!fn&&t.draggable){var r=void 0!==t.x||void 0!==t.y,a=t.onDragEnd||t.onDragMove;r&&!a&&(console.warn(pn),fn=!0)}for(var i in n)if(!cn[i]){var o="on"===i.slice(0,2),l=n[i]!==t[i];o&&l&&("content"===(p=i.substr(2).toLowerCase()).substr(0,7)&&(p="content"+p.substr(7,1).toUpperCase()+p.substr(8)),e.off(p,n[i]));var s=!t.hasOwnProperty(i);s&&e.setAttr(i,void 0)}var u=t._useStrictMode,c={},d=!1,f={};for(var i in t)if(!cn[i]){o="on"===i.slice(0,2);var h=n[i]!==t[i];o&&h&&("content"===(p=i.substr(2).toLowerCase()).substr(0,7)&&(p="content"+p.substr(7,1).toUpperCase()+p.substr(8)),t[i]&&(f[p]=t[i])),!o&&(t[i]!==n[i]||u&&t[i]!==e.getAttr(i))&&(d=!0,c[i]=t[i])}for(var p in d&&(e.setAttrs(c),yn(e)),f)e.on(p+hn,f[p])}function yn(e){if(!l.autoDrawEnabled){var t=e.getLayer()||e.getStage();t&&t.batchDraw()}}var bn=r(3840),_n={},wn={};function xn(e,t){"string"!=typeof t?(e.add(t),yn(e)):console.error("Do not use plain text as child of Konva.Node. You are using text: "+t)}function Sn(e,t,n){var r=ln[e];if(r){var a={},i={};for(var o in t)"on"===o.slice(0,2)?i[o]=t[o]:a[o]=t[o];var l=new r(a);return vn(l,i),l}console.error("Konva has no node with the type "+e+'. If you use minimal version of react-konva, just import required nodes into Konva: "import "konva/lib/shapes/'+e+'"  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html')}function En(e,t,n){console.error('Text components are not supported for now in ReactKonva. Your text is: "'+e+'"')}function kn(e,t,n){return!1}function Cn(e){return e}function Pn(){return null}function On(){return null}function Tn(e,t,n,r){return wn}function Mn(){}function Nn(e){}function Rn(e,t){return!1}function Ln(){return _n}function An(){return _n}ln.Node.prototype._applyProps=vn;var Dn=setTimeout,In=clearTimeout,zn=-1;function jn(e,t){return!1}var Fn=!1,Gn=!0,Bn=!0;function Un(e,t){t.parent===e?t.moveToTop():e.add(t),yn(e)}function Hn(e,t){t.parent===e?t.moveToTop():e.add(t),yn(e)}function Wn(e,t,n){t._remove(),e.add(t),t.setZIndex(n.getZIndex()),yn(e)}function Xn(e,t,n){Wn(e,t,n)}function Vn(e,t){t.destroy(),t.off(hn),yn(e)}function Yn(e,t){t.destroy(),t.off(hn),yn(e)}function Qn(e,t,n){console.error('Text components are not yet supported in ReactKonva. You text is: "'+n+'"')}function qn(e,t,n){}function $n(e,t,n,r,a){vn(e,a,r)}function Kn(e){e.hide(),yn(e)}function Jn(e){}function Zn(e,t){(null==t.visible||t.visible)&&e.show()}function er(e,t){}function tr(e){}var nr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};"17"!==n.version.split(".")[0]&&console.warn("Version mismatch detected for react-konva and react. react-konva expects to have react version 17, but it has version "+n.version+'. Make sure versions are matched, otherwise, react-konva work is not guaranteed. You can use this command: "npm install react@17 react-dom@17"');var rr=function(e){var t,r,a=n.useRef(),i=n.useRef(),o=n.useRef(),l=(t=e,r=n.useRef(),n.useLayoutEffect((function(){r.current=t})),r.current),s=function(t){var n=e.forwardedRef;n&&("function"==typeof n?n(t):n.current=t)};return n.useLayoutEffect((function(){return i.current=new ln.Stage({width:e.width,height:e.height,container:a.current}),s(i.current),o.current=sr.createContainer(i.current),sr.updateContainer(e.children,o.current),function(){ln.isBrowser&&(s(null),sr.updateContainer(null,o.current,null),i.current.destroy())}}),[]),n.useLayoutEffect((function(){s(i.current),vn(i.current,e,l),sr.updateContainer(e.children,o.current,null)})),n.createElement("div",{ref:a,accessKey:e.accessKey,className:e.className,role:e.role,style:e.style,tabIndex:e.tabIndex,title:e.title})},ar="Group",ir="Circle",or="Star",lr="Transformer",sr=un()(t);sr.injectIntoDevTools({findHostInstanceByFiber:function(){return null},bundleType:0,version:n.version,rendererPackageName:"react-konva"});var ur=n.forwardRef((function(e,t){return n.createElement(rr,nr({},e,{forwardedRef:t}))}));const cr=10,dr="#FF0000",fr="#FFFFFF",hr="#000000",pr=["normal","italic"],gr=["SansSerif","Arial"],mr={epd_213_wb:{width:212,height:104},epd_213_wb_f:{width:212,height:104},epd_213_wbr:{width:212,height:104},epd_213_wbr_h:{width:250,height:122},epd_290_wb:{width:296,height:128},epd_290_wbr:{width:296,height:128},epd_290_wby:{width:296,height:128},epd_420_wbr:{width:400,height:300},epd_420_wby:{width:400,height:300},epd_437_wbr:{width:480,height:176},epd_750_wb:{width:640,height:384}},vr=["image/png"],yr={_type:"rect",index:0,x:5,y:5,width:80,height:40,strokeWidth:1,rotation:0,fill:dr,stroke:hr},br={_type:"barcode",index:0,x:5,y:5,width:120,width_barcode:1,height:20,data:null,text:"999988881234",rotation:0,fill:hr},_r={_type:"image",index:0,x:5,y:5,width:80,height:80,data:null,rotation:0},wr={_type:"circle",index:0,x:5,y:5,radius:10,strokeWidth:1,rotation:0,fill:dr,stroke:hr},xr={_type:"circles",index:0,x:5,y:5,margin:2,radius:10,strokeWidth:1,rotation:0,value:4,max:5,width:108,height:20,fill:dr,stroke:hr,fill_blank:fr},Sr={_type:"star",index:0,x:5,y:5,numPoints:5,innerRadius:5,outerRadius:10,strokeWidth:1,rotation:0,fill:dr,stroke:hr},Er={_type:"stars",index:0,x:5,y:5,margin:2,numPoints:5,innerRadius:5,outerRadius:10,strokeWidth:1,rotation:0,value:4,max:5,fill:dr,stroke:hr,fill_blank:fr},kr={_type:"text",index:0,x:5,y:5,text:"text",fontSize:18,fontStyle:pr[0],fontFamily:gr[0],fill:hr};function Cr(){return(Cr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Pr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement("Line",Cr({},e,{draggable:!0,onClick:r,onTap:r,ref:ref_ele,onDragEnd:t=>{let n={...e};n.x=t.target.attrs.x,n.y=t.target.attrs.y,a(n)},onTransformEnd:t=>{const n=t.target.scaleX(),r=t.target.scaleY();t.target.scaleX(1),t.target.scaleY(1);let i={...e};i.width=t.target.attrs.width*n,i.height=t.target.attrs.height*r,a(i)}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Or(){return(Or=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Tr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement("Rect",Or({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{console.log("element_react onDragEnd");let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{console.log("element_react onTransformEnd");const n=t.target.scaleX(),r=t.target.scaleY();t.target.scaleX(1),t.target.scaleY(1);let i={...e};i.x=t.target.x(),i.y=t.target.y(),i.rotation=t.target.rotation(),i.width=t.target.attrs.width*n,i.height=t.target.attrs.height*r,a(i)}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Mr(){return(Mr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Nr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement(ir,Mr({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{const n=t.target.scaleX();t.target.scaleX(1),t.target.scaleY(1);let r={...e};r.x=t.target.x(),r.y=t.target.y(),r.rotation=t.target.rotation(),r.radius=r.radius*n,a(r)}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Rr(){return(Rr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Lr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement(or,Rr({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{console.log("star onTransformEnd",t);const n=t.target.scaleX();t.target.scaleX(1),t.target.scaleY(1);let r={...e};r.x=t.target.x(),r.y=t.target.y(),r.rotation=t.target.rotation(),r.innerRadius=t.target.attrs.innerRadius*n,r.outerRadius=t.target.attrs.outerRadius*n,a(r)}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Ar(){return(Ar=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Dr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement(ar,Ar({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{const n=t.target.scaleX();t.target.scaleX(1),t.target.scaleY(1);let r={...e};r.x=t.target.x(),r.y=t.target.y(),r.rotation=t.target.rotation(),r.radius=r.radius*n,a(r)}}),(t=>{let n=[];for(let t=0;t<e.max;t++)n.push(t<e.value);return n})().map(((t,r)=>n.createElement(ir,{key:r,x:2*e.radius*r+e.margin*r,y:0,radius:e.radius,fill:t?e.fill:"#ffffff",stroke:e.stroke,strokeWidth:e.strokeWidth})))),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Ir(){return(Ir=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const zr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement(ar,Ir({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{const n=t.target.scaleX();t.target.scaleX(1),t.target.scaleY(1);let r={...e};r.x=t.target.x(),r.y=t.target.y(),r.rotation=t.target.rotation(),r.innerRadius=r.innerRadius*n,r.outerRadius=r.outerRadius*n,a(r)}}),(t=>{let n=[];for(let t=0;t<e.max;t++)n.push(t<e.value);return n})().map(((t,r)=>n.createElement(or,{key:r,x:2*e.outerRadius*r+e.margin*r,y:0,fill:t?e.fill:"#ffffff",stroke:e.stroke,strokeWidth:e.strokeWidth,rotation:0,innerRadius:e.innerRadius,outerRadius:e.outerRadius,numPoints:e.numPoints})))),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function jr(){return(jr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Fr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement("Text",jr({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{console.log("text onTransformEnd",t);const n=t.target.scaleX(),r=t.target.scaleY();t.target.scaleX(1),t.target.scaleY(1);let i={...e};i.x=t.target.x(),i.y=t.target.y(),i.rotation=t.target.rotation(),i.width=t.target.attrs.width*n,i.height=t.target.attrs.height*r,a(i)}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};var Gr=r(5961),Br=r.n(Gr);const Ur=(e,t,n,r)=>{const a=document.createElement("canvas");Br()(a,e||"123456789012",{displayValue:!1,width:t||2,height:n||20,lineColor:r||"#000000",margin:0});const i=a.toDataURL(),o=document.createElement("IMG");return o.src=i,{width:a.width,height:a.height,base64:i,data:Array.from(a.getContext("2d").getImageData(0,0,a.width,a.height).data),image:o}},Hr=e=>new Promise(((t,n)=>{const r=document.createElement("IMG");r.onload=e=>{const n=document.createElement("canvas");n.width=r.width,n.height=r.height;const a=n.getContext("2d");a.drawImage(r,0,0),t({data:Array.from(a.getImageData(0,0,r.width,r.height).data),image:r})},r.src=e}));function Wr(){return(Wr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const Xr=({props:e,isSelected:t,onSelect:r,onChange:a})=>{const i=(0,n.useRef)(),o=(0,n.useRef)();return n.useEffect((e=>{t&&(o.current.nodes([i.current]),o.current.getLayer().batchDraw())}),[t]),n.createElement(n.Fragment,null,n.createElement("Image",Wr({},e,{draggable:!0,onClick:r,onTap:r,ref:i,onDragEnd:t=>{let n={...e};n.x=t.target.x(),n.y=t.target.y(),a(n)},onTransformEnd:t=>{Hr(t.target.attrs.image.currentSrc).then((({image:n,data:r})=>{const i=t.target.scaleX(),o=t.target.scaleY();t.target.scaleX(1),t.target.scaleY(1);let l={...e};l.x=t.target.x(),l.y=t.target.y(),l.rotation=t.target.rotation(),l.width=t.target.attrs.width*i,l.height=t.target.attrs.height*o,l.data=Array.from(r),a(l)}))}})),t&&n.createElement(lr,{borderDash:[2],anchorSize:4,rotateAnchorOffset:cr,ref:o}))};function Vr(){return(Vr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Yr(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t.indexOf(n=i[r])>=0||(a[n]=e[n]);return a}var Qr="undefined"!=typeof window?n.useLayoutEffect:n.useEffect;function qr(e){var t=(0,n.useRef)(e);return(0,n.useEffect)((function(){t.current=e})),(0,n.useCallback)((function(e){return t.current&&t.current(e)}),[])}var $r=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),e>n?n:e<t?t:e},Kr=function(e){return"touches"in e},Jr=function(e,t){var n=e.getBoundingClientRect(),r=Kr(t)?t.touches[0]:t;return{left:$r((r.pageX-(n.left+window.pageXOffset))/n.width),top:$r((r.pageY-(n.top+window.pageYOffset))/n.height)}},Zr=function(e){!Kr(e)&&e.preventDefault()},ea=n.memo((function(e){var t=e.onMove,r=e.onKey,a=Yr(e,["onMove","onKey"]),i=(0,n.useRef)(null),o=(0,n.useRef)(!1),l=(0,n.useState)(!1),s=l[0],u=l[1],c=qr(t),d=qr(r),f=(0,n.useCallback)((function(e){Zr(e),(Kr(e)?e.touches.length>0:e.buttons>0)&&i.current?c(Jr(i.current,e)):u(!1)}),[c]),h=(0,n.useCallback)((function(e){var t,n=e.nativeEvent;Zr(n),t=n,o.current&&!Kr(t)||(o.current||(o.current=Kr(t)),0)||(c(Jr(i.current,n)),u(!0))}),[c]),p=(0,n.useCallback)((function(e){var t=e.which||e.keyCode;t<37||t>40||(e.preventDefault(),d({left:39===t?.05:37===t?-.05:0,top:40===t?.05:38===t?-.05:0}))}),[d]),g=(0,n.useCallback)((function(){return u(!1)}),[]),m=(0,n.useCallback)((function(e){var t=e?window.addEventListener:window.removeEventListener;t(o.current?"touchmove":"mousemove",f),t(o.current?"touchend":"mouseup",g)}),[f,g]);return Qr((function(){return m(s),function(){s&&m(!1)}}),[s,m]),n.createElement("div",Vr({},a,{className:"react-colorful__interactive",ref:i,onTouchStart:h,onMouseDown:h,onKeyDown:p,tabIndex:0,role:"slider"}))})),ta=function(e){return e.filter(Boolean).join(" ")},na=function(e){var t=e.color,r=e.left,a=e.top,i=void 0===a?.5:a,o=ta(["react-colorful__pointer",e.className]);return n.createElement("div",{className:o,style:{top:100*i+"%",left:100*r+"%"}},n.createElement("div",{className:"react-colorful__pointer-fill",style:{backgroundColor:t}}))},ra=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*e)/n},aa=(Math.PI,function(e){return"#"===e[0]&&(e=e.substr(1)),e.length<6?{r:parseInt(e[0]+e[0],16),g:parseInt(e[1]+e[1],16),b:parseInt(e[2]+e[2],16),a:1}:{r:parseInt(e.substr(0,2),16),g:parseInt(e.substr(2,2),16),b:parseInt(e.substr(4,2),16),a:1}}),ia=function(e){var t=function(e){var t=e.s,n=e.v,r=e.a,a=(200-t)*n/100;return{h:ra(e.h),s:ra(a>0&&a<200?t*n/100/(a<=100?a:200-a)*100:0),l:ra(a/2),a:ra(r,2)}}(e);return"hsl("+t.h+", "+t.s+"%, "+t.l+"%)"},oa=function(e){var t=e.toString(16);return t.length<2?"0"+t:t},la=n.memo((function(e){var t=e.hue,r=e.onChange,a=ta(["react-colorful__hue",e.className]);return n.createElement("div",{className:a},n.createElement(ea,{onMove:function(e){r({h:360*e.left})},onKey:function(e){r({h:$r(t+360*e.left,0,360)})},"aria-label":"Hue","aria-valuetext":ra(t)},n.createElement(na,{className:"react-colorful__hue-pointer",left:t/360,color:ia({h:t,s:100,v:100,a:1})})))})),sa=n.memo((function(e){var t=e.hsva,r=e.onChange,a={backgroundColor:ia({h:t.h,s:100,v:100,a:1})};return n.createElement("div",{className:"react-colorful__saturation",style:a},n.createElement(ea,{onMove:function(e){r({s:100*e.left,v:100-100*e.top})},onKey:function(e){r({s:$r(t.s+100*e.left,0,100),v:$r(t.v-100*e.top,0,100)})},"aria-label":"Color","aria-valuetext":"Saturation "+ra(t.s)+"%, Brightness "+ra(t.v)+"%"},n.createElement(na,{className:"react-colorful__saturation-pointer",top:1-t.v/100,left:t.s/100,color:ia(t)})))})),ua=function(e,t){if(e===t)return!0;for(var n in e)if(e[n]!==t[n])return!1;return!0};function ca(e,t,r){var a=qr(r),i=(0,n.useState)((function(){return e.toHsva(t)})),o=i[0],l=i[1],s=(0,n.useRef)({color:t,hsva:o});(0,n.useEffect)((function(){if(!e.equal(t,s.current.color)){var n=e.toHsva(t);s.current={hsva:n,color:t},l(n)}}),[t,e]),(0,n.useEffect)((function(){var t;ua(o,s.current.hsva)||e.equal(t=e.fromHsva(o),s.current.color)||(s.current={hsva:o,color:t},a(t))}),[o,e,a]);var u=(0,n.useCallback)((function(e){l((function(t){return Object.assign({},t,e)}))}),[]);return[o,u]}var da,fa=function(){Qr((function(){if("undefined"!=typeof document&&!da){(da=document.createElement("style")).innerHTML='.react-colorful{position:relative;display:flex;flex-direction:column;width:200px;height:200px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.react-colorful__saturation{position:relative;flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(0deg,#000,transparent),linear-gradient(90deg,#fff,hsla(0,0%,100%,0))}.react-colorful__alpha-gradient,.react-colorful__pointer-fill{content:"";position:absolute;left:0;top:0;right:0;bottom:0;pointer-events:none;border-radius:inherit}.react-colorful__alpha-gradient,.react-colorful__saturation{box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}.react-colorful__alpha,.react-colorful__hue{position:relative;height:24px}.react-colorful__hue{background:linear-gradient(90deg,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red)}.react-colorful__last-control{border-radius:0 0 8px 8px}.react-colorful__interactive{position:absolute;left:0;top:0;right:0;bottom:0;border-radius:inherit;outline:none;touch-action:none}.react-colorful__pointer{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}.react-colorful__interactive:focus .react-colorful__pointer{transform:translate(-50%,-50%) scale(1.1)}.react-colorful__alpha,.react-colorful__alpha-pointer{background-color:#fff;background-image:url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>\')}.react-colorful__saturation-pointer{z-index:3}.react-colorful__hue-pointer{z-index:2}';var e=r.nc;e&&da.setAttribute("nonce",e),document.head.appendChild(da)}}),[])},ha=function(e){var t=e.className,r=e.colorModel,a=e.color,i=void 0===a?r.defaultColor:a,o=e.onChange,l=Yr(e,["className","colorModel","color","onChange"]);fa();var s=ca(r,i,o),u=s[0],c=s[1],d=ta(["react-colorful",t]);return n.createElement("div",Vr({},l,{className:d}),n.createElement(sa,{hsva:u,onChange:c}),n.createElement(la,{hue:u.h,onChange:c,className:"react-colorful__last-control"}))},pa={defaultColor:"000",toHsva:function(e){return function(e){var t=e.r,n=e.g,r=e.b,a=e.a,i=Math.max(t,n,r),o=i-Math.min(t,n,r),l=o?i===t?(n-r)/o:i===n?2+(r-t)/o:4+(t-n)/o:0;return{h:ra(60*(l<0?l+6:l)),s:ra(i?o/i*100:0),v:ra(i/255*100),a}}(aa(e))},fromHsva:function(e){return n=(t=function(e){var t=e.h,n=e.s,r=e.v,a=e.a;t=t/360*6,n/=100,r/=100;var i=Math.floor(t),o=r*(1-n),l=r*(1-(t-i)*n),s=r*(1-(1-t+i)*n),u=i%6;return{r:ra(255*[r,l,o,o,s,r][u]),g:ra(255*[s,r,r,l,o,o][u]),b:ra(255*[o,o,s,r,r,l][u]),a:ra(a,2)}}(e)).g,r=t.b,"#"+oa(t.r)+oa(n)+oa(r);var t,n,r},equal:function(e,t){return e.toLowerCase()===t.toLowerCase()||ua(aa(e),aa(t))}},ga=function(e){return n.createElement(ha,Vr({},e,{colorModel:pa}))};const ma=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"width"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.width,onChange:e=>t("width",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"height"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.height,onChange:e=>t("height",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"stroke"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.stroke,onChange:e=>t("stroke",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"strokeWidth"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.strokeWidth,onChange:e=>t("strokeWidth",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))))},va=t=>{const r=(e,n)=>{let r={...t.shape};r[e]=n,t.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:t.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:t.shape.index,onChange:e=>r("index",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:t.shape.x,onChange:e=>r("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:t.shape.y,onChange:e=>r("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"radius"),n.createElement("div",{className:"value"},t.shape.radius)),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:t.shape.fill,onChange:e=>r("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"stroke"),n.createElement("div",{className:"value"},n.createElement(ga,{color:t.shape.stroke,onChange:e=>r("stroke",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"strokeWidth"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:t.shape.strokeWidth,onChange:t=>r("strokeWidth",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:t.shape.rotation,onChange:e=>r("rotation",parseFloat(e.target.value))}))))},ya=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"radius"),n.createElement("div",{className:"value"},e.shape.radius)),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"stroke"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.stroke,onChange:e=>t("stroke",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"strokeWidth"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.strokeWidth,onChange:e=>t("strokeWidth",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))))},ba=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"numPoints"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",min:"3",value:e.shape.numPoints,onChange:e=>t("numPoints",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"innerRadius"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.innerRadius,onChange:e=>t("innerRadius",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"outerRadius"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.outerRadius,onChange:e=>t("outerRadius",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"stroke"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.stroke,onChange:e=>t("stroke",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"strokeWidth"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",min:"0",max:"3",value:e.shape.strokeWidth,onChange:e=>t("strokeWidth",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))))},_a=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"numPoints"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",min:"3",value:e.shape.numPoints,onChange:e=>t("numPoints",parseInt(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"innerRadius"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.innerRadius,onChange:e=>t("innerRadius",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"outerRadius"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.outerRadius,onChange:e=>t("outerRadius",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"stroke"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.stroke,onChange:e=>t("stroke",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"strokeWidth"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",min:"0",max:"3",value:e.shape.strokeWidth,onChange:e=>t("strokeWidth",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))))},wa=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"text"),n.createElement("div",{className:"value"},n.createElement("input",{type:"text",value:e.shape.text,onChange:e=>t("text",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"font size"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.fontSize,onChange:e=>t("fontSize",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"font style"),n.createElement("div",{className:"value"},n.createElement("select",{value:e.shape.fontStyle,onChange:e=>t("fontStyle",e.target.value)},pr.map(((e,t)=>n.createElement("option",{key:t,value:e},e)))))),n.createElement("div",null,n.createElement("div",{className:"label"},"font family"),n.createElement("div",{className:"value"},n.createElement("select",{value:e.shape.fontFamily,onChange:e=>t("fontFamily",e.target.value)},gr.map(((e,t)=>n.createElement("option",{key:t,value:e},e)))))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},e.shape.rotation)))},xa=e=>{const t=(t,n)=>{let r={...e.shape};r[t]=n,e.onChange(r)};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"width"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.width,onChange:e=>t("width",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"height"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.height,onChange:e=>t("height",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))))},Sa=e=>{const t=(t,n)=>{const r={...e.shape};r[t]=n;const{width:a,height:i,data:o,base64:l}=Ur(r.text,r.width_barcode,r.height,r.fill);Hr(l).then((({image:t,data:n})=>{r.width=a,r.height=i,r.image=t,r.data=n,e.onChange(r)}))};return n.createElement("div",{id:"dvnd-properties"},n.createElement("div",{onClick:e.onDelete},"X"),n.createElement("div",null,n.createElement("div",{className:"label"},"index"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",step:"1",value:e.shape.index,onChange:e=>t("index",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"x"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.x,onChange:e=>t("x",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"y"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.y,onChange:e=>t("y",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"width"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.width,onChange:e=>t("width",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"height"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.height,onChange:e=>t("height",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"text"),n.createElement("div",{className:"value"},n.createElement("input",{type:"text",value:e.shape.text,onChange:e=>t("text",e.target.value)}))),n.createElement("div",null,n.createElement("div",{className:"label"},"rotation"),n.createElement("div",{className:"value"},n.createElement("input",{type:"number",value:e.shape.rotation,onChange:e=>t("rotation",parseFloat(e.target.value))}))),n.createElement("div",null,n.createElement("div",{className:"label"},"fill"),n.createElement("div",{className:"value"},n.createElement(ga,{color:e.shape.fill,onChange:e=>t("fill",e)}))))},Ea=e=>{const t=e.template?mr[e.template.epd]:mr.epd_213_wbr,[r,a]=(0,n.useState)({width:t.width,height:t.height,elements:[]}),[i,o]=(0,n.useState)({width:e.width||600,height:e.height||400}),[l,s]=(0,n.useState)(null),u=e=>{e.target===e.target.getStage()&&s(null)},c=(e,t)=>{let n={...r};n.elements[t]=e,a(n),["circles","stars"].indexOf(e._type)},d=e=>{let t={...r};t.elements.splice(e,1),a(t),s(null)};return n.createElement("div",{id:"dvnd"},n.createElement(ur,{width:r.width,height:r.height,onMouseDown:u,onTouchStart:u},n.createElement("Layer",null,r.elements.map(((e,t)=>{switch(e._type){case"rect":return n.createElement(Tr,{key:t,isSelected:t===l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"circle":return n.createElement(Nr,{key:t,isSelected:t===l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"circles":return n.createElement(Dr,{key:t,isSelected:t===l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"star":return n.createElement(Lr,{key:t,isSelected:t==l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"stars":return n.createElement(zr,{key:t,isSelected:t===l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"text":return n.createElement(Fr,{key:t,isSelected:t==l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"image":case"barcode":return n.createElement(Xr,{key:t,isSelected:t==l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});case"line":return n.createElement(Pr,{key:t,isSelected:t===l,props:{...e},onSelect:e=>s(t),onChange:e=>c(e,t)});default:return null}})))),n.createElement("div",{id:"dvnd-toolbar"},n.createElement("div",null,n.createElement("button",{onClick:t=>e.onSave(r)},"save")),n.createElement("select",{onChange:e=>(e=>{let t={...r};t.width=mr[e.target.value].width,t.height=mr[e.target.value].height,a(t)})(e)},Object.entries(mr).map(((e,t)=>n.createElement("option",{key:t,value:e[0]},e[0],"-",e[1].width,"x",e[1].height)))),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...yr}),a(t)}},"rect"),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...wr}),a(t)}},"circle"),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...xr}),a(t)}},"circles"),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...Sr}),a(t)}},"star"),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...Er}),a(t)}},"stars"),n.createElement("div",{onClick:e=>{let t={...r};t.elements.push({...kr}),a(t)}},"text"),n.createElement("div",{onClick:e=>{new Promise(((e,t)=>{let n=document.createElement("input");n.type="file",n.onchange=t=>{if(t.target.files&&t.target.files[0]&&vr.indexOf(t.target.files[0].type)>=0){let n=t.target.files[0],r=new FileReader;r.onload=t=>e(t.target.result),r.readAsDataURL(n)}},n.click()})).then((e=>{Hr(e).then((({image:e,data:t})=>{const n={..._r};n.width=e.width,n.height=e.height,n.image=e,n.data=t;const i={...r};i.elements.push(n),a(i)}))}))}},"image"),n.createElement("div",{onClick:e=>{const{width:t,height:n,data:i,base64:o,image:l}=Ur(br.text,br.width_barcode,br.height,br.fill),s={...br};s.width=t,s.height=n,s.data=i,s.image=l;const u={...r};u.elements.push(s),a(u)}},"barcode")),null===l?null:{rect:n.createElement(ma,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),circle:n.createElement(va,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),circles:n.createElement(ya,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),star:n.createElement(ba,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),stars:n.createElement(_a,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),text:n.createElement(wa,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),image:n.createElement(xa,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)}),barcode:n.createElement(Sa,{shape:r.elements[l],onChange:e=>c(e,l),onDelete:e=>d(l)})}[r.elements[l]._type])};a.render(n.createElement(Ea,{width:600,height:300,onSave:e=>{var t;("POST","/draw",t=e,new Promise(((e,n)=>{let r=new XMLHttpRequest;r.onload=()=>{200===r.status?e(JSON.parse(r.responseText)):n(r.responseText)},r.open("POST","/draw"),r.setRequestHeader("Content-Type","application/json"),r.send(JSON.stringify(t))}))).then((e=>{let t="data:image/png;base64,"+btoa(String.fromCharCode(...e.data_base64));console.log("ms_render",e.ms_render),console.log("base64",t)}))}}),document.getElementById("demo"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,